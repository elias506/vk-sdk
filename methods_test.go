// Code generated by https://github.com/elias506/vk-sdk. DO NOT EDIT.

package vk_sdk

import (
	"context"
	"encoding/json"
	"errors"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"net/url"
	"testing"
)

func fillRandomly_Account_Ban_Request(r *Account_Ban_Request) {
	(*r).OwnerId = new(int)
	*(*r).OwnerId = randInt()
}

func TestVK_Account_Ban_Success(t *testing.T) {
	values := make(url.Values, 3)
	var req Account_Ban_Request
	fillRandomly_Account_Ban_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Base_Ok_Response
	fillRandomly_Base_Ok_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "account.ban", values, expectedJSON), token)
	resp, apiErr, err := vk.Account_Ban(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Account_Ban_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "account.ban", expectedJSON), "")
	resp, apiErr, err := vk.Account_Ban(context.Background(), Account_Ban_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Account_Ban_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Account_Ban(context.Background(), Account_Ban_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Account_ChangePassword_Request(r *Account_ChangePassword_Request) {
	(*r).RestoreSid = new(string)
	*(*r).RestoreSid = randString()
	(*r).ChangePasswordHash = new(string)
	*(*r).ChangePasswordHash = randString()
	(*r).OldPassword = new(string)
	*(*r).OldPassword = randString()
	(*r).NewPassword = randString()
}

func TestVK_Account_ChangePassword_Success(t *testing.T) {
	values := make(url.Values, 6)
	var req Account_ChangePassword_Request
	fillRandomly_Account_ChangePassword_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Account_ChangePassword_Response
	fillRandomly_Account_ChangePassword_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "account.changePassword", values, expectedJSON), token)
	resp, apiErr, err := vk.Account_ChangePassword(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Account_ChangePassword_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "account.changePassword", expectedJSON), "")
	resp, apiErr, err := vk.Account_ChangePassword(context.Background(), Account_ChangePassword_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Account_ChangePassword_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Account_ChangePassword(context.Background(), Account_ChangePassword_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Account_GetActiveOffers_Request(r *Account_GetActiveOffers_Request) {
	(*r).Offset = new(int)
	*(*r).Offset = randInt()
	(*r).Count = new(int)
	*(*r).Count = randInt()
}

func TestVK_Account_GetActiveOffers_Success(t *testing.T) {
	values := make(url.Values, 4)
	var req Account_GetActiveOffers_Request
	fillRandomly_Account_GetActiveOffers_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Account_GetActiveOffers_Response
	fillRandomly_Account_GetActiveOffers_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "account.getActiveOffers", values, expectedJSON), token)
	resp, apiErr, err := vk.Account_GetActiveOffers(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Account_GetActiveOffers_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "account.getActiveOffers", expectedJSON), "")
	resp, apiErr, err := vk.Account_GetActiveOffers(context.Background(), Account_GetActiveOffers_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Account_GetActiveOffers_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Account_GetActiveOffers(context.Background(), Account_GetActiveOffers_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Account_GetAppPermissions_Request(r *Account_GetAppPermissions_Request) {
	(*r).UserId = randInt()
}

func TestVK_Account_GetAppPermissions_Success(t *testing.T) {
	values := make(url.Values, 3)
	var req Account_GetAppPermissions_Request
	fillRandomly_Account_GetAppPermissions_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Account_GetAppPermissions_Response
	fillRandomly_Account_GetAppPermissions_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "account.getAppPermissions", values, expectedJSON), token)
	resp, apiErr, err := vk.Account_GetAppPermissions(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Account_GetAppPermissions_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "account.getAppPermissions", expectedJSON), "")
	resp, apiErr, err := vk.Account_GetAppPermissions(context.Background(), Account_GetAppPermissions_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Account_GetAppPermissions_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Account_GetAppPermissions(context.Background(), Account_GetAppPermissions_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Account_GetBanned_Request(r *Account_GetBanned_Request) {
	(*r).Offset = new(int)
	*(*r).Offset = randInt()
	(*r).Count = new(int)
	*(*r).Count = randInt()
}

func TestVK_Account_GetBanned_Success(t *testing.T) {
	values := make(url.Values, 4)
	var req Account_GetBanned_Request
	fillRandomly_Account_GetBanned_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Account_GetBanned_Response
	fillRandomly_Account_GetBanned_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "account.getBanned", values, expectedJSON), token)
	resp, apiErr, err := vk.Account_GetBanned(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Account_GetBanned_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "account.getBanned", expectedJSON), "")
	resp, apiErr, err := vk.Account_GetBanned(context.Background(), Account_GetBanned_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Account_GetBanned_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Account_GetBanned(context.Background(), Account_GetBanned_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Account_GetCounters_Filter(o *Account_GetCounters_Filter) {
	switch randIntn(12) {
	case 0:
		*o = "friends"
	case 1:
		*o = "messages"
	case 2:
		*o = "photos"
	case 3:
		*o = "notes"
	case 4:
		*o = "gifts"
	case 5:
		*o = "events"
	case 6:
		*o = "groups"
	case 7:
		*o = "sdk"
	case 8:
		*o = "friends_suggestions"
	case 9:
		*o = "notifications"
	case 10:
		*o = "app_requests"
	case 11:
		*o = "friends_recommendations"
	}
}

func fillRandomly_Account_GetCounters_Request(r *Account_GetCounters_Request) {
	(*r).Filter = new([]Account_GetCounters_Filter)
	l0 := randIntn(maxArrayLength + 1)
	*(*r).Filter = make([]Account_GetCounters_Filter, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomly_Account_GetCounters_Filter(&(*(*r).Filter)[i0])
	}
	(*r).UserId = new(int)
	*(*r).UserId = randInt()
}

func TestVK_Account_GetCounters_Success(t *testing.T) {
	values := make(url.Values, 4)
	var req Account_GetCounters_Request
	fillRandomly_Account_GetCounters_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Account_GetCounters_Response
	fillRandomly_Account_GetCounters_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "account.getCounters", values, expectedJSON), token)
	resp, apiErr, err := vk.Account_GetCounters(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Account_GetCounters_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "account.getCounters", expectedJSON), "")
	resp, apiErr, err := vk.Account_GetCounters(context.Background(), Account_GetCounters_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Account_GetCounters_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Account_GetCounters(context.Background(), Account_GetCounters_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Account_GetInfo_Fields(o *Account_GetInfo_Fields) {
	switch randIntn(6) {
	case 0:
		*o = "country"
	case 1:
		*o = "https_required"
	case 2:
		*o = "own_posts_default"
	case 3:
		*o = "no_wall_replies"
	case 4:
		*o = "intro"
	case 5:
		*o = "lang"
	}
}

func fillRandomly_Account_GetInfo_Request(r *Account_GetInfo_Request) {
	(*r).Fields = new([]Account_GetInfo_Fields)
	l0 := randIntn(maxArrayLength + 1)
	*(*r).Fields = make([]Account_GetInfo_Fields, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomly_Account_GetInfo_Fields(&(*(*r).Fields)[i0])
	}
}

func TestVK_Account_GetInfo_Success(t *testing.T) {
	values := make(url.Values, 3)
	var req Account_GetInfo_Request
	fillRandomly_Account_GetInfo_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Account_GetInfo_Response
	fillRandomly_Account_GetInfo_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "account.getInfo", values, expectedJSON), token)
	resp, apiErr, err := vk.Account_GetInfo(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Account_GetInfo_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "account.getInfo", expectedJSON), "")
	resp, apiErr, err := vk.Account_GetInfo(context.Background(), Account_GetInfo_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Account_GetInfo_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Account_GetInfo(context.Background(), Account_GetInfo_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func TestVK_Account_GetProfileInfo_Success(t *testing.T) {
	values := make(url.Values, 2)
	var expected Account_GetProfileInfo_Response
	fillRandomly_Account_GetProfileInfo_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "account.getProfileInfo", values, expectedJSON), token)
	resp, apiErr, err := vk.Account_GetProfileInfo(context.Background())
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Account_GetProfileInfo_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "account.getProfileInfo", expectedJSON), "")
	resp, apiErr, err := vk.Account_GetProfileInfo(context.Background())
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Account_GetProfileInfo_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Account_GetProfileInfo(context.Background())
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Account_GetPushSettings_Request(r *Account_GetPushSettings_Request) {
	(*r).DeviceId = new(string)
	*(*r).DeviceId = randString()
}

func TestVK_Account_GetPushSettings_Success(t *testing.T) {
	values := make(url.Values, 3)
	var req Account_GetPushSettings_Request
	fillRandomly_Account_GetPushSettings_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Account_GetPushSettings_Response
	fillRandomly_Account_GetPushSettings_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "account.getPushSettings", values, expectedJSON), token)
	resp, apiErr, err := vk.Account_GetPushSettings(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Account_GetPushSettings_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "account.getPushSettings", expectedJSON), "")
	resp, apiErr, err := vk.Account_GetPushSettings(context.Background(), Account_GetPushSettings_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Account_GetPushSettings_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Account_GetPushSettings(context.Background(), Account_GetPushSettings_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Account_RegisterDevice_Request(r *Account_RegisterDevice_Request) {
	(*r).Token = randString()
	(*r).DeviceModel = new(string)
	*(*r).DeviceModel = randString()
	(*r).DeviceYear = new(int)
	*(*r).DeviceYear = randInt()
	(*r).DeviceId = randString()
	(*r).SystemVersion = new(string)
	*(*r).SystemVersion = randString()
	(*r).Settings = new(string)
	*(*r).Settings = randString()
	(*r).Sandbox = new(bool)
	*(*r).Sandbox = randBool()
}

func TestVK_Account_RegisterDevice_Success(t *testing.T) {
	values := make(url.Values, 9)
	var req Account_RegisterDevice_Request
	fillRandomly_Account_RegisterDevice_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Base_Ok_Response
	fillRandomly_Base_Ok_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "account.registerDevice", values, expectedJSON), token)
	resp, apiErr, err := vk.Account_RegisterDevice(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Account_RegisterDevice_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "account.registerDevice", expectedJSON), "")
	resp, apiErr, err := vk.Account_RegisterDevice(context.Background(), Account_RegisterDevice_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Account_RegisterDevice_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Account_RegisterDevice(context.Background(), Account_RegisterDevice_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Account_SaveProfileInfo_Sex(o *Account_SaveProfileInfo_Sex) {
	switch randIntn(3) {
	case 0:
		*o = 0
	case 1:
		*o = 1
	case 2:
		*o = 2
	}
}

func fillRandomly_Account_SaveProfileInfo_Relation(o *Account_SaveProfileInfo_Relation) {
	switch randIntn(8) {
	case 0:
		*o = 1
	case 1:
		*o = 2
	case 2:
		*o = 3
	case 3:
		*o = 4
	case 4:
		*o = 5
	case 5:
		*o = 6
	case 6:
		*o = 7
	case 7:
		*o = 0
	}
}

func fillRandomly_Account_SaveProfileInfo_BdateVisibility(o *Account_SaveProfileInfo_BdateVisibility) {
	switch randIntn(3) {
	case 0:
		*o = 1
	case 1:
		*o = 2
	case 2:
		*o = 0
	}
}

func fillRandomly_Account_SaveProfileInfo_Request(r *Account_SaveProfileInfo_Request) {
	(*r).FirstName = new(string)
	*(*r).FirstName = randString()
	(*r).LastName = new(string)
	*(*r).LastName = randString()
	(*r).MaidenName = new(string)
	*(*r).MaidenName = randString()
	(*r).ScreenName = new(string)
	*(*r).ScreenName = randString()
	(*r).CancelRequestId = new(int)
	*(*r).CancelRequestId = randInt()
	(*r).Sex = new(Account_SaveProfileInfo_Sex)
	fillRandomly_Account_SaveProfileInfo_Sex((*r).Sex)
	(*r).Relation = new(Account_SaveProfileInfo_Relation)
	fillRandomly_Account_SaveProfileInfo_Relation((*r).Relation)
	(*r).RelationPartnerId = new(int)
	*(*r).RelationPartnerId = randInt()
	(*r).Bdate = new(string)
	*(*r).Bdate = randString()
	(*r).BdateVisibility = new(Account_SaveProfileInfo_BdateVisibility)
	fillRandomly_Account_SaveProfileInfo_BdateVisibility((*r).BdateVisibility)
	(*r).HomeTown = new(string)
	*(*r).HomeTown = randString()
	(*r).CountryId = new(int)
	*(*r).CountryId = randInt()
	(*r).CityId = new(int)
	*(*r).CityId = randInt()
	(*r).Status = new(string)
	*(*r).Status = randString()
}

func TestVK_Account_SaveProfileInfo_Success(t *testing.T) {
	values := make(url.Values, 16)
	var req Account_SaveProfileInfo_Request
	fillRandomly_Account_SaveProfileInfo_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Account_SaveProfileInfo_Response
	fillRandomly_Account_SaveProfileInfo_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "account.saveProfileInfo", values, expectedJSON), token)
	resp, apiErr, err := vk.Account_SaveProfileInfo(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Account_SaveProfileInfo_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "account.saveProfileInfo", expectedJSON), "")
	resp, apiErr, err := vk.Account_SaveProfileInfo(context.Background(), Account_SaveProfileInfo_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Account_SaveProfileInfo_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Account_SaveProfileInfo(context.Background(), Account_SaveProfileInfo_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Account_SetInfo_Name(o *Account_SetInfo_Name) {
	switch randIntn(3) {
	case 0:
		*o = "intro"
	case 1:
		*o = "no_wall_replies"
	case 2:
		*o = "own_posts_default"
	}
}

func fillRandomly_Account_SetInfo_Request(r *Account_SetInfo_Request) {
	(*r).Name = new(Account_SetInfo_Name)
	fillRandomly_Account_SetInfo_Name((*r).Name)
	(*r).Value = new(string)
	*(*r).Value = randString()
}

func TestVK_Account_SetInfo_Success(t *testing.T) {
	values := make(url.Values, 4)
	var req Account_SetInfo_Request
	fillRandomly_Account_SetInfo_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Base_Ok_Response
	fillRandomly_Base_Ok_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "account.setInfo", values, expectedJSON), token)
	resp, apiErr, err := vk.Account_SetInfo(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Account_SetInfo_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "account.setInfo", expectedJSON), "")
	resp, apiErr, err := vk.Account_SetInfo(context.Background(), Account_SetInfo_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Account_SetInfo_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Account_SetInfo(context.Background(), Account_SetInfo_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func TestVK_Account_SetOffline_Success(t *testing.T) {
	values := make(url.Values, 2)
	var expected Base_Ok_Response
	fillRandomly_Base_Ok_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "account.setOffline", values, expectedJSON), token)
	resp, apiErr, err := vk.Account_SetOffline(context.Background())
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Account_SetOffline_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "account.setOffline", expectedJSON), "")
	resp, apiErr, err := vk.Account_SetOffline(context.Background())
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Account_SetOffline_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Account_SetOffline(context.Background())
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Account_SetOnline_Request(r *Account_SetOnline_Request) {
	(*r).Voip = new(bool)
	*(*r).Voip = randBool()
}

func TestVK_Account_SetOnline_Success(t *testing.T) {
	values := make(url.Values, 3)
	var req Account_SetOnline_Request
	fillRandomly_Account_SetOnline_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Base_Ok_Response
	fillRandomly_Base_Ok_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "account.setOnline", values, expectedJSON), token)
	resp, apiErr, err := vk.Account_SetOnline(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Account_SetOnline_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "account.setOnline", expectedJSON), "")
	resp, apiErr, err := vk.Account_SetOnline(context.Background(), Account_SetOnline_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Account_SetOnline_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Account_SetOnline(context.Background(), Account_SetOnline_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Account_SetPushSettings_Request(r *Account_SetPushSettings_Request) {
	(*r).DeviceId = randString()
	(*r).Settings = new(string)
	*(*r).Settings = randString()
	(*r).Key = new(string)
	*(*r).Key = randString()
	(*r).Value = new([]string)
	l0 := randIntn(maxArrayLength + 1)
	*(*r).Value = make([]string, l0)
	for i0 := 0; i0 < l0; i0++ {
		(*(*r).Value)[i0] = randString()
	}
}

func TestVK_Account_SetPushSettings_Success(t *testing.T) {
	values := make(url.Values, 6)
	var req Account_SetPushSettings_Request
	fillRandomly_Account_SetPushSettings_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Base_Ok_Response
	fillRandomly_Base_Ok_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "account.setPushSettings", values, expectedJSON), token)
	resp, apiErr, err := vk.Account_SetPushSettings(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Account_SetPushSettings_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "account.setPushSettings", expectedJSON), "")
	resp, apiErr, err := vk.Account_SetPushSettings(context.Background(), Account_SetPushSettings_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Account_SetPushSettings_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Account_SetPushSettings(context.Background(), Account_SetPushSettings_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Account_SetSilenceMode_Request(r *Account_SetSilenceMode_Request) {
	(*r).DeviceId = new(string)
	*(*r).DeviceId = randString()
	(*r).Time = new(int)
	*(*r).Time = randInt()
	(*r).PeerId = new(int)
	*(*r).PeerId = randInt()
	(*r).Sound = new(int)
	*(*r).Sound = randInt()
}

func TestVK_Account_SetSilenceMode_Success(t *testing.T) {
	values := make(url.Values, 6)
	var req Account_SetSilenceMode_Request
	fillRandomly_Account_SetSilenceMode_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Base_Ok_Response
	fillRandomly_Base_Ok_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "account.setSilenceMode", values, expectedJSON), token)
	resp, apiErr, err := vk.Account_SetSilenceMode(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Account_SetSilenceMode_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "account.setSilenceMode", expectedJSON), "")
	resp, apiErr, err := vk.Account_SetSilenceMode(context.Background(), Account_SetSilenceMode_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Account_SetSilenceMode_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Account_SetSilenceMode(context.Background(), Account_SetSilenceMode_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Account_Unban_Request(r *Account_Unban_Request) {
	(*r).OwnerId = new(int)
	*(*r).OwnerId = randInt()
}

func TestVK_Account_Unban_Success(t *testing.T) {
	values := make(url.Values, 3)
	var req Account_Unban_Request
	fillRandomly_Account_Unban_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Base_Ok_Response
	fillRandomly_Base_Ok_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "account.unban", values, expectedJSON), token)
	resp, apiErr, err := vk.Account_Unban(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Account_Unban_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "account.unban", expectedJSON), "")
	resp, apiErr, err := vk.Account_Unban(context.Background(), Account_Unban_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Account_Unban_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Account_Unban(context.Background(), Account_Unban_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Account_UnregisterDevice_Request(r *Account_UnregisterDevice_Request) {
	(*r).DeviceId = new(string)
	*(*r).DeviceId = randString()
	(*r).Sandbox = new(bool)
	*(*r).Sandbox = randBool()
}

func TestVK_Account_UnregisterDevice_Success(t *testing.T) {
	values := make(url.Values, 4)
	var req Account_UnregisterDevice_Request
	fillRandomly_Account_UnregisterDevice_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Base_Ok_Response
	fillRandomly_Base_Ok_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "account.unregisterDevice", values, expectedJSON), token)
	resp, apiErr, err := vk.Account_UnregisterDevice(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Account_UnregisterDevice_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "account.unregisterDevice", expectedJSON), "")
	resp, apiErr, err := vk.Account_UnregisterDevice(context.Background(), Account_UnregisterDevice_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Account_UnregisterDevice_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Account_UnregisterDevice(context.Background(), Account_UnregisterDevice_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Ads_AddOfficeUsers_Request(r *Ads_AddOfficeUsers_Request) {
	(*r).AccountId = randInt()
	(*r).Data = new([]Ads_UserSpecificationCutted)
	l0 := randIntn(maxArrayLength + 1)
	*(*r).Data = make([]Ads_UserSpecificationCutted, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomly_Ads_UserSpecificationCutted(&(*(*r).Data)[i0])
	}
}

func TestVK_Ads_AddOfficeUsers_Success(t *testing.T) {
	values := make(url.Values, 4)
	var req Ads_AddOfficeUsers_Request
	fillRandomly_Ads_AddOfficeUsers_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Ads_AddOfficeUsers_Response
	fillRandomly_Ads_AddOfficeUsers_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "ads.addOfficeUsers", values, expectedJSON), token)
	resp, apiErr, err := vk.Ads_AddOfficeUsers(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Ads_AddOfficeUsers_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "ads.addOfficeUsers", expectedJSON), "")
	resp, apiErr, err := vk.Ads_AddOfficeUsers(context.Background(), Ads_AddOfficeUsers_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Ads_AddOfficeUsers_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Ads_AddOfficeUsers(context.Background(), Ads_AddOfficeUsers_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Ads_CheckLink_LinkType(o *Ads_CheckLink_LinkType) {
	switch randIntn(5) {
	case 0:
		*o = "community"
	case 1:
		*o = "post"
	case 2:
		*o = "application"
	case 3:
		*o = "video"
	case 4:
		*o = "site"
	}
}

func fillRandomly_Ads_CheckLink_Request(r *Ads_CheckLink_Request) {
	(*r).AccountId = randInt()
	fillRandomly_Ads_CheckLink_LinkType(&(*r).LinkType)
	(*r).LinkUrl = randString()
	(*r).CampaignId = new(int)
	*(*r).CampaignId = randInt()
}

func TestVK_Ads_CheckLink_Success(t *testing.T) {
	values := make(url.Values, 6)
	var req Ads_CheckLink_Request
	fillRandomly_Ads_CheckLink_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Ads_CheckLink_Response
	fillRandomly_Ads_CheckLink_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "ads.checkLink", values, expectedJSON), token)
	resp, apiErr, err := vk.Ads_CheckLink(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Ads_CheckLink_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "ads.checkLink", expectedJSON), "")
	resp, apiErr, err := vk.Ads_CheckLink(context.Background(), Ads_CheckLink_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Ads_CheckLink_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Ads_CheckLink(context.Background(), Ads_CheckLink_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Ads_CreateAds_Request(r *Ads_CreateAds_Request) {
	(*r).AccountId = randInt()
	(*r).Data = randString()
}

func TestVK_Ads_CreateAds_Success(t *testing.T) {
	values := make(url.Values, 4)
	var req Ads_CreateAds_Request
	fillRandomly_Ads_CreateAds_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Ads_CreateAds_Response
	fillRandomly_Ads_CreateAds_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "ads.createAds", values, expectedJSON), token)
	resp, apiErr, err := vk.Ads_CreateAds(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Ads_CreateAds_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "ads.createAds", expectedJSON), "")
	resp, apiErr, err := vk.Ads_CreateAds(context.Background(), Ads_CreateAds_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Ads_CreateAds_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Ads_CreateAds(context.Background(), Ads_CreateAds_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Ads_CreateCampaigns_Request(r *Ads_CreateCampaigns_Request) {
	(*r).AccountId = randInt()
	(*r).Data = randString()
}

func TestVK_Ads_CreateCampaigns_Success(t *testing.T) {
	values := make(url.Values, 4)
	var req Ads_CreateCampaigns_Request
	fillRandomly_Ads_CreateCampaigns_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Ads_CreateCampaigns_Response
	fillRandomly_Ads_CreateCampaigns_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "ads.createCampaigns", values, expectedJSON), token)
	resp, apiErr, err := vk.Ads_CreateCampaigns(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Ads_CreateCampaigns_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "ads.createCampaigns", expectedJSON), "")
	resp, apiErr, err := vk.Ads_CreateCampaigns(context.Background(), Ads_CreateCampaigns_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Ads_CreateCampaigns_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Ads_CreateCampaigns(context.Background(), Ads_CreateCampaigns_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Ads_CreateClients_Request(r *Ads_CreateClients_Request) {
	(*r).AccountId = randInt()
	(*r).Data = randString()
}

func TestVK_Ads_CreateClients_Success(t *testing.T) {
	values := make(url.Values, 4)
	var req Ads_CreateClients_Request
	fillRandomly_Ads_CreateClients_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Ads_CreateClients_Response
	fillRandomly_Ads_CreateClients_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "ads.createClients", values, expectedJSON), token)
	resp, apiErr, err := vk.Ads_CreateClients(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Ads_CreateClients_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "ads.createClients", expectedJSON), "")
	resp, apiErr, err := vk.Ads_CreateClients(context.Background(), Ads_CreateClients_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Ads_CreateClients_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Ads_CreateClients(context.Background(), Ads_CreateClients_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Ads_CreateTargetGroup_Request(r *Ads_CreateTargetGroup_Request) {
	(*r).AccountId = randInt()
	(*r).ClientId = new(int)
	*(*r).ClientId = randInt()
	(*r).Name = randString()
	(*r).Lifetime = randInt()
	(*r).TargetPixelId = new(int)
	*(*r).TargetPixelId = randInt()
	(*r).TargetPixelRules = new(string)
	*(*r).TargetPixelRules = randString()
}

func TestVK_Ads_CreateTargetGroup_Success(t *testing.T) {
	values := make(url.Values, 8)
	var req Ads_CreateTargetGroup_Request
	fillRandomly_Ads_CreateTargetGroup_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Ads_CreateTargetGroup_Response
	fillRandomly_Ads_CreateTargetGroup_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "ads.createTargetGroup", values, expectedJSON), token)
	resp, apiErr, err := vk.Ads_CreateTargetGroup(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Ads_CreateTargetGroup_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "ads.createTargetGroup", expectedJSON), "")
	resp, apiErr, err := vk.Ads_CreateTargetGroup(context.Background(), Ads_CreateTargetGroup_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Ads_CreateTargetGroup_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Ads_CreateTargetGroup(context.Background(), Ads_CreateTargetGroup_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Ads_DeleteAds_Request(r *Ads_DeleteAds_Request) {
	(*r).AccountId = randInt()
	(*r).Ids = randString()
}

func TestVK_Ads_DeleteAds_Success(t *testing.T) {
	values := make(url.Values, 4)
	var req Ads_DeleteAds_Request
	fillRandomly_Ads_DeleteAds_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Ads_DeleteAds_Response
	fillRandomly_Ads_DeleteAds_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "ads.deleteAds", values, expectedJSON), token)
	resp, apiErr, err := vk.Ads_DeleteAds(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Ads_DeleteAds_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "ads.deleteAds", expectedJSON), "")
	resp, apiErr, err := vk.Ads_DeleteAds(context.Background(), Ads_DeleteAds_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Ads_DeleteAds_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Ads_DeleteAds(context.Background(), Ads_DeleteAds_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Ads_DeleteCampaigns_Request(r *Ads_DeleteCampaigns_Request) {
	(*r).AccountId = randInt()
	(*r).Ids = randString()
}

func TestVK_Ads_DeleteCampaigns_Success(t *testing.T) {
	values := make(url.Values, 4)
	var req Ads_DeleteCampaigns_Request
	fillRandomly_Ads_DeleteCampaigns_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Ads_DeleteCampaigns_Response
	fillRandomly_Ads_DeleteCampaigns_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "ads.deleteCampaigns", values, expectedJSON), token)
	resp, apiErr, err := vk.Ads_DeleteCampaigns(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Ads_DeleteCampaigns_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "ads.deleteCampaigns", expectedJSON), "")
	resp, apiErr, err := vk.Ads_DeleteCampaigns(context.Background(), Ads_DeleteCampaigns_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Ads_DeleteCampaigns_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Ads_DeleteCampaigns(context.Background(), Ads_DeleteCampaigns_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Ads_DeleteClients_Request(r *Ads_DeleteClients_Request) {
	(*r).AccountId = randInt()
	(*r).Ids = randString()
}

func TestVK_Ads_DeleteClients_Success(t *testing.T) {
	values := make(url.Values, 4)
	var req Ads_DeleteClients_Request
	fillRandomly_Ads_DeleteClients_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Ads_DeleteClients_Response
	fillRandomly_Ads_DeleteClients_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "ads.deleteClients", values, expectedJSON), token)
	resp, apiErr, err := vk.Ads_DeleteClients(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Ads_DeleteClients_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "ads.deleteClients", expectedJSON), "")
	resp, apiErr, err := vk.Ads_DeleteClients(context.Background(), Ads_DeleteClients_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Ads_DeleteClients_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Ads_DeleteClients(context.Background(), Ads_DeleteClients_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Ads_DeleteTargetGroup_Request(r *Ads_DeleteTargetGroup_Request) {
	(*r).AccountId = randInt()
	(*r).ClientId = new(int)
	*(*r).ClientId = randInt()
	(*r).TargetGroupId = randInt()
}

func TestVK_Ads_DeleteTargetGroup_Success(t *testing.T) {
	values := make(url.Values, 5)
	var req Ads_DeleteTargetGroup_Request
	fillRandomly_Ads_DeleteTargetGroup_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Base_Ok_Response
	fillRandomly_Base_Ok_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "ads.deleteTargetGroup", values, expectedJSON), token)
	resp, apiErr, err := vk.Ads_DeleteTargetGroup(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Ads_DeleteTargetGroup_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "ads.deleteTargetGroup", expectedJSON), "")
	resp, apiErr, err := vk.Ads_DeleteTargetGroup(context.Background(), Ads_DeleteTargetGroup_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Ads_DeleteTargetGroup_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Ads_DeleteTargetGroup(context.Background(), Ads_DeleteTargetGroup_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func TestVK_Ads_GetAccounts_Success(t *testing.T) {
	values := make(url.Values, 2)
	var expected Ads_GetAccounts_Response
	fillRandomly_Ads_GetAccounts_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "ads.getAccounts", values, expectedJSON), token)
	resp, apiErr, err := vk.Ads_GetAccounts(context.Background())
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Ads_GetAccounts_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "ads.getAccounts", expectedJSON), "")
	resp, apiErr, err := vk.Ads_GetAccounts(context.Background())
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Ads_GetAccounts_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Ads_GetAccounts(context.Background())
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Ads_GetAds_Request(r *Ads_GetAds_Request) {
	(*r).AccountId = randInt()
	(*r).AdIds = new(string)
	*(*r).AdIds = randString()
	(*r).CampaignIds = new(string)
	*(*r).CampaignIds = randString()
	(*r).ClientId = new(int)
	*(*r).ClientId = randInt()
	(*r).IncludeDeleted = new(bool)
	*(*r).IncludeDeleted = randBool()
	(*r).OnlyDeleted = new(bool)
	*(*r).OnlyDeleted = randBool()
	(*r).Limit = new(int)
	*(*r).Limit = randInt()
	(*r).Offset = new(int)
	*(*r).Offset = randInt()
}

func TestVK_Ads_GetAds_Success(t *testing.T) {
	values := make(url.Values, 10)
	var req Ads_GetAds_Request
	fillRandomly_Ads_GetAds_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Ads_GetAds_Response
	fillRandomly_Ads_GetAds_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "ads.getAds", values, expectedJSON), token)
	resp, apiErr, err := vk.Ads_GetAds(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Ads_GetAds_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "ads.getAds", expectedJSON), "")
	resp, apiErr, err := vk.Ads_GetAds(context.Background(), Ads_GetAds_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Ads_GetAds_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Ads_GetAds(context.Background(), Ads_GetAds_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Ads_GetAdsLayout_Request(r *Ads_GetAdsLayout_Request) {
	(*r).AccountId = randInt()
	(*r).ClientId = new(int)
	*(*r).ClientId = randInt()
	(*r).IncludeDeleted = new(bool)
	*(*r).IncludeDeleted = randBool()
	(*r).OnlyDeleted = new(bool)
	*(*r).OnlyDeleted = randBool()
	(*r).CampaignIds = new(string)
	*(*r).CampaignIds = randString()
	(*r).AdIds = new(string)
	*(*r).AdIds = randString()
	(*r).Limit = new(int)
	*(*r).Limit = randInt()
	(*r).Offset = new(int)
	*(*r).Offset = randInt()
}

func TestVK_Ads_GetAdsLayout_Success(t *testing.T) {
	values := make(url.Values, 10)
	var req Ads_GetAdsLayout_Request
	fillRandomly_Ads_GetAdsLayout_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Ads_GetAdsLayout_Response
	fillRandomly_Ads_GetAdsLayout_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "ads.getAdsLayout", values, expectedJSON), token)
	resp, apiErr, err := vk.Ads_GetAdsLayout(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Ads_GetAdsLayout_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "ads.getAdsLayout", expectedJSON), "")
	resp, apiErr, err := vk.Ads_GetAdsLayout(context.Background(), Ads_GetAdsLayout_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Ads_GetAdsLayout_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Ads_GetAdsLayout(context.Background(), Ads_GetAdsLayout_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Ads_GetAdsTargeting_Request(r *Ads_GetAdsTargeting_Request) {
	(*r).AccountId = randInt()
	(*r).AdIds = new(string)
	*(*r).AdIds = randString()
	(*r).CampaignIds = new(string)
	*(*r).CampaignIds = randString()
	(*r).ClientId = new(int)
	*(*r).ClientId = randInt()
	(*r).IncludeDeleted = new(bool)
	*(*r).IncludeDeleted = randBool()
	(*r).Limit = new(int)
	*(*r).Limit = randInt()
	(*r).Offset = new(int)
	*(*r).Offset = randInt()
}

func TestVK_Ads_GetAdsTargeting_Success(t *testing.T) {
	values := make(url.Values, 9)
	var req Ads_GetAdsTargeting_Request
	fillRandomly_Ads_GetAdsTargeting_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Ads_GetAdsTargeting_Response
	fillRandomly_Ads_GetAdsTargeting_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "ads.getAdsTargeting", values, expectedJSON), token)
	resp, apiErr, err := vk.Ads_GetAdsTargeting(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Ads_GetAdsTargeting_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "ads.getAdsTargeting", expectedJSON), "")
	resp, apiErr, err := vk.Ads_GetAdsTargeting(context.Background(), Ads_GetAdsTargeting_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Ads_GetAdsTargeting_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Ads_GetAdsTargeting(context.Background(), Ads_GetAdsTargeting_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Ads_GetBudget_Request(r *Ads_GetBudget_Request) {
	(*r).AccountId = randInt()
}

func TestVK_Ads_GetBudget_Success(t *testing.T) {
	values := make(url.Values, 3)
	var req Ads_GetBudget_Request
	fillRandomly_Ads_GetBudget_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Ads_GetBudget_Response
	fillRandomly_Ads_GetBudget_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "ads.getBudget", values, expectedJSON), token)
	resp, apiErr, err := vk.Ads_GetBudget(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Ads_GetBudget_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "ads.getBudget", expectedJSON), "")
	resp, apiErr, err := vk.Ads_GetBudget(context.Background(), Ads_GetBudget_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Ads_GetBudget_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Ads_GetBudget(context.Background(), Ads_GetBudget_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Ads_GetCampaigns_Fields(o *Ads_GetCampaigns_Fields) {
	switch randIntn(1) {
	case 0:
		*o = "ads_count"
	}
}

func fillRandomly_Ads_GetCampaigns_Request(r *Ads_GetCampaigns_Request) {
	(*r).AccountId = randInt()
	(*r).ClientId = new(int)
	*(*r).ClientId = randInt()
	(*r).IncludeDeleted = new(bool)
	*(*r).IncludeDeleted = randBool()
	(*r).CampaignIds = new(string)
	*(*r).CampaignIds = randString()
	(*r).Fields = new([]Ads_GetCampaigns_Fields)
	l0 := randIntn(maxArrayLength + 1)
	*(*r).Fields = make([]Ads_GetCampaigns_Fields, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomly_Ads_GetCampaigns_Fields(&(*(*r).Fields)[i0])
	}
}

func TestVK_Ads_GetCampaigns_Success(t *testing.T) {
	values := make(url.Values, 7)
	var req Ads_GetCampaigns_Request
	fillRandomly_Ads_GetCampaigns_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Ads_GetCampaigns_Response
	fillRandomly_Ads_GetCampaigns_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "ads.getCampaigns", values, expectedJSON), token)
	resp, apiErr, err := vk.Ads_GetCampaigns(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Ads_GetCampaigns_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "ads.getCampaigns", expectedJSON), "")
	resp, apiErr, err := vk.Ads_GetCampaigns(context.Background(), Ads_GetCampaigns_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Ads_GetCampaigns_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Ads_GetCampaigns(context.Background(), Ads_GetCampaigns_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Ads_GetCategories_Request(r *Ads_GetCategories_Request) {
	(*r).Lang = new(string)
	*(*r).Lang = randString()
}

func TestVK_Ads_GetCategories_Success(t *testing.T) {
	values := make(url.Values, 3)
	var req Ads_GetCategories_Request
	fillRandomly_Ads_GetCategories_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Ads_GetCategories_Response
	fillRandomly_Ads_GetCategories_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "ads.getCategories", values, expectedJSON), token)
	resp, apiErr, err := vk.Ads_GetCategories(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Ads_GetCategories_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "ads.getCategories", expectedJSON), "")
	resp, apiErr, err := vk.Ads_GetCategories(context.Background(), Ads_GetCategories_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Ads_GetCategories_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Ads_GetCategories(context.Background(), Ads_GetCategories_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Ads_GetClients_Request(r *Ads_GetClients_Request) {
	(*r).AccountId = randInt()
}

func TestVK_Ads_GetClients_Success(t *testing.T) {
	values := make(url.Values, 3)
	var req Ads_GetClients_Request
	fillRandomly_Ads_GetClients_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Ads_GetClients_Response
	fillRandomly_Ads_GetClients_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "ads.getClients", values, expectedJSON), token)
	resp, apiErr, err := vk.Ads_GetClients(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Ads_GetClients_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "ads.getClients", expectedJSON), "")
	resp, apiErr, err := vk.Ads_GetClients(context.Background(), Ads_GetClients_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Ads_GetClients_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Ads_GetClients(context.Background(), Ads_GetClients_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Ads_GetDemographics_IdsType(o *Ads_GetDemographics_IdsType) {
	switch randIntn(2) {
	case 0:
		*o = "ad"
	case 1:
		*o = "campaign"
	}
}

func fillRandomly_Ads_GetDemographics_Period(o *Ads_GetDemographics_Period) {
	switch randIntn(3) {
	case 0:
		*o = "day"
	case 1:
		*o = "month"
	case 2:
		*o = "overall"
	}
}

func fillRandomly_Ads_GetDemographics_Request(r *Ads_GetDemographics_Request) {
	(*r).AccountId = randInt()
	fillRandomly_Ads_GetDemographics_IdsType(&(*r).IdsType)
	(*r).Ids = randString()
	fillRandomly_Ads_GetDemographics_Period(&(*r).Period)
	(*r).DateFrom = randString()
	(*r).DateTo = randString()
}

func TestVK_Ads_GetDemographics_Success(t *testing.T) {
	values := make(url.Values, 8)
	var req Ads_GetDemographics_Request
	fillRandomly_Ads_GetDemographics_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Ads_GetDemographics_Response
	fillRandomly_Ads_GetDemographics_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "ads.getDemographics", values, expectedJSON), token)
	resp, apiErr, err := vk.Ads_GetDemographics(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Ads_GetDemographics_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "ads.getDemographics", expectedJSON), "")
	resp, apiErr, err := vk.Ads_GetDemographics(context.Background(), Ads_GetDemographics_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Ads_GetDemographics_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Ads_GetDemographics(context.Background(), Ads_GetDemographics_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Ads_GetFloodStats_Request(r *Ads_GetFloodStats_Request) {
	(*r).AccountId = randInt()
}

func TestVK_Ads_GetFloodStats_Success(t *testing.T) {
	values := make(url.Values, 3)
	var req Ads_GetFloodStats_Request
	fillRandomly_Ads_GetFloodStats_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Ads_GetFloodStats_Response
	fillRandomly_Ads_GetFloodStats_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "ads.getFloodStats", values, expectedJSON), token)
	resp, apiErr, err := vk.Ads_GetFloodStats(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Ads_GetFloodStats_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "ads.getFloodStats", expectedJSON), "")
	resp, apiErr, err := vk.Ads_GetFloodStats(context.Background(), Ads_GetFloodStats_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Ads_GetFloodStats_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Ads_GetFloodStats(context.Background(), Ads_GetFloodStats_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Ads_GetLookalikeRequests_Request(r *Ads_GetLookalikeRequests_Request) {
	(*r).AccountId = randInt()
	(*r).ClientId = new(int)
	*(*r).ClientId = randInt()
	(*r).RequestsIds = new(string)
	*(*r).RequestsIds = randString()
	(*r).Offset = new(int)
	*(*r).Offset = randInt()
	(*r).Limit = new(int)
	*(*r).Limit = randInt()
	(*r).SortBy = new(string)
	*(*r).SortBy = randString()
}

func TestVK_Ads_GetLookalikeRequests_Success(t *testing.T) {
	values := make(url.Values, 8)
	var req Ads_GetLookalikeRequests_Request
	fillRandomly_Ads_GetLookalikeRequests_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Ads_GetLookalikeRequests_Response
	fillRandomly_Ads_GetLookalikeRequests_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "ads.getLookalikeRequests", values, expectedJSON), token)
	resp, apiErr, err := vk.Ads_GetLookalikeRequests(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Ads_GetLookalikeRequests_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "ads.getLookalikeRequests", expectedJSON), "")
	resp, apiErr, err := vk.Ads_GetLookalikeRequests(context.Background(), Ads_GetLookalikeRequests_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Ads_GetLookalikeRequests_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Ads_GetLookalikeRequests(context.Background(), Ads_GetLookalikeRequests_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Ads_GetMusicians_Request(r *Ads_GetMusicians_Request) {
	(*r).ArtistName = randString()
}

func TestVK_Ads_GetMusicians_Success(t *testing.T) {
	values := make(url.Values, 3)
	var req Ads_GetMusicians_Request
	fillRandomly_Ads_GetMusicians_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Ads_GetMusicians_Response
	fillRandomly_Ads_GetMusicians_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "ads.getMusicians", values, expectedJSON), token)
	resp, apiErr, err := vk.Ads_GetMusicians(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Ads_GetMusicians_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "ads.getMusicians", expectedJSON), "")
	resp, apiErr, err := vk.Ads_GetMusicians(context.Background(), Ads_GetMusicians_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Ads_GetMusicians_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Ads_GetMusicians(context.Background(), Ads_GetMusicians_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Ads_GetMusiciansByIds_Request(r *Ads_GetMusiciansByIds_Request) {
	(*r).Ids = new([]int)
	l0 := randIntn(maxArrayLength + 1)
	*(*r).Ids = make([]int, l0)
	for i0 := 0; i0 < l0; i0++ {
		(*(*r).Ids)[i0] = randInt()
	}
}

func TestVK_Ads_GetMusiciansByIds_Success(t *testing.T) {
	values := make(url.Values, 3)
	var req Ads_GetMusiciansByIds_Request
	fillRandomly_Ads_GetMusiciansByIds_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Ads_GetMusicians_Response
	fillRandomly_Ads_GetMusicians_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "ads.getMusiciansByIds", values, expectedJSON), token)
	resp, apiErr, err := vk.Ads_GetMusiciansByIds(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Ads_GetMusiciansByIds_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "ads.getMusiciansByIds", expectedJSON), "")
	resp, apiErr, err := vk.Ads_GetMusiciansByIds(context.Background(), Ads_GetMusiciansByIds_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Ads_GetMusiciansByIds_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Ads_GetMusiciansByIds(context.Background(), Ads_GetMusiciansByIds_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Ads_GetOfficeUsers_Request(r *Ads_GetOfficeUsers_Request) {
	(*r).AccountId = randInt()
}

func TestVK_Ads_GetOfficeUsers_Success(t *testing.T) {
	values := make(url.Values, 3)
	var req Ads_GetOfficeUsers_Request
	fillRandomly_Ads_GetOfficeUsers_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Ads_GetOfficeUsers_Response
	fillRandomly_Ads_GetOfficeUsers_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "ads.getOfficeUsers", values, expectedJSON), token)
	resp, apiErr, err := vk.Ads_GetOfficeUsers(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Ads_GetOfficeUsers_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "ads.getOfficeUsers", expectedJSON), "")
	resp, apiErr, err := vk.Ads_GetOfficeUsers(context.Background(), Ads_GetOfficeUsers_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Ads_GetOfficeUsers_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Ads_GetOfficeUsers(context.Background(), Ads_GetOfficeUsers_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Ads_GetPostsReach_IdsType(o *Ads_GetPostsReach_IdsType) {
	switch randIntn(2) {
	case 0:
		*o = "ad"
	case 1:
		*o = "campaign"
	}
}

func fillRandomly_Ads_GetPostsReach_Request(r *Ads_GetPostsReach_Request) {
	(*r).AccountId = randInt()
	fillRandomly_Ads_GetPostsReach_IdsType(&(*r).IdsType)
	(*r).Ids = randString()
}

func TestVK_Ads_GetPostsReach_Success(t *testing.T) {
	values := make(url.Values, 5)
	var req Ads_GetPostsReach_Request
	fillRandomly_Ads_GetPostsReach_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Ads_GetPostsReach_Response
	fillRandomly_Ads_GetPostsReach_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "ads.getPostsReach", values, expectedJSON), token)
	resp, apiErr, err := vk.Ads_GetPostsReach(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Ads_GetPostsReach_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "ads.getPostsReach", expectedJSON), "")
	resp, apiErr, err := vk.Ads_GetPostsReach(context.Background(), Ads_GetPostsReach_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Ads_GetPostsReach_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Ads_GetPostsReach(context.Background(), Ads_GetPostsReach_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Ads_GetRejectionReason_Request(r *Ads_GetRejectionReason_Request) {
	(*r).AccountId = randInt()
	(*r).AdId = randInt()
}

func TestVK_Ads_GetRejectionReason_Success(t *testing.T) {
	values := make(url.Values, 4)
	var req Ads_GetRejectionReason_Request
	fillRandomly_Ads_GetRejectionReason_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Ads_GetRejectionReason_Response
	fillRandomly_Ads_GetRejectionReason_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "ads.getRejectionReason", values, expectedJSON), token)
	resp, apiErr, err := vk.Ads_GetRejectionReason(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Ads_GetRejectionReason_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "ads.getRejectionReason", expectedJSON), "")
	resp, apiErr, err := vk.Ads_GetRejectionReason(context.Background(), Ads_GetRejectionReason_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Ads_GetRejectionReason_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Ads_GetRejectionReason(context.Background(), Ads_GetRejectionReason_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Ads_GetStatistics_IdsType(o *Ads_GetStatistics_IdsType) {
	switch randIntn(4) {
	case 0:
		*o = "ad"
	case 1:
		*o = "campaign"
	case 2:
		*o = "client"
	case 3:
		*o = "office"
	}
}

func fillRandomly_Ads_GetStatistics_Period(o *Ads_GetStatistics_Period) {
	switch randIntn(3) {
	case 0:
		*o = "day"
	case 1:
		*o = "month"
	case 2:
		*o = "overall"
	}
}

func fillRandomly_Ads_GetStatistics_StatsFields(o *Ads_GetStatistics_StatsFields) {
	switch randIntn(1) {
	case 0:
		*o = "views_times"
	}
}

func fillRandomly_Ads_GetStatistics_Request(r *Ads_GetStatistics_Request) {
	(*r).AccountId = randInt()
	fillRandomly_Ads_GetStatistics_IdsType(&(*r).IdsType)
	(*r).Ids = randString()
	fillRandomly_Ads_GetStatistics_Period(&(*r).Period)
	(*r).DateFrom = randString()
	(*r).DateTo = randString()
	(*r).StatsFields = new([]Ads_GetStatistics_StatsFields)
	l0 := randIntn(maxArrayLength + 1)
	*(*r).StatsFields = make([]Ads_GetStatistics_StatsFields, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomly_Ads_GetStatistics_StatsFields(&(*(*r).StatsFields)[i0])
	}
}

func TestVK_Ads_GetStatistics_Success(t *testing.T) {
	values := make(url.Values, 9)
	var req Ads_GetStatistics_Request
	fillRandomly_Ads_GetStatistics_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Ads_GetStatistics_Response
	fillRandomly_Ads_GetStatistics_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "ads.getStatistics", values, expectedJSON), token)
	resp, apiErr, err := vk.Ads_GetStatistics(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Ads_GetStatistics_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "ads.getStatistics", expectedJSON), "")
	resp, apiErr, err := vk.Ads_GetStatistics(context.Background(), Ads_GetStatistics_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Ads_GetStatistics_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Ads_GetStatistics(context.Background(), Ads_GetStatistics_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Ads_GetSuggestions_Section(o *Ads_GetSuggestions_Section) {
	switch randIntn(12) {
	case 0:
		*o = "countries"
	case 1:
		*o = "regions"
	case 2:
		*o = "cities"
	case 3:
		*o = "districts"
	case 4:
		*o = "stations"
	case 5:
		*o = "streets"
	case 6:
		*o = "schools"
	case 7:
		*o = "interests"
	case 8:
		*o = "positions"
	case 9:
		*o = "group_types"
	case 10:
		*o = "religions"
	case 11:
		*o = "browsers"
	}
}

func fillRandomly_Ads_GetSuggestions_Lang(o *Ads_GetSuggestions_Lang) {
	switch randIntn(3) {
	case 0:
		*o = "ru"
	case 1:
		*o = "ua"
	case 2:
		*o = "en"
	}
}

func fillRandomly_Ads_GetSuggestions_Request(r *Ads_GetSuggestions_Request) {
	fillRandomly_Ads_GetSuggestions_Section(&(*r).Section)
	(*r).Ids = new(string)
	*(*r).Ids = randString()
	(*r).Q = new(string)
	*(*r).Q = randString()
	(*r).Country = new(int)
	*(*r).Country = randInt()
	(*r).Cities = new(string)
	*(*r).Cities = randString()
	(*r).Lang = new(Ads_GetSuggestions_Lang)
	fillRandomly_Ads_GetSuggestions_Lang((*r).Lang)
}

func TestVK_Ads_GetSuggestions_Success(t *testing.T) {
	values := make(url.Values, 8)
	var req Ads_GetSuggestions_Request
	fillRandomly_Ads_GetSuggestions_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Ads_GetSuggestions_Response
	fillRandomly_Ads_GetSuggestions_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "ads.getSuggestions", values, expectedJSON), token)
	resp, apiErr, err := vk.Ads_GetSuggestions(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Ads_GetSuggestions_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "ads.getSuggestions", expectedJSON), "")
	resp, apiErr, err := vk.Ads_GetSuggestions(context.Background(), Ads_GetSuggestions_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Ads_GetSuggestions_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Ads_GetSuggestions(context.Background(), Ads_GetSuggestions_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Ads_GetTargetGroups_Request(r *Ads_GetTargetGroups_Request) {
	(*r).AccountId = randInt()
	(*r).ClientId = new(int)
	*(*r).ClientId = randInt()
	(*r).Extended = new(bool)
	*(*r).Extended = randBool()
}

func TestVK_Ads_GetTargetGroups_Success(t *testing.T) {
	values := make(url.Values, 5)
	var req Ads_GetTargetGroups_Request
	fillRandomly_Ads_GetTargetGroups_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Ads_GetTargetGroups_Response
	fillRandomly_Ads_GetTargetGroups_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "ads.getTargetGroups", values, expectedJSON), token)
	resp, apiErr, err := vk.Ads_GetTargetGroups(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Ads_GetTargetGroups_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "ads.getTargetGroups", expectedJSON), "")
	resp, apiErr, err := vk.Ads_GetTargetGroups(context.Background(), Ads_GetTargetGroups_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Ads_GetTargetGroups_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Ads_GetTargetGroups(context.Background(), Ads_GetTargetGroups_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Ads_GetTargetingStats_AdFormat(o *Ads_GetTargetingStats_AdFormat) {
	switch randIntn(8) {
	case 0:
		*o = 1
	case 1:
		*o = 2
	case 2:
		*o = 3
	case 3:
		*o = 4
	case 4:
		*o = 7
	case 5:
		*o = 8
	case 6:
		*o = 9
	case 7:
		*o = 10
	}
}

func fillRandomly_Ads_GetTargetingStats_Request(r *Ads_GetTargetingStats_Request) {
	(*r).AccountId = randInt()
	(*r).ClientId = new(int)
	*(*r).ClientId = randInt()
	(*r).Criteria = new(string)
	*(*r).Criteria = randString()
	(*r).AdId = new(int)
	*(*r).AdId = randInt()
	(*r).AdFormat = new(Ads_GetTargetingStats_AdFormat)
	fillRandomly_Ads_GetTargetingStats_AdFormat((*r).AdFormat)
	(*r).AdPlatform = new(string)
	*(*r).AdPlatform = randString()
	(*r).AdPlatformNoWall = new(string)
	*(*r).AdPlatformNoWall = randString()
	(*r).AdPlatformNoAdNetwork = new(string)
	*(*r).AdPlatformNoAdNetwork = randString()
	(*r).PublisherPlatforms = new(string)
	*(*r).PublisherPlatforms = randString()
	(*r).LinkUrl = randString()
	(*r).LinkDomain = new(string)
	*(*r).LinkDomain = randString()
	(*r).NeedPrecise = new(bool)
	*(*r).NeedPrecise = randBool()
	(*r).ImpressionsLimitPeriod = new(int)
	*(*r).ImpressionsLimitPeriod = randInt()
}

func TestVK_Ads_GetTargetingStats_Success(t *testing.T) {
	values := make(url.Values, 15)
	var req Ads_GetTargetingStats_Request
	fillRandomly_Ads_GetTargetingStats_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Ads_GetTargetingStats_Response
	fillRandomly_Ads_GetTargetingStats_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "ads.getTargetingStats", values, expectedJSON), token)
	resp, apiErr, err := vk.Ads_GetTargetingStats(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Ads_GetTargetingStats_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "ads.getTargetingStats", expectedJSON), "")
	resp, apiErr, err := vk.Ads_GetTargetingStats(context.Background(), Ads_GetTargetingStats_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Ads_GetTargetingStats_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Ads_GetTargetingStats(context.Background(), Ads_GetTargetingStats_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Ads_GetUploadURL_AdFormat(o *Ads_GetUploadURL_AdFormat) {
	switch randIntn(5) {
	case 0:
		*o = 1
	case 1:
		*o = 2
	case 2:
		*o = 3
	case 3:
		*o = 4
	case 4:
		*o = 7
	}
}

func fillRandomly_Ads_GetUploadURL_Request(r *Ads_GetUploadURL_Request) {
	fillRandomly_Ads_GetUploadURL_AdFormat(&(*r).AdFormat)
	(*r).Icon = new(int)
	*(*r).Icon = randInt()
}

func TestVK_Ads_GetUploadURL_Success(t *testing.T) {
	values := make(url.Values, 4)
	var req Ads_GetUploadURL_Request
	fillRandomly_Ads_GetUploadURL_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Ads_GetUploadURL_Response
	fillRandomly_Ads_GetUploadURL_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "ads.getUploadURL", values, expectedJSON), token)
	resp, apiErr, err := vk.Ads_GetUploadURL(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Ads_GetUploadURL_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "ads.getUploadURL", expectedJSON), "")
	resp, apiErr, err := vk.Ads_GetUploadURL(context.Background(), Ads_GetUploadURL_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Ads_GetUploadURL_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Ads_GetUploadURL(context.Background(), Ads_GetUploadURL_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func TestVK_Ads_GetVideoUploadURL_Success(t *testing.T) {
	values := make(url.Values, 2)
	var expected Ads_GetVideoUploadURL_Response
	fillRandomly_Ads_GetVideoUploadURL_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "ads.getVideoUploadURL", values, expectedJSON), token)
	resp, apiErr, err := vk.Ads_GetVideoUploadURL(context.Background())
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Ads_GetVideoUploadURL_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "ads.getVideoUploadURL", expectedJSON), "")
	resp, apiErr, err := vk.Ads_GetVideoUploadURL(context.Background())
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Ads_GetVideoUploadURL_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Ads_GetVideoUploadURL(context.Background())
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Ads_ImportTargetContacts_Request(r *Ads_ImportTargetContacts_Request) {
	(*r).AccountId = randInt()
	(*r).ClientId = new(int)
	*(*r).ClientId = randInt()
	(*r).TargetGroupId = randInt()
	(*r).Contacts = randString()
}

func TestVK_Ads_ImportTargetContacts_Success(t *testing.T) {
	values := make(url.Values, 6)
	var req Ads_ImportTargetContacts_Request
	fillRandomly_Ads_ImportTargetContacts_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Ads_ImportTargetContacts_Response
	fillRandomly_Ads_ImportTargetContacts_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "ads.importTargetContacts", values, expectedJSON), token)
	resp, apiErr, err := vk.Ads_ImportTargetContacts(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Ads_ImportTargetContacts_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "ads.importTargetContacts", expectedJSON), "")
	resp, apiErr, err := vk.Ads_ImportTargetContacts(context.Background(), Ads_ImportTargetContacts_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Ads_ImportTargetContacts_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Ads_ImportTargetContacts(context.Background(), Ads_ImportTargetContacts_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Ads_RemoveOfficeUsers_Request(r *Ads_RemoveOfficeUsers_Request) {
	(*r).AccountId = randInt()
	(*r).Ids = randString()
}

func TestVK_Ads_RemoveOfficeUsers_Success(t *testing.T) {
	values := make(url.Values, 4)
	var req Ads_RemoveOfficeUsers_Request
	fillRandomly_Ads_RemoveOfficeUsers_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Ads_RemoveOfficeUsers_Response
	fillRandomly_Ads_RemoveOfficeUsers_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "ads.removeOfficeUsers", values, expectedJSON), token)
	resp, apiErr, err := vk.Ads_RemoveOfficeUsers(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Ads_RemoveOfficeUsers_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "ads.removeOfficeUsers", expectedJSON), "")
	resp, apiErr, err := vk.Ads_RemoveOfficeUsers(context.Background(), Ads_RemoveOfficeUsers_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Ads_RemoveOfficeUsers_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Ads_RemoveOfficeUsers(context.Background(), Ads_RemoveOfficeUsers_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Ads_UpdateAds_Request(r *Ads_UpdateAds_Request) {
	(*r).AccountId = randInt()
	(*r).Data = randString()
}

func TestVK_Ads_UpdateAds_Success(t *testing.T) {
	values := make(url.Values, 4)
	var req Ads_UpdateAds_Request
	fillRandomly_Ads_UpdateAds_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Ads_UpdateAds_Response
	fillRandomly_Ads_UpdateAds_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "ads.updateAds", values, expectedJSON), token)
	resp, apiErr, err := vk.Ads_UpdateAds(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Ads_UpdateAds_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "ads.updateAds", expectedJSON), "")
	resp, apiErr, err := vk.Ads_UpdateAds(context.Background(), Ads_UpdateAds_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Ads_UpdateAds_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Ads_UpdateAds(context.Background(), Ads_UpdateAds_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Ads_UpdateCampaigns_Request(r *Ads_UpdateCampaigns_Request) {
	(*r).AccountId = randInt()
	(*r).Data = randString()
}

func TestVK_Ads_UpdateCampaigns_Success(t *testing.T) {
	values := make(url.Values, 4)
	var req Ads_UpdateCampaigns_Request
	fillRandomly_Ads_UpdateCampaigns_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Ads_UpdateCampaigns_Response
	fillRandomly_Ads_UpdateCampaigns_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "ads.updateCampaigns", values, expectedJSON), token)
	resp, apiErr, err := vk.Ads_UpdateCampaigns(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Ads_UpdateCampaigns_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "ads.updateCampaigns", expectedJSON), "")
	resp, apiErr, err := vk.Ads_UpdateCampaigns(context.Background(), Ads_UpdateCampaigns_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Ads_UpdateCampaigns_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Ads_UpdateCampaigns(context.Background(), Ads_UpdateCampaigns_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Ads_UpdateClients_Request(r *Ads_UpdateClients_Request) {
	(*r).AccountId = randInt()
	(*r).Data = randString()
}

func TestVK_Ads_UpdateClients_Success(t *testing.T) {
	values := make(url.Values, 4)
	var req Ads_UpdateClients_Request
	fillRandomly_Ads_UpdateClients_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Ads_UpdateClients_Response
	fillRandomly_Ads_UpdateClients_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "ads.updateClients", values, expectedJSON), token)
	resp, apiErr, err := vk.Ads_UpdateClients(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Ads_UpdateClients_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "ads.updateClients", expectedJSON), "")
	resp, apiErr, err := vk.Ads_UpdateClients(context.Background(), Ads_UpdateClients_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Ads_UpdateClients_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Ads_UpdateClients(context.Background(), Ads_UpdateClients_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Ads_UpdateOfficeUsers_Request(r *Ads_UpdateOfficeUsers_Request) {
	(*r).AccountId = randInt()
	(*r).Data = new([]Ads_UserSpecification)
	l0 := randIntn(maxArrayLength + 1)
	*(*r).Data = make([]Ads_UserSpecification, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomly_Ads_UserSpecification(&(*(*r).Data)[i0])
	}
}

func TestVK_Ads_UpdateOfficeUsers_Success(t *testing.T) {
	values := make(url.Values, 4)
	var req Ads_UpdateOfficeUsers_Request
	fillRandomly_Ads_UpdateOfficeUsers_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Ads_UpdateOfficeUsers_Response
	fillRandomly_Ads_UpdateOfficeUsers_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "ads.updateOfficeUsers", values, expectedJSON), token)
	resp, apiErr, err := vk.Ads_UpdateOfficeUsers(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Ads_UpdateOfficeUsers_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "ads.updateOfficeUsers", expectedJSON), "")
	resp, apiErr, err := vk.Ads_UpdateOfficeUsers(context.Background(), Ads_UpdateOfficeUsers_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Ads_UpdateOfficeUsers_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Ads_UpdateOfficeUsers(context.Background(), Ads_UpdateOfficeUsers_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Ads_UpdateTargetGroup_Request(r *Ads_UpdateTargetGroup_Request) {
	(*r).AccountId = randInt()
	(*r).ClientId = new(int)
	*(*r).ClientId = randInt()
	(*r).TargetGroupId = randInt()
	(*r).Name = randString()
	(*r).Domain = new(string)
	*(*r).Domain = randString()
	(*r).Lifetime = randInt()
	(*r).TargetPixelId = new(int)
	*(*r).TargetPixelId = randInt()
	(*r).TargetPixelRules = new(string)
	*(*r).TargetPixelRules = randString()
}

func TestVK_Ads_UpdateTargetGroup_Success(t *testing.T) {
	values := make(url.Values, 10)
	var req Ads_UpdateTargetGroup_Request
	fillRandomly_Ads_UpdateTargetGroup_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Base_Ok_Response
	fillRandomly_Base_Ok_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "ads.updateTargetGroup", values, expectedJSON), token)
	resp, apiErr, err := vk.Ads_UpdateTargetGroup(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Ads_UpdateTargetGroup_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "ads.updateTargetGroup", expectedJSON), "")
	resp, apiErr, err := vk.Ads_UpdateTargetGroup(context.Background(), Ads_UpdateTargetGroup_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Ads_UpdateTargetGroup_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Ads_UpdateTargetGroup(context.Background(), Ads_UpdateTargetGroup_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Adsweb_GetAdCategories_Request(r *Adsweb_GetAdCategories_Request) {
	(*r).OfficeId = randInt()
}

func TestVK_Adsweb_GetAdCategories_Success(t *testing.T) {
	values := make(url.Values, 3)
	var req Adsweb_GetAdCategories_Request
	fillRandomly_Adsweb_GetAdCategories_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Adsweb_GetAdCategories_Response
	fillRandomly_Adsweb_GetAdCategories_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "adsweb.getAdCategories", values, expectedJSON), token)
	resp, apiErr, err := vk.Adsweb_GetAdCategories(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Adsweb_GetAdCategories_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "adsweb.getAdCategories", expectedJSON), "")
	resp, apiErr, err := vk.Adsweb_GetAdCategories(context.Background(), Adsweb_GetAdCategories_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Adsweb_GetAdCategories_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Adsweb_GetAdCategories(context.Background(), Adsweb_GetAdCategories_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func TestVK_Adsweb_GetAdUnitCode_Success(t *testing.T) {
	values := make(url.Values, 2)
	var expected Adsweb_GetAdUnitCode_Response
	fillRandomly_Adsweb_GetAdUnitCode_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "adsweb.getAdUnitCode", values, expectedJSON), token)
	resp, apiErr, err := vk.Adsweb_GetAdUnitCode(context.Background())
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Adsweb_GetAdUnitCode_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "adsweb.getAdUnitCode", expectedJSON), "")
	resp, apiErr, err := vk.Adsweb_GetAdUnitCode(context.Background())
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Adsweb_GetAdUnitCode_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Adsweb_GetAdUnitCode(context.Background())
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Adsweb_GetAdUnits_Request(r *Adsweb_GetAdUnits_Request) {
	(*r).OfficeId = randInt()
	(*r).SitesIds = new(string)
	*(*r).SitesIds = randString()
	(*r).AdUnitsIds = new(string)
	*(*r).AdUnitsIds = randString()
	(*r).Fields = new(string)
	*(*r).Fields = randString()
	(*r).Limit = new(int)
	*(*r).Limit = randInt()
	(*r).Offset = new(int)
	*(*r).Offset = randInt()
}

func TestVK_Adsweb_GetAdUnits_Success(t *testing.T) {
	values := make(url.Values, 8)
	var req Adsweb_GetAdUnits_Request
	fillRandomly_Adsweb_GetAdUnits_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Adsweb_GetAdUnits_Response
	fillRandomly_Adsweb_GetAdUnits_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "adsweb.getAdUnits", values, expectedJSON), token)
	resp, apiErr, err := vk.Adsweb_GetAdUnits(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Adsweb_GetAdUnits_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "adsweb.getAdUnits", expectedJSON), "")
	resp, apiErr, err := vk.Adsweb_GetAdUnits(context.Background(), Adsweb_GetAdUnits_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Adsweb_GetAdUnits_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Adsweb_GetAdUnits(context.Background(), Adsweb_GetAdUnits_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Adsweb_GetFraudHistory_Request(r *Adsweb_GetFraudHistory_Request) {
	(*r).OfficeId = randInt()
	(*r).SitesIds = new(string)
	*(*r).SitesIds = randString()
	(*r).Limit = new(int)
	*(*r).Limit = randInt()
	(*r).Offset = new(int)
	*(*r).Offset = randInt()
}

func TestVK_Adsweb_GetFraudHistory_Success(t *testing.T) {
	values := make(url.Values, 6)
	var req Adsweb_GetFraudHistory_Request
	fillRandomly_Adsweb_GetFraudHistory_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Adsweb_GetFraudHistory_Response
	fillRandomly_Adsweb_GetFraudHistory_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "adsweb.getFraudHistory", values, expectedJSON), token)
	resp, apiErr, err := vk.Adsweb_GetFraudHistory(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Adsweb_GetFraudHistory_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "adsweb.getFraudHistory", expectedJSON), "")
	resp, apiErr, err := vk.Adsweb_GetFraudHistory(context.Background(), Adsweb_GetFraudHistory_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Adsweb_GetFraudHistory_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Adsweb_GetFraudHistory(context.Background(), Adsweb_GetFraudHistory_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Adsweb_GetSites_Request(r *Adsweb_GetSites_Request) {
	(*r).OfficeId = randInt()
	(*r).SitesIds = new(string)
	*(*r).SitesIds = randString()
	(*r).Fields = new(string)
	*(*r).Fields = randString()
	(*r).Limit = new(int)
	*(*r).Limit = randInt()
	(*r).Offset = new(int)
	*(*r).Offset = randInt()
}

func TestVK_Adsweb_GetSites_Success(t *testing.T) {
	values := make(url.Values, 7)
	var req Adsweb_GetSites_Request
	fillRandomly_Adsweb_GetSites_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Adsweb_GetSites_Response
	fillRandomly_Adsweb_GetSites_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "adsweb.getSites", values, expectedJSON), token)
	resp, apiErr, err := vk.Adsweb_GetSites(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Adsweb_GetSites_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "adsweb.getSites", expectedJSON), "")
	resp, apiErr, err := vk.Adsweb_GetSites(context.Background(), Adsweb_GetSites_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Adsweb_GetSites_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Adsweb_GetSites(context.Background(), Adsweb_GetSites_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Adsweb_GetStatistics_Request(r *Adsweb_GetStatistics_Request) {
	(*r).OfficeId = randInt()
	(*r).IdsType = randString()
	(*r).Ids = randString()
	(*r).Period = randString()
	(*r).DateFrom = randString()
	(*r).DateTo = randString()
	(*r).Fields = new(string)
	*(*r).Fields = randString()
	(*r).Limit = new(int)
	*(*r).Limit = randInt()
	(*r).PageId = new(string)
	*(*r).PageId = randString()
}

func TestVK_Adsweb_GetStatistics_Success(t *testing.T) {
	values := make(url.Values, 11)
	var req Adsweb_GetStatistics_Request
	fillRandomly_Adsweb_GetStatistics_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Adsweb_GetStatistics_Response
	fillRandomly_Adsweb_GetStatistics_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "adsweb.getStatistics", values, expectedJSON), token)
	resp, apiErr, err := vk.Adsweb_GetStatistics(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Adsweb_GetStatistics_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "adsweb.getStatistics", expectedJSON), "")
	resp, apiErr, err := vk.Adsweb_GetStatistics(context.Background(), Adsweb_GetStatistics_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Adsweb_GetStatistics_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Adsweb_GetStatistics(context.Background(), Adsweb_GetStatistics_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_AppWidgets_GetAppImageUploadServer_ImageType(o *AppWidgets_GetAppImageUploadServer_ImageType) {
	switch randIntn(5) {
	case 0:
		*o = "160x160"
	case 1:
		*o = "160x240"
	case 2:
		*o = "24x24"
	case 3:
		*o = "50x50"
	case 4:
		*o = "510x128"
	}
}

func fillRandomly_AppWidgets_GetAppImageUploadServer_Request(r *AppWidgets_GetAppImageUploadServer_Request) {
	fillRandomly_AppWidgets_GetAppImageUploadServer_ImageType(&(*r).ImageType)
}

func TestVK_AppWidgets_GetAppImageUploadServer_Success(t *testing.T) {
	values := make(url.Values, 3)
	var req AppWidgets_GetAppImageUploadServer_Request
	fillRandomly_AppWidgets_GetAppImageUploadServer_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected AppWidgets_GetAppImageUploadServer_Response
	fillRandomly_AppWidgets_GetAppImageUploadServer_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "appWidgets.getAppImageUploadServer", values, expectedJSON), token)
	resp, apiErr, err := vk.AppWidgets_GetAppImageUploadServer(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_AppWidgets_GetAppImageUploadServer_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "appWidgets.getAppImageUploadServer", expectedJSON), "")
	resp, apiErr, err := vk.AppWidgets_GetAppImageUploadServer(context.Background(), AppWidgets_GetAppImageUploadServer_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_AppWidgets_GetAppImageUploadServer_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.AppWidgets_GetAppImageUploadServer(context.Background(), AppWidgets_GetAppImageUploadServer_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_AppWidgets_GetAppImages_ImageType(o *AppWidgets_GetAppImages_ImageType) {
	switch randIntn(5) {
	case 0:
		*o = "160x160"
	case 1:
		*o = "160x240"
	case 2:
		*o = "24x24"
	case 3:
		*o = "50x50"
	case 4:
		*o = "510x128"
	}
}

func fillRandomly_AppWidgets_GetAppImages_Request(r *AppWidgets_GetAppImages_Request) {
	(*r).Offset = new(int)
	*(*r).Offset = randInt()
	(*r).Count = new(int)
	*(*r).Count = randInt()
	(*r).ImageType = new(AppWidgets_GetAppImages_ImageType)
	fillRandomly_AppWidgets_GetAppImages_ImageType((*r).ImageType)
}

func TestVK_AppWidgets_GetAppImages_Success(t *testing.T) {
	values := make(url.Values, 5)
	var req AppWidgets_GetAppImages_Request
	fillRandomly_AppWidgets_GetAppImages_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected AppWidgets_GetAppImages_Response
	fillRandomly_AppWidgets_GetAppImages_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "appWidgets.getAppImages", values, expectedJSON), token)
	resp, apiErr, err := vk.AppWidgets_GetAppImages(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_AppWidgets_GetAppImages_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "appWidgets.getAppImages", expectedJSON), "")
	resp, apiErr, err := vk.AppWidgets_GetAppImages(context.Background(), AppWidgets_GetAppImages_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_AppWidgets_GetAppImages_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.AppWidgets_GetAppImages(context.Background(), AppWidgets_GetAppImages_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_AppWidgets_GetGroupImageUploadServer_ImageType(o *AppWidgets_GetGroupImageUploadServer_ImageType) {
	switch randIntn(5) {
	case 0:
		*o = "160x160"
	case 1:
		*o = "160x240"
	case 2:
		*o = "24x24"
	case 3:
		*o = "50x50"
	case 4:
		*o = "510x128"
	}
}

func fillRandomly_AppWidgets_GetGroupImageUploadServer_Request(r *AppWidgets_GetGroupImageUploadServer_Request) {
	fillRandomly_AppWidgets_GetGroupImageUploadServer_ImageType(&(*r).ImageType)
}

func TestVK_AppWidgets_GetGroupImageUploadServer_Success(t *testing.T) {
	values := make(url.Values, 3)
	var req AppWidgets_GetGroupImageUploadServer_Request
	fillRandomly_AppWidgets_GetGroupImageUploadServer_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected AppWidgets_GetGroupImageUploadServer_Response
	fillRandomly_AppWidgets_GetGroupImageUploadServer_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "appWidgets.getGroupImageUploadServer", values, expectedJSON), token)
	resp, apiErr, err := vk.AppWidgets_GetGroupImageUploadServer(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_AppWidgets_GetGroupImageUploadServer_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "appWidgets.getGroupImageUploadServer", expectedJSON), "")
	resp, apiErr, err := vk.AppWidgets_GetGroupImageUploadServer(context.Background(), AppWidgets_GetGroupImageUploadServer_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_AppWidgets_GetGroupImageUploadServer_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.AppWidgets_GetGroupImageUploadServer(context.Background(), AppWidgets_GetGroupImageUploadServer_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_AppWidgets_GetGroupImages_ImageType(o *AppWidgets_GetGroupImages_ImageType) {
	switch randIntn(5) {
	case 0:
		*o = "160x160"
	case 1:
		*o = "160x240"
	case 2:
		*o = "24x24"
	case 3:
		*o = "50x50"
	case 4:
		*o = "510x128"
	}
}

func fillRandomly_AppWidgets_GetGroupImages_Request(r *AppWidgets_GetGroupImages_Request) {
	(*r).Offset = new(int)
	*(*r).Offset = randInt()
	(*r).Count = new(int)
	*(*r).Count = randInt()
	(*r).ImageType = new(AppWidgets_GetGroupImages_ImageType)
	fillRandomly_AppWidgets_GetGroupImages_ImageType((*r).ImageType)
}

func TestVK_AppWidgets_GetGroupImages_Success(t *testing.T) {
	values := make(url.Values, 5)
	var req AppWidgets_GetGroupImages_Request
	fillRandomly_AppWidgets_GetGroupImages_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected AppWidgets_GetGroupImages_Response
	fillRandomly_AppWidgets_GetGroupImages_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "appWidgets.getGroupImages", values, expectedJSON), token)
	resp, apiErr, err := vk.AppWidgets_GetGroupImages(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_AppWidgets_GetGroupImages_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "appWidgets.getGroupImages", expectedJSON), "")
	resp, apiErr, err := vk.AppWidgets_GetGroupImages(context.Background(), AppWidgets_GetGroupImages_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_AppWidgets_GetGroupImages_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.AppWidgets_GetGroupImages(context.Background(), AppWidgets_GetGroupImages_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_AppWidgets_GetImagesById_Request(r *AppWidgets_GetImagesById_Request) {
	(*r).Images = new([]string)
	l0 := randIntn(maxArrayLength + 1)
	*(*r).Images = make([]string, l0)
	for i0 := 0; i0 < l0; i0++ {
		(*(*r).Images)[i0] = randString()
	}
}

func TestVK_AppWidgets_GetImagesById_Success(t *testing.T) {
	values := make(url.Values, 3)
	var req AppWidgets_GetImagesById_Request
	fillRandomly_AppWidgets_GetImagesById_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected AppWidgets_GetImagesById_Response
	fillRandomly_AppWidgets_GetImagesById_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "appWidgets.getImagesById", values, expectedJSON), token)
	resp, apiErr, err := vk.AppWidgets_GetImagesById(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_AppWidgets_GetImagesById_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "appWidgets.getImagesById", expectedJSON), "")
	resp, apiErr, err := vk.AppWidgets_GetImagesById(context.Background(), AppWidgets_GetImagesById_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_AppWidgets_GetImagesById_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.AppWidgets_GetImagesById(context.Background(), AppWidgets_GetImagesById_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_AppWidgets_SaveAppImage_Request(r *AppWidgets_SaveAppImage_Request) {
	(*r).Hash = randString()
	(*r).Image = randString()
}

func TestVK_AppWidgets_SaveAppImage_Success(t *testing.T) {
	values := make(url.Values, 4)
	var req AppWidgets_SaveAppImage_Request
	fillRandomly_AppWidgets_SaveAppImage_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected AppWidgets_SaveAppImage_Response
	fillRandomly_AppWidgets_SaveAppImage_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "appWidgets.saveAppImage", values, expectedJSON), token)
	resp, apiErr, err := vk.AppWidgets_SaveAppImage(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_AppWidgets_SaveAppImage_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "appWidgets.saveAppImage", expectedJSON), "")
	resp, apiErr, err := vk.AppWidgets_SaveAppImage(context.Background(), AppWidgets_SaveAppImage_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_AppWidgets_SaveAppImage_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.AppWidgets_SaveAppImage(context.Background(), AppWidgets_SaveAppImage_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_AppWidgets_SaveGroupImage_Request(r *AppWidgets_SaveGroupImage_Request) {
	(*r).Hash = randString()
	(*r).Image = randString()
}

func TestVK_AppWidgets_SaveGroupImage_Success(t *testing.T) {
	values := make(url.Values, 4)
	var req AppWidgets_SaveGroupImage_Request
	fillRandomly_AppWidgets_SaveGroupImage_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected AppWidgets_SaveGroupImage_Response
	fillRandomly_AppWidgets_SaveGroupImage_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "appWidgets.saveGroupImage", values, expectedJSON), token)
	resp, apiErr, err := vk.AppWidgets_SaveGroupImage(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_AppWidgets_SaveGroupImage_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "appWidgets.saveGroupImage", expectedJSON), "")
	resp, apiErr, err := vk.AppWidgets_SaveGroupImage(context.Background(), AppWidgets_SaveGroupImage_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_AppWidgets_SaveGroupImage_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.AppWidgets_SaveGroupImage(context.Background(), AppWidgets_SaveGroupImage_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_AppWidgets_Update_Type(o *AppWidgets_Update_Type) {
	switch randIntn(9) {
	case 0:
		*o = "compact_list"
	case 1:
		*o = "cover_list"
	case 2:
		*o = "donation"
	case 3:
		*o = "list"
	case 4:
		*o = "match"
	case 5:
		*o = "matches"
	case 6:
		*o = "table"
	case 7:
		*o = "text"
	case 8:
		*o = "tiles"
	}
}

func fillRandomly_AppWidgets_Update_Request(r *AppWidgets_Update_Request) {
	(*r).Code = randString()
	fillRandomly_AppWidgets_Update_Type(&(*r).Type)
}

func TestVK_AppWidgets_Update_Success(t *testing.T) {
	values := make(url.Values, 4)
	var req AppWidgets_Update_Request
	fillRandomly_AppWidgets_Update_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Base_Ok_Response
	fillRandomly_Base_Ok_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "appWidgets.update", values, expectedJSON), token)
	resp, apiErr, err := vk.AppWidgets_Update(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_AppWidgets_Update_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "appWidgets.update", expectedJSON), "")
	resp, apiErr, err := vk.AppWidgets_Update(context.Background(), AppWidgets_Update_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_AppWidgets_Update_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.AppWidgets_Update(context.Background(), AppWidgets_Update_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func TestVK_Apps_DeleteAppRequests_Success(t *testing.T) {
	values := make(url.Values, 2)
	var expected Base_Ok_Response
	fillRandomly_Base_Ok_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "apps.deleteAppRequests", values, expectedJSON), token)
	resp, apiErr, err := vk.Apps_DeleteAppRequests(context.Background())
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Apps_DeleteAppRequests_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "apps.deleteAppRequests", expectedJSON), "")
	resp, apiErr, err := vk.Apps_DeleteAppRequests(context.Background())
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Apps_DeleteAppRequests_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Apps_DeleteAppRequests(context.Background())
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Apps_Get_Platform(o *Apps_Get_Platform) {
	switch randIntn(4) {
	case 0:
		*o = "android"
	case 1:
		*o = "ios"
	case 2:
		*o = "web"
	case 3:
		*o = "winphone"
	}
}

func fillRandomly_Apps_Get_NameCase(o *Apps_Get_NameCase) {
	switch randIntn(6) {
	case 0:
		*o = "nom"
	case 1:
		*o = "gen"
	case 2:
		*o = "dat"
	case 3:
		*o = "acc"
	case 4:
		*o = "ins"
	case 5:
		*o = "abl"
	}
}

func fillRandomly_Apps_Get_Request(r *Apps_Get_Request) {
	(*r).AppId = new(int)
	*(*r).AppId = randInt()
	(*r).AppIds = new([]string)
	l0 := randIntn(maxArrayLength + 1)
	*(*r).AppIds = make([]string, l0)
	for i0 := 0; i0 < l0; i0++ {
		(*(*r).AppIds)[i0] = randString()
	}
	(*r).Platform = new(Apps_Get_Platform)
	fillRandomly_Apps_Get_Platform((*r).Platform)
	(*r).Extended = new(bool)
	*(*r).Extended = randBool()
	(*r).ReturnFriends = new(bool)
	*(*r).ReturnFriends = randBool()
	(*r).Fields = new([]Users_Fields)
	l0 = randIntn(maxArrayLength + 1)
	*(*r).Fields = make([]Users_Fields, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomly_Users_Fields(&(*(*r).Fields)[i0])
	}
	(*r).NameCase = new(Apps_Get_NameCase)
	fillRandomly_Apps_Get_NameCase((*r).NameCase)
}

func TestVK_Apps_Get_Success(t *testing.T) {
	values := make(url.Values, 9)
	var req Apps_Get_Request
	fillRandomly_Apps_Get_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Apps_Get_Response
	fillRandomly_Apps_Get_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "apps.get", values, expectedJSON), token)
	resp, apiErr, err := vk.Apps_Get(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Apps_Get_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "apps.get", expectedJSON), "")
	resp, apiErr, err := vk.Apps_Get(context.Background(), Apps_Get_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Apps_Get_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Apps_Get(context.Background(), Apps_Get_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Apps_GetCatalog_Sort(o *Apps_GetCatalog_Sort) {
	switch randIntn(5) {
	case 0:
		*o = "popular_today"
	case 1:
		*o = "visitors"
	case 2:
		*o = "create_date"
	case 3:
		*o = "growth_rate"
	case 4:
		*o = "popular_week"
	}
}

func fillRandomly_Apps_GetCatalog_Filter(o *Apps_GetCatalog_Filter) {
	switch randIntn(4) {
	case 0:
		*o = "favorite"
	case 1:
		*o = "featured"
	case 2:
		*o = "installed"
	case 3:
		*o = "new"
	}
}

func fillRandomly_Apps_GetCatalog_Request(r *Apps_GetCatalog_Request) {
	(*r).Sort = new(Apps_GetCatalog_Sort)
	fillRandomly_Apps_GetCatalog_Sort((*r).Sort)
	(*r).Offset = new(int)
	*(*r).Offset = randInt()
	(*r).Count = randInt()
	(*r).Platform = new(string)
	*(*r).Platform = randString()
	(*r).Extended = new(bool)
	*(*r).Extended = randBool()
	(*r).ReturnFriends = new(bool)
	*(*r).ReturnFriends = randBool()
	(*r).Fields = new([]Users_Fields)
	l0 := randIntn(maxArrayLength + 1)
	*(*r).Fields = make([]Users_Fields, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomly_Users_Fields(&(*(*r).Fields)[i0])
	}
	(*r).NameCase = new(string)
	*(*r).NameCase = randString()
	(*r).Q = new(string)
	*(*r).Q = randString()
	(*r).GenreId = new(int)
	*(*r).GenreId = randInt()
	(*r).Filter = new(Apps_GetCatalog_Filter)
	fillRandomly_Apps_GetCatalog_Filter((*r).Filter)
}

func TestVK_Apps_GetCatalog_Success(t *testing.T) {
	values := make(url.Values, 13)
	var req Apps_GetCatalog_Request
	fillRandomly_Apps_GetCatalog_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Apps_GetCatalog_Response
	fillRandomly_Apps_GetCatalog_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "apps.getCatalog", values, expectedJSON), token)
	resp, apiErr, err := vk.Apps_GetCatalog(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Apps_GetCatalog_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "apps.getCatalog", expectedJSON), "")
	resp, apiErr, err := vk.Apps_GetCatalog(context.Background(), Apps_GetCatalog_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Apps_GetCatalog_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Apps_GetCatalog(context.Background(), Apps_GetCatalog_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Apps_GetFriendsList_Type(o *Apps_GetFriendsList_Type) {
	switch randIntn(2) {
	case 0:
		*o = "invite"
	case 1:
		*o = "request"
	}
}

func fillRandomly_Apps_GetFriendsList_Request(r *Apps_GetFriendsList_Request) {
	(*r).Count = new(int)
	*(*r).Count = randInt()
	(*r).Offset = new(int)
	*(*r).Offset = randInt()
	(*r).Type = new(Apps_GetFriendsList_Type)
	fillRandomly_Apps_GetFriendsList_Type((*r).Type)
	(*r).Fields = new([]Users_Fields)
	l0 := randIntn(maxArrayLength + 1)
	*(*r).Fields = make([]Users_Fields, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomly_Users_Fields(&(*(*r).Fields)[i0])
	}
}

func TestVK_Apps_GetFriendsList_Success(t *testing.T) {
	values := make(url.Values, 7)
	var req Apps_GetFriendsList_Request
	fillRandomly_Apps_GetFriendsList_Request(&req)
	require.NoError(t, req.fillIn(values))
	setString(values, "extended", "0")
	var expected Apps_GetFriendsList_Response
	fillRandomly_Apps_GetFriendsList_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "apps.getFriendsList", values, expectedJSON), token)
	resp, apiErr, err := vk.Apps_GetFriendsList(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Apps_GetFriendsList_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "apps.getFriendsList", expectedJSON), "")
	resp, apiErr, err := vk.Apps_GetFriendsList(context.Background(), Apps_GetFriendsList_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Apps_GetFriendsList_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Apps_GetFriendsList(context.Background(), Apps_GetFriendsList_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func TestVK_Apps_GetFriendsListExtended_Success(t *testing.T) {
	values := make(url.Values, 7)
	var req Apps_GetFriendsList_Request
	fillRandomly_Apps_GetFriendsList_Request(&req)
	require.NoError(t, req.fillIn(values))
	setString(values, "extended", "1")
	var expected Apps_GetFriendsListExtended_Response
	fillRandomly_Apps_GetFriendsListExtended_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "apps.getFriendsList", values, expectedJSON), token)
	resp, apiErr, err := vk.Apps_GetFriendsListExtended(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Apps_GetFriendsListExtended_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "apps.getFriendsList", expectedJSON), "")
	resp, apiErr, err := vk.Apps_GetFriendsListExtended(context.Background(), Apps_GetFriendsList_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Apps_GetFriendsListExtended_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Apps_GetFriendsListExtended(context.Background(), Apps_GetFriendsList_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Apps_GetLeaderboard_Type(o *Apps_GetLeaderboard_Type) {
	switch randIntn(3) {
	case 0:
		*o = "level"
	case 1:
		*o = "points"
	case 2:
		*o = "score"
	}
}

func fillRandomly_Apps_GetLeaderboard_Request(r *Apps_GetLeaderboard_Request) {
	fillRandomly_Apps_GetLeaderboard_Type(&(*r).Type)
	(*r).Global = new(bool)
	*(*r).Global = randBool()
}

func TestVK_Apps_GetLeaderboard_Success(t *testing.T) {
	values := make(url.Values, 5)
	var req Apps_GetLeaderboard_Request
	fillRandomly_Apps_GetLeaderboard_Request(&req)
	require.NoError(t, req.fillIn(values))
	setString(values, "extended", "0")
	var expected Apps_GetLeaderboard_Response
	fillRandomly_Apps_GetLeaderboard_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "apps.getLeaderboard", values, expectedJSON), token)
	resp, apiErr, err := vk.Apps_GetLeaderboard(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Apps_GetLeaderboard_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "apps.getLeaderboard", expectedJSON), "")
	resp, apiErr, err := vk.Apps_GetLeaderboard(context.Background(), Apps_GetLeaderboard_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Apps_GetLeaderboard_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Apps_GetLeaderboard(context.Background(), Apps_GetLeaderboard_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func TestVK_Apps_GetLeaderboardExtended_Success(t *testing.T) {
	values := make(url.Values, 5)
	var req Apps_GetLeaderboard_Request
	fillRandomly_Apps_GetLeaderboard_Request(&req)
	require.NoError(t, req.fillIn(values))
	setString(values, "extended", "1")
	var expected Apps_GetLeaderboardExtended_Response
	fillRandomly_Apps_GetLeaderboardExtended_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "apps.getLeaderboard", values, expectedJSON), token)
	resp, apiErr, err := vk.Apps_GetLeaderboardExtended(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Apps_GetLeaderboardExtended_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "apps.getLeaderboard", expectedJSON), "")
	resp, apiErr, err := vk.Apps_GetLeaderboardExtended(context.Background(), Apps_GetLeaderboard_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Apps_GetLeaderboardExtended_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Apps_GetLeaderboardExtended(context.Background(), Apps_GetLeaderboard_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Apps_GetMiniAppPolicies_Request(r *Apps_GetMiniAppPolicies_Request) {
	(*r).AppId = randInt()
}

func TestVK_Apps_GetMiniAppPolicies_Success(t *testing.T) {
	values := make(url.Values, 3)
	var req Apps_GetMiniAppPolicies_Request
	fillRandomly_Apps_GetMiniAppPolicies_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Apps_GetMiniAppPolicies_Response
	fillRandomly_Apps_GetMiniAppPolicies_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "apps.getMiniAppPolicies", values, expectedJSON), token)
	resp, apiErr, err := vk.Apps_GetMiniAppPolicies(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Apps_GetMiniAppPolicies_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "apps.getMiniAppPolicies", expectedJSON), "")
	resp, apiErr, err := vk.Apps_GetMiniAppPolicies(context.Background(), Apps_GetMiniAppPolicies_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Apps_GetMiniAppPolicies_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Apps_GetMiniAppPolicies(context.Background(), Apps_GetMiniAppPolicies_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Apps_GetScopes_Type(o *Apps_GetScopes_Type) {
	switch randIntn(2) {
	case 0:
		*o = "group"
	case 1:
		*o = "user"
	}
}

func fillRandomly_Apps_GetScopes_Request(r *Apps_GetScopes_Request) {
	(*r).Type = new(Apps_GetScopes_Type)
	fillRandomly_Apps_GetScopes_Type((*r).Type)
}

func TestVK_Apps_GetScopes_Success(t *testing.T) {
	values := make(url.Values, 3)
	var req Apps_GetScopes_Request
	fillRandomly_Apps_GetScopes_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Apps_GetScopes_Response
	fillRandomly_Apps_GetScopes_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "apps.getScopes", values, expectedJSON), token)
	resp, apiErr, err := vk.Apps_GetScopes(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Apps_GetScopes_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "apps.getScopes", expectedJSON), "")
	resp, apiErr, err := vk.Apps_GetScopes(context.Background(), Apps_GetScopes_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Apps_GetScopes_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Apps_GetScopes(context.Background(), Apps_GetScopes_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Apps_GetScore_Request(r *Apps_GetScore_Request) {
	(*r).UserId = randInt()
}

func TestVK_Apps_GetScore_Success(t *testing.T) {
	values := make(url.Values, 3)
	var req Apps_GetScore_Request
	fillRandomly_Apps_GetScore_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Apps_GetScore_Response
	fillRandomly_Apps_GetScore_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "apps.getScore", values, expectedJSON), token)
	resp, apiErr, err := vk.Apps_GetScore(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Apps_GetScore_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "apps.getScore", expectedJSON), "")
	resp, apiErr, err := vk.Apps_GetScore(context.Background(), Apps_GetScore_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Apps_GetScore_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Apps_GetScore(context.Background(), Apps_GetScore_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Apps_PromoHasActiveGift_Request(r *Apps_PromoHasActiveGift_Request) {
	(*r).PromoId = randInt()
	(*r).UserId = new(int)
	*(*r).UserId = randInt()
}

func TestVK_Apps_PromoHasActiveGift_Success(t *testing.T) {
	values := make(url.Values, 4)
	var req Apps_PromoHasActiveGift_Request
	fillRandomly_Apps_PromoHasActiveGift_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Base_Bool_Response
	fillRandomly_Base_Bool_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "apps.promoHasActiveGift", values, expectedJSON), token)
	resp, apiErr, err := vk.Apps_PromoHasActiveGift(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Apps_PromoHasActiveGift_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "apps.promoHasActiveGift", expectedJSON), "")
	resp, apiErr, err := vk.Apps_PromoHasActiveGift(context.Background(), Apps_PromoHasActiveGift_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Apps_PromoHasActiveGift_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Apps_PromoHasActiveGift(context.Background(), Apps_PromoHasActiveGift_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Apps_PromoUseGift_Request(r *Apps_PromoUseGift_Request) {
	(*r).PromoId = randInt()
	(*r).UserId = new(int)
	*(*r).UserId = randInt()
}

func TestVK_Apps_PromoUseGift_Success(t *testing.T) {
	values := make(url.Values, 4)
	var req Apps_PromoUseGift_Request
	fillRandomly_Apps_PromoUseGift_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Base_Bool_Response
	fillRandomly_Base_Bool_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "apps.promoUseGift", values, expectedJSON), token)
	resp, apiErr, err := vk.Apps_PromoUseGift(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Apps_PromoUseGift_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "apps.promoUseGift", expectedJSON), "")
	resp, apiErr, err := vk.Apps_PromoUseGift(context.Background(), Apps_PromoUseGift_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Apps_PromoUseGift_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Apps_PromoUseGift(context.Background(), Apps_PromoUseGift_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Apps_SendRequest_Type(o *Apps_SendRequest_Type) {
	switch randIntn(2) {
	case 0:
		*o = "invite"
	case 1:
		*o = "request"
	}
}

func fillRandomly_Apps_SendRequest_Request(r *Apps_SendRequest_Request) {
	(*r).UserId = randInt()
	(*r).Text = new(string)
	*(*r).Text = randString()
	(*r).Type = new(Apps_SendRequest_Type)
	fillRandomly_Apps_SendRequest_Type((*r).Type)
	(*r).Name = new(string)
	*(*r).Name = randString()
	(*r).Key = new(string)
	*(*r).Key = randString()
	(*r).Separate = new(bool)
	*(*r).Separate = randBool()
}

func TestVK_Apps_SendRequest_Success(t *testing.T) {
	values := make(url.Values, 8)
	var req Apps_SendRequest_Request
	fillRandomly_Apps_SendRequest_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Apps_SendRequest_Response
	fillRandomly_Apps_SendRequest_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "apps.sendRequest", values, expectedJSON), token)
	resp, apiErr, err := vk.Apps_SendRequest(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Apps_SendRequest_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "apps.sendRequest", expectedJSON), "")
	resp, apiErr, err := vk.Apps_SendRequest(context.Background(), Apps_SendRequest_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Apps_SendRequest_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Apps_SendRequest(context.Background(), Apps_SendRequest_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Auth_Restore_Request(r *Auth_Restore_Request) {
	(*r).Phone = randString()
	(*r).LastName = randString()
}

func TestVK_Auth_Restore_Success(t *testing.T) {
	values := make(url.Values, 4)
	var req Auth_Restore_Request
	fillRandomly_Auth_Restore_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Auth_Restore_Response
	fillRandomly_Auth_Restore_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "auth.restore", values, expectedJSON), token)
	resp, apiErr, err := vk.Auth_Restore(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Auth_Restore_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "auth.restore", expectedJSON), "")
	resp, apiErr, err := vk.Auth_Restore(context.Background(), Auth_Restore_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Auth_Restore_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Auth_Restore(context.Background(), Auth_Restore_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Board_AddTopic_Request(r *Board_AddTopic_Request) {
	(*r).GroupId = randInt()
	(*r).Title = randString()
	(*r).Text = new(string)
	*(*r).Text = randString()
	(*r).FromGroup = new(bool)
	*(*r).FromGroup = randBool()
	(*r).Attachments = new([]string)
	l0 := randIntn(maxArrayLength + 1)
	*(*r).Attachments = make([]string, l0)
	for i0 := 0; i0 < l0; i0++ {
		(*(*r).Attachments)[i0] = randString()
	}
}

func TestVK_Board_AddTopic_Success(t *testing.T) {
	values := make(url.Values, 7)
	var req Board_AddTopic_Request
	fillRandomly_Board_AddTopic_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Board_AddTopic_Response
	fillRandomly_Board_AddTopic_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "board.addTopic", values, expectedJSON), token)
	resp, apiErr, err := vk.Board_AddTopic(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Board_AddTopic_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "board.addTopic", expectedJSON), "")
	resp, apiErr, err := vk.Board_AddTopic(context.Background(), Board_AddTopic_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Board_AddTopic_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Board_AddTopic(context.Background(), Board_AddTopic_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Board_CloseTopic_Request(r *Board_CloseTopic_Request) {
	(*r).GroupId = randInt()
	(*r).TopicId = randInt()
}

func TestVK_Board_CloseTopic_Success(t *testing.T) {
	values := make(url.Values, 4)
	var req Board_CloseTopic_Request
	fillRandomly_Board_CloseTopic_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Base_Ok_Response
	fillRandomly_Base_Ok_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "board.closeTopic", values, expectedJSON), token)
	resp, apiErr, err := vk.Board_CloseTopic(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Board_CloseTopic_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "board.closeTopic", expectedJSON), "")
	resp, apiErr, err := vk.Board_CloseTopic(context.Background(), Board_CloseTopic_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Board_CloseTopic_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Board_CloseTopic(context.Background(), Board_CloseTopic_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Board_CreateComment_Request(r *Board_CreateComment_Request) {
	(*r).GroupId = randInt()
	(*r).TopicId = randInt()
	(*r).Message = new(string)
	*(*r).Message = randString()
	(*r).Attachments = new([]string)
	l0 := randIntn(maxArrayLength + 1)
	*(*r).Attachments = make([]string, l0)
	for i0 := 0; i0 < l0; i0++ {
		(*(*r).Attachments)[i0] = randString()
	}
	(*r).FromGroup = new(bool)
	*(*r).FromGroup = randBool()
	(*r).StickerId = new(int)
	*(*r).StickerId = randInt()
	(*r).Guid = new(string)
	*(*r).Guid = randString()
}

func TestVK_Board_CreateComment_Success(t *testing.T) {
	values := make(url.Values, 9)
	var req Board_CreateComment_Request
	fillRandomly_Board_CreateComment_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Board_CreateComment_Response
	fillRandomly_Board_CreateComment_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "board.createComment", values, expectedJSON), token)
	resp, apiErr, err := vk.Board_CreateComment(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Board_CreateComment_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "board.createComment", expectedJSON), "")
	resp, apiErr, err := vk.Board_CreateComment(context.Background(), Board_CreateComment_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Board_CreateComment_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Board_CreateComment(context.Background(), Board_CreateComment_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Board_DeleteComment_Request(r *Board_DeleteComment_Request) {
	(*r).GroupId = randInt()
	(*r).TopicId = randInt()
	(*r).CommentId = randInt()
}

func TestVK_Board_DeleteComment_Success(t *testing.T) {
	values := make(url.Values, 5)
	var req Board_DeleteComment_Request
	fillRandomly_Board_DeleteComment_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Base_Ok_Response
	fillRandomly_Base_Ok_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "board.deleteComment", values, expectedJSON), token)
	resp, apiErr, err := vk.Board_DeleteComment(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Board_DeleteComment_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "board.deleteComment", expectedJSON), "")
	resp, apiErr, err := vk.Board_DeleteComment(context.Background(), Board_DeleteComment_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Board_DeleteComment_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Board_DeleteComment(context.Background(), Board_DeleteComment_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Board_DeleteTopic_Request(r *Board_DeleteTopic_Request) {
	(*r).GroupId = randInt()
	(*r).TopicId = randInt()
}

func TestVK_Board_DeleteTopic_Success(t *testing.T) {
	values := make(url.Values, 4)
	var req Board_DeleteTopic_Request
	fillRandomly_Board_DeleteTopic_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Base_Ok_Response
	fillRandomly_Base_Ok_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "board.deleteTopic", values, expectedJSON), token)
	resp, apiErr, err := vk.Board_DeleteTopic(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Board_DeleteTopic_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "board.deleteTopic", expectedJSON), "")
	resp, apiErr, err := vk.Board_DeleteTopic(context.Background(), Board_DeleteTopic_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Board_DeleteTopic_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Board_DeleteTopic(context.Background(), Board_DeleteTopic_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Board_EditComment_Request(r *Board_EditComment_Request) {
	(*r).GroupId = randInt()
	(*r).TopicId = randInt()
	(*r).CommentId = randInt()
	(*r).Message = new(string)
	*(*r).Message = randString()
	(*r).Attachments = new([]string)
	l0 := randIntn(maxArrayLength + 1)
	*(*r).Attachments = make([]string, l0)
	for i0 := 0; i0 < l0; i0++ {
		(*(*r).Attachments)[i0] = randString()
	}
}

func TestVK_Board_EditComment_Success(t *testing.T) {
	values := make(url.Values, 7)
	var req Board_EditComment_Request
	fillRandomly_Board_EditComment_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Base_Ok_Response
	fillRandomly_Base_Ok_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "board.editComment", values, expectedJSON), token)
	resp, apiErr, err := vk.Board_EditComment(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Board_EditComment_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "board.editComment", expectedJSON), "")
	resp, apiErr, err := vk.Board_EditComment(context.Background(), Board_EditComment_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Board_EditComment_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Board_EditComment(context.Background(), Board_EditComment_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Board_EditTopic_Request(r *Board_EditTopic_Request) {
	(*r).GroupId = randInt()
	(*r).TopicId = randInt()
	(*r).Title = randString()
}

func TestVK_Board_EditTopic_Success(t *testing.T) {
	values := make(url.Values, 5)
	var req Board_EditTopic_Request
	fillRandomly_Board_EditTopic_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Base_Ok_Response
	fillRandomly_Base_Ok_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "board.editTopic", values, expectedJSON), token)
	resp, apiErr, err := vk.Board_EditTopic(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Board_EditTopic_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "board.editTopic", expectedJSON), "")
	resp, apiErr, err := vk.Board_EditTopic(context.Background(), Board_EditTopic_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Board_EditTopic_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Board_EditTopic(context.Background(), Board_EditTopic_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Board_FixTopic_Request(r *Board_FixTopic_Request) {
	(*r).GroupId = randInt()
	(*r).TopicId = randInt()
}

func TestVK_Board_FixTopic_Success(t *testing.T) {
	values := make(url.Values, 4)
	var req Board_FixTopic_Request
	fillRandomly_Board_FixTopic_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Base_Ok_Response
	fillRandomly_Base_Ok_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "board.fixTopic", values, expectedJSON), token)
	resp, apiErr, err := vk.Board_FixTopic(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Board_FixTopic_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "board.fixTopic", expectedJSON), "")
	resp, apiErr, err := vk.Board_FixTopic(context.Background(), Board_FixTopic_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Board_FixTopic_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Board_FixTopic(context.Background(), Board_FixTopic_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Board_GetComments_Sort(o *Board_GetComments_Sort) {
	switch randIntn(2) {
	case 0:
		*o = "asc"
	case 1:
		*o = "desc"
	}
}

func fillRandomly_Board_GetComments_Request(r *Board_GetComments_Request) {
	(*r).GroupId = randInt()
	(*r).TopicId = randInt()
	(*r).NeedLikes = new(bool)
	*(*r).NeedLikes = randBool()
	(*r).StartCommentId = new(int)
	*(*r).StartCommentId = randInt()
	(*r).Offset = new(int)
	*(*r).Offset = randInt()
	(*r).Count = new(int)
	*(*r).Count = randInt()
	(*r).Sort = new(Board_GetComments_Sort)
	fillRandomly_Board_GetComments_Sort((*r).Sort)
}

func TestVK_Board_GetComments_Success(t *testing.T) {
	values := make(url.Values, 10)
	var req Board_GetComments_Request
	fillRandomly_Board_GetComments_Request(&req)
	require.NoError(t, req.fillIn(values))
	setString(values, "extended", "0")
	var expected Board_GetComments_Response
	fillRandomly_Board_GetComments_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "board.getComments", values, expectedJSON), token)
	resp, apiErr, err := vk.Board_GetComments(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Board_GetComments_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "board.getComments", expectedJSON), "")
	resp, apiErr, err := vk.Board_GetComments(context.Background(), Board_GetComments_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Board_GetComments_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Board_GetComments(context.Background(), Board_GetComments_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func TestVK_Board_GetCommentsExtended_Success(t *testing.T) {
	values := make(url.Values, 10)
	var req Board_GetComments_Request
	fillRandomly_Board_GetComments_Request(&req)
	require.NoError(t, req.fillIn(values))
	setString(values, "extended", "1")
	var expected Board_GetCommentsExtended_Response
	fillRandomly_Board_GetCommentsExtended_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "board.getComments", values, expectedJSON), token)
	resp, apiErr, err := vk.Board_GetCommentsExtended(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Board_GetCommentsExtended_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "board.getComments", expectedJSON), "")
	resp, apiErr, err := vk.Board_GetCommentsExtended(context.Background(), Board_GetComments_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Board_GetCommentsExtended_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Board_GetCommentsExtended(context.Background(), Board_GetComments_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Board_GetTopics_Order(o *Board_GetTopics_Order) {
	switch randIntn(5) {
	case 0:
		*o = 1
	case 1:
		*o = 2
	case 2:
		*o = -1
	case 3:
		*o = -2
	case 4:
		*o = 0
	}
}

func fillRandomly_Board_GetTopics_Preview(o *Board_GetTopics_Preview) {
	switch randIntn(3) {
	case 0:
		*o = 1
	case 1:
		*o = 2
	case 2:
		*o = 0
	}
}

func fillRandomly_Board_GetTopics_Request(r *Board_GetTopics_Request) {
	(*r).GroupId = randInt()
	(*r).TopicIds = new([]int)
	l0 := randIntn(maxArrayLength + 1)
	*(*r).TopicIds = make([]int, l0)
	for i0 := 0; i0 < l0; i0++ {
		(*(*r).TopicIds)[i0] = randInt()
	}
	(*r).Order = new(Board_GetTopics_Order)
	fillRandomly_Board_GetTopics_Order((*r).Order)
	(*r).Offset = new(int)
	*(*r).Offset = randInt()
	(*r).Count = new(int)
	*(*r).Count = randInt()
	(*r).Preview = new(Board_GetTopics_Preview)
	fillRandomly_Board_GetTopics_Preview((*r).Preview)
	(*r).PreviewLength = new(int)
	*(*r).PreviewLength = randInt()
}

func TestVK_Board_GetTopics_Success(t *testing.T) {
	values := make(url.Values, 10)
	var req Board_GetTopics_Request
	fillRandomly_Board_GetTopics_Request(&req)
	require.NoError(t, req.fillIn(values))
	setString(values, "extended", "0")
	var expected Board_GetTopics_Response
	fillRandomly_Board_GetTopics_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "board.getTopics", values, expectedJSON), token)
	resp, apiErr, err := vk.Board_GetTopics(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Board_GetTopics_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "board.getTopics", expectedJSON), "")
	resp, apiErr, err := vk.Board_GetTopics(context.Background(), Board_GetTopics_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Board_GetTopics_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Board_GetTopics(context.Background(), Board_GetTopics_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func TestVK_Board_GetTopicsExtended_Success(t *testing.T) {
	values := make(url.Values, 10)
	var req Board_GetTopics_Request
	fillRandomly_Board_GetTopics_Request(&req)
	require.NoError(t, req.fillIn(values))
	setString(values, "extended", "1")
	var expected Board_GetTopicsExtended_Response
	fillRandomly_Board_GetTopicsExtended_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "board.getTopics", values, expectedJSON), token)
	resp, apiErr, err := vk.Board_GetTopicsExtended(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Board_GetTopicsExtended_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "board.getTopics", expectedJSON), "")
	resp, apiErr, err := vk.Board_GetTopicsExtended(context.Background(), Board_GetTopics_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Board_GetTopicsExtended_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Board_GetTopicsExtended(context.Background(), Board_GetTopics_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Board_OpenTopic_Request(r *Board_OpenTopic_Request) {
	(*r).GroupId = randInt()
	(*r).TopicId = randInt()
}

func TestVK_Board_OpenTopic_Success(t *testing.T) {
	values := make(url.Values, 4)
	var req Board_OpenTopic_Request
	fillRandomly_Board_OpenTopic_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Base_Ok_Response
	fillRandomly_Base_Ok_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "board.openTopic", values, expectedJSON), token)
	resp, apiErr, err := vk.Board_OpenTopic(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Board_OpenTopic_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "board.openTopic", expectedJSON), "")
	resp, apiErr, err := vk.Board_OpenTopic(context.Background(), Board_OpenTopic_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Board_OpenTopic_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Board_OpenTopic(context.Background(), Board_OpenTopic_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Board_RestoreComment_Request(r *Board_RestoreComment_Request) {
	(*r).GroupId = randInt()
	(*r).TopicId = randInt()
	(*r).CommentId = randInt()
}

func TestVK_Board_RestoreComment_Success(t *testing.T) {
	values := make(url.Values, 5)
	var req Board_RestoreComment_Request
	fillRandomly_Board_RestoreComment_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Base_Ok_Response
	fillRandomly_Base_Ok_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "board.restoreComment", values, expectedJSON), token)
	resp, apiErr, err := vk.Board_RestoreComment(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Board_RestoreComment_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "board.restoreComment", expectedJSON), "")
	resp, apiErr, err := vk.Board_RestoreComment(context.Background(), Board_RestoreComment_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Board_RestoreComment_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Board_RestoreComment(context.Background(), Board_RestoreComment_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Board_UnfixTopic_Request(r *Board_UnfixTopic_Request) {
	(*r).GroupId = randInt()
	(*r).TopicId = randInt()
}

func TestVK_Board_UnfixTopic_Success(t *testing.T) {
	values := make(url.Values, 4)
	var req Board_UnfixTopic_Request
	fillRandomly_Board_UnfixTopic_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Base_Ok_Response
	fillRandomly_Base_Ok_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "board.unfixTopic", values, expectedJSON), token)
	resp, apiErr, err := vk.Board_UnfixTopic(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Board_UnfixTopic_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "board.unfixTopic", expectedJSON), "")
	resp, apiErr, err := vk.Board_UnfixTopic(context.Background(), Board_UnfixTopic_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Board_UnfixTopic_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Board_UnfixTopic(context.Background(), Board_UnfixTopic_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Database_GetChairs_Request(r *Database_GetChairs_Request) {
	(*r).FacultyId = randInt()
	(*r).Offset = new(int)
	*(*r).Offset = randInt()
	(*r).Count = new(int)
	*(*r).Count = randInt()
}

func TestVK_Database_GetChairs_Success(t *testing.T) {
	values := make(url.Values, 5)
	var req Database_GetChairs_Request
	fillRandomly_Database_GetChairs_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Database_GetChairs_Response
	fillRandomly_Database_GetChairs_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "database.getChairs", values, expectedJSON), token)
	resp, apiErr, err := vk.Database_GetChairs(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Database_GetChairs_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "database.getChairs", expectedJSON), "")
	resp, apiErr, err := vk.Database_GetChairs(context.Background(), Database_GetChairs_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Database_GetChairs_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Database_GetChairs(context.Background(), Database_GetChairs_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Database_GetCities_Request(r *Database_GetCities_Request) {
	(*r).CountryId = randInt()
	(*r).RegionId = new(int)
	*(*r).RegionId = randInt()
	(*r).Q = new(string)
	*(*r).Q = randString()
	(*r).NeedAll = new(bool)
	*(*r).NeedAll = randBool()
	(*r).Offset = new(int)
	*(*r).Offset = randInt()
	(*r).Count = new(int)
	*(*r).Count = randInt()
}

func TestVK_Database_GetCities_Success(t *testing.T) {
	values := make(url.Values, 8)
	var req Database_GetCities_Request
	fillRandomly_Database_GetCities_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Database_GetCities_Response
	fillRandomly_Database_GetCities_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "database.getCities", values, expectedJSON), token)
	resp, apiErr, err := vk.Database_GetCities(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Database_GetCities_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "database.getCities", expectedJSON), "")
	resp, apiErr, err := vk.Database_GetCities(context.Background(), Database_GetCities_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Database_GetCities_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Database_GetCities(context.Background(), Database_GetCities_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Database_GetCitiesById_Request(r *Database_GetCitiesById_Request) {
	(*r).CityIds = new([]int)
	l0 := randIntn(maxArrayLength + 1)
	*(*r).CityIds = make([]int, l0)
	for i0 := 0; i0 < l0; i0++ {
		(*(*r).CityIds)[i0] = randInt()
	}
}

func TestVK_Database_GetCitiesById_Success(t *testing.T) {
	values := make(url.Values, 3)
	var req Database_GetCitiesById_Request
	fillRandomly_Database_GetCitiesById_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Database_GetCitiesById_Response
	fillRandomly_Database_GetCitiesById_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "database.getCitiesById", values, expectedJSON), token)
	resp, apiErr, err := vk.Database_GetCitiesById(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Database_GetCitiesById_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "database.getCitiesById", expectedJSON), "")
	resp, apiErr, err := vk.Database_GetCitiesById(context.Background(), Database_GetCitiesById_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Database_GetCitiesById_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Database_GetCitiesById(context.Background(), Database_GetCitiesById_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Database_GetCountries_Request(r *Database_GetCountries_Request) {
	(*r).NeedAll = new(bool)
	*(*r).NeedAll = randBool()
	(*r).Code = new(string)
	*(*r).Code = randString()
	(*r).Offset = new(int)
	*(*r).Offset = randInt()
	(*r).Count = new(int)
	*(*r).Count = randInt()
}

func TestVK_Database_GetCountries_Success(t *testing.T) {
	values := make(url.Values, 6)
	var req Database_GetCountries_Request
	fillRandomly_Database_GetCountries_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Database_GetCountries_Response
	fillRandomly_Database_GetCountries_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "database.getCountries", values, expectedJSON), token)
	resp, apiErr, err := vk.Database_GetCountries(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Database_GetCountries_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "database.getCountries", expectedJSON), "")
	resp, apiErr, err := vk.Database_GetCountries(context.Background(), Database_GetCountries_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Database_GetCountries_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Database_GetCountries(context.Background(), Database_GetCountries_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Database_GetCountriesById_Request(r *Database_GetCountriesById_Request) {
	(*r).CountryIds = new([]int)
	l0 := randIntn(maxArrayLength + 1)
	*(*r).CountryIds = make([]int, l0)
	for i0 := 0; i0 < l0; i0++ {
		(*(*r).CountryIds)[i0] = randInt()
	}
}

func TestVK_Database_GetCountriesById_Success(t *testing.T) {
	values := make(url.Values, 3)
	var req Database_GetCountriesById_Request
	fillRandomly_Database_GetCountriesById_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Database_GetCountriesById_Response
	fillRandomly_Database_GetCountriesById_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "database.getCountriesById", values, expectedJSON), token)
	resp, apiErr, err := vk.Database_GetCountriesById(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Database_GetCountriesById_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "database.getCountriesById", expectedJSON), "")
	resp, apiErr, err := vk.Database_GetCountriesById(context.Background(), Database_GetCountriesById_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Database_GetCountriesById_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Database_GetCountriesById(context.Background(), Database_GetCountriesById_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Database_GetFaculties_Request(r *Database_GetFaculties_Request) {
	(*r).UniversityId = randInt()
	(*r).Offset = new(int)
	*(*r).Offset = randInt()
	(*r).Count = new(int)
	*(*r).Count = randInt()
}

func TestVK_Database_GetFaculties_Success(t *testing.T) {
	values := make(url.Values, 5)
	var req Database_GetFaculties_Request
	fillRandomly_Database_GetFaculties_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Database_GetFaculties_Response
	fillRandomly_Database_GetFaculties_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "database.getFaculties", values, expectedJSON), token)
	resp, apiErr, err := vk.Database_GetFaculties(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Database_GetFaculties_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "database.getFaculties", expectedJSON), "")
	resp, apiErr, err := vk.Database_GetFaculties(context.Background(), Database_GetFaculties_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Database_GetFaculties_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Database_GetFaculties(context.Background(), Database_GetFaculties_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Database_GetMetroStations_Request(r *Database_GetMetroStations_Request) {
	(*r).CityId = randInt()
	(*r).Offset = new(int)
	*(*r).Offset = randInt()
	(*r).Count = new(int)
	*(*r).Count = randInt()
	(*r).Extended = new(bool)
	*(*r).Extended = randBool()
}

func TestVK_Database_GetMetroStations_Success(t *testing.T) {
	values := make(url.Values, 6)
	var req Database_GetMetroStations_Request
	fillRandomly_Database_GetMetroStations_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Database_GetMetroStations_Response
	fillRandomly_Database_GetMetroStations_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "database.getMetroStations", values, expectedJSON), token)
	resp, apiErr, err := vk.Database_GetMetroStations(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Database_GetMetroStations_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "database.getMetroStations", expectedJSON), "")
	resp, apiErr, err := vk.Database_GetMetroStations(context.Background(), Database_GetMetroStations_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Database_GetMetroStations_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Database_GetMetroStations(context.Background(), Database_GetMetroStations_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Database_GetMetroStationsById_Request(r *Database_GetMetroStationsById_Request) {
	(*r).StationIds = new([]int)
	l0 := randIntn(maxArrayLength + 1)
	*(*r).StationIds = make([]int, l0)
	for i0 := 0; i0 < l0; i0++ {
		(*(*r).StationIds)[i0] = randInt()
	}
}

func TestVK_Database_GetMetroStationsById_Success(t *testing.T) {
	values := make(url.Values, 3)
	var req Database_GetMetroStationsById_Request
	fillRandomly_Database_GetMetroStationsById_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Database_GetMetroStationsById_Response
	fillRandomly_Database_GetMetroStationsById_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "database.getMetroStationsById", values, expectedJSON), token)
	resp, apiErr, err := vk.Database_GetMetroStationsById(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Database_GetMetroStationsById_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "database.getMetroStationsById", expectedJSON), "")
	resp, apiErr, err := vk.Database_GetMetroStationsById(context.Background(), Database_GetMetroStationsById_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Database_GetMetroStationsById_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Database_GetMetroStationsById(context.Background(), Database_GetMetroStationsById_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Database_GetRegions_Request(r *Database_GetRegions_Request) {
	(*r).CountryId = randInt()
	(*r).Q = new(string)
	*(*r).Q = randString()
	(*r).Offset = new(int)
	*(*r).Offset = randInt()
	(*r).Count = new(int)
	*(*r).Count = randInt()
}

func TestVK_Database_GetRegions_Success(t *testing.T) {
	values := make(url.Values, 6)
	var req Database_GetRegions_Request
	fillRandomly_Database_GetRegions_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Database_GetRegions_Response
	fillRandomly_Database_GetRegions_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "database.getRegions", values, expectedJSON), token)
	resp, apiErr, err := vk.Database_GetRegions(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Database_GetRegions_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "database.getRegions", expectedJSON), "")
	resp, apiErr, err := vk.Database_GetRegions(context.Background(), Database_GetRegions_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Database_GetRegions_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Database_GetRegions(context.Background(), Database_GetRegions_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Database_GetSchoolClasses_Request(r *Database_GetSchoolClasses_Request) {
	(*r).CountryId = new(int)
	*(*r).CountryId = randInt()
}

func TestVK_Database_GetSchoolClasses_Success(t *testing.T) {
	values := make(url.Values, 3)
	var req Database_GetSchoolClasses_Request
	fillRandomly_Database_GetSchoolClasses_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Database_GetSchoolClasses_Response
	fillRandomly_Database_GetSchoolClasses_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "database.getSchoolClasses", values, expectedJSON), token)
	resp, apiErr, err := vk.Database_GetSchoolClasses(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Database_GetSchoolClasses_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "database.getSchoolClasses", expectedJSON), "")
	resp, apiErr, err := vk.Database_GetSchoolClasses(context.Background(), Database_GetSchoolClasses_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Database_GetSchoolClasses_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Database_GetSchoolClasses(context.Background(), Database_GetSchoolClasses_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Database_GetSchools_Request(r *Database_GetSchools_Request) {
	(*r).Q = new(string)
	*(*r).Q = randString()
	(*r).CityId = randInt()
	(*r).Offset = new(int)
	*(*r).Offset = randInt()
	(*r).Count = new(int)
	*(*r).Count = randInt()
}

func TestVK_Database_GetSchools_Success(t *testing.T) {
	values := make(url.Values, 6)
	var req Database_GetSchools_Request
	fillRandomly_Database_GetSchools_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Database_GetSchools_Response
	fillRandomly_Database_GetSchools_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "database.getSchools", values, expectedJSON), token)
	resp, apiErr, err := vk.Database_GetSchools(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Database_GetSchools_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "database.getSchools", expectedJSON), "")
	resp, apiErr, err := vk.Database_GetSchools(context.Background(), Database_GetSchools_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Database_GetSchools_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Database_GetSchools(context.Background(), Database_GetSchools_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Database_GetUniversities_Request(r *Database_GetUniversities_Request) {
	(*r).Q = new(string)
	*(*r).Q = randString()
	(*r).CountryId = new(int)
	*(*r).CountryId = randInt()
	(*r).CityId = new(int)
	*(*r).CityId = randInt()
	(*r).Offset = new(int)
	*(*r).Offset = randInt()
	(*r).Count = new(int)
	*(*r).Count = randInt()
}

func TestVK_Database_GetUniversities_Success(t *testing.T) {
	values := make(url.Values, 7)
	var req Database_GetUniversities_Request
	fillRandomly_Database_GetUniversities_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Database_GetUniversities_Response
	fillRandomly_Database_GetUniversities_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "database.getUniversities", values, expectedJSON), token)
	resp, apiErr, err := vk.Database_GetUniversities(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Database_GetUniversities_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "database.getUniversities", expectedJSON), "")
	resp, apiErr, err := vk.Database_GetUniversities(context.Background(), Database_GetUniversities_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Database_GetUniversities_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Database_GetUniversities(context.Background(), Database_GetUniversities_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Docs_Add_Request(r *Docs_Add_Request) {
	(*r).OwnerId = randInt()
	(*r).DocId = randInt()
	(*r).AccessKey = new(string)
	*(*r).AccessKey = randString()
}

func TestVK_Docs_Add_Success(t *testing.T) {
	values := make(url.Values, 5)
	var req Docs_Add_Request
	fillRandomly_Docs_Add_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Docs_Add_Response
	fillRandomly_Docs_Add_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "docs.add", values, expectedJSON), token)
	resp, apiErr, err := vk.Docs_Add(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Docs_Add_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "docs.add", expectedJSON), "")
	resp, apiErr, err := vk.Docs_Add(context.Background(), Docs_Add_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Docs_Add_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Docs_Add(context.Background(), Docs_Add_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Docs_Delete_Request(r *Docs_Delete_Request) {
	(*r).OwnerId = randInt()
	(*r).DocId = randInt()
}

func TestVK_Docs_Delete_Success(t *testing.T) {
	values := make(url.Values, 4)
	var req Docs_Delete_Request
	fillRandomly_Docs_Delete_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Base_Ok_Response
	fillRandomly_Base_Ok_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "docs.delete", values, expectedJSON), token)
	resp, apiErr, err := vk.Docs_Delete(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Docs_Delete_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "docs.delete", expectedJSON), "")
	resp, apiErr, err := vk.Docs_Delete(context.Background(), Docs_Delete_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Docs_Delete_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Docs_Delete(context.Background(), Docs_Delete_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Docs_Edit_Request(r *Docs_Edit_Request) {
	(*r).OwnerId = randInt()
	(*r).DocId = randInt()
	(*r).Title = randString()
	(*r).Tags = new([]string)
	l0 := randIntn(maxArrayLength + 1)
	*(*r).Tags = make([]string, l0)
	for i0 := 0; i0 < l0; i0++ {
		(*(*r).Tags)[i0] = randString()
	}
}

func TestVK_Docs_Edit_Success(t *testing.T) {
	values := make(url.Values, 6)
	var req Docs_Edit_Request
	fillRandomly_Docs_Edit_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Base_Ok_Response
	fillRandomly_Base_Ok_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "docs.edit", values, expectedJSON), token)
	resp, apiErr, err := vk.Docs_Edit(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Docs_Edit_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "docs.edit", expectedJSON), "")
	resp, apiErr, err := vk.Docs_Edit(context.Background(), Docs_Edit_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Docs_Edit_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Docs_Edit(context.Background(), Docs_Edit_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Docs_Get_Type(o *Docs_Get_Type) {
	switch randIntn(9) {
	case 0:
		*o = 0
	case 1:
		*o = 1
	case 2:
		*o = 2
	case 3:
		*o = 3
	case 4:
		*o = 4
	case 5:
		*o = 5
	case 6:
		*o = 6
	case 7:
		*o = 7
	case 8:
		*o = 8
	}
}

func fillRandomly_Docs_Get_Request(r *Docs_Get_Request) {
	(*r).Count = new(int)
	*(*r).Count = randInt()
	(*r).Offset = new(int)
	*(*r).Offset = randInt()
	(*r).Type = new(Docs_Get_Type)
	fillRandomly_Docs_Get_Type((*r).Type)
	(*r).OwnerId = new(int)
	*(*r).OwnerId = randInt()
	(*r).ReturnTags = new(bool)
	*(*r).ReturnTags = randBool()
}

func TestVK_Docs_Get_Success(t *testing.T) {
	values := make(url.Values, 7)
	var req Docs_Get_Request
	fillRandomly_Docs_Get_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Docs_Get_Response
	fillRandomly_Docs_Get_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "docs.get", values, expectedJSON), token)
	resp, apiErr, err := vk.Docs_Get(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Docs_Get_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "docs.get", expectedJSON), "")
	resp, apiErr, err := vk.Docs_Get(context.Background(), Docs_Get_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Docs_Get_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Docs_Get(context.Background(), Docs_Get_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Docs_GetById_Request(r *Docs_GetById_Request) {
	(*r).Docs = new([]string)
	l0 := randIntn(maxArrayLength + 1)
	*(*r).Docs = make([]string, l0)
	for i0 := 0; i0 < l0; i0++ {
		(*(*r).Docs)[i0] = randString()
	}
	(*r).ReturnTags = new(bool)
	*(*r).ReturnTags = randBool()
}

func TestVK_Docs_GetById_Success(t *testing.T) {
	values := make(url.Values, 4)
	var req Docs_GetById_Request
	fillRandomly_Docs_GetById_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Docs_GetById_Response
	fillRandomly_Docs_GetById_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "docs.getById", values, expectedJSON), token)
	resp, apiErr, err := vk.Docs_GetById(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Docs_GetById_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "docs.getById", expectedJSON), "")
	resp, apiErr, err := vk.Docs_GetById(context.Background(), Docs_GetById_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Docs_GetById_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Docs_GetById(context.Background(), Docs_GetById_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Docs_GetMessagesUploadServer_Type(o *Docs_GetMessagesUploadServer_Type) {
	switch randIntn(3) {
	case 0:
		*o = "audio_message"
	case 1:
		*o = "doc"
	case 2:
		*o = "graffiti"
	}
}

func fillRandomly_Docs_GetMessagesUploadServer_Request(r *Docs_GetMessagesUploadServer_Request) {
	(*r).Type = new(Docs_GetMessagesUploadServer_Type)
	fillRandomly_Docs_GetMessagesUploadServer_Type((*r).Type)
	(*r).PeerId = new(int)
	*(*r).PeerId = randInt()
}

func TestVK_Docs_GetMessagesUploadServer_Success(t *testing.T) {
	values := make(url.Values, 4)
	var req Docs_GetMessagesUploadServer_Request
	fillRandomly_Docs_GetMessagesUploadServer_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Docs_GetUploadServer_Response
	fillRandomly_Docs_GetUploadServer_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "docs.getMessagesUploadServer", values, expectedJSON), token)
	resp, apiErr, err := vk.Docs_GetMessagesUploadServer(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Docs_GetMessagesUploadServer_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "docs.getMessagesUploadServer", expectedJSON), "")
	resp, apiErr, err := vk.Docs_GetMessagesUploadServer(context.Background(), Docs_GetMessagesUploadServer_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Docs_GetMessagesUploadServer_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Docs_GetMessagesUploadServer(context.Background(), Docs_GetMessagesUploadServer_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Docs_GetTypes_Request(r *Docs_GetTypes_Request) {
	(*r).OwnerId = randInt()
}

func TestVK_Docs_GetTypes_Success(t *testing.T) {
	values := make(url.Values, 3)
	var req Docs_GetTypes_Request
	fillRandomly_Docs_GetTypes_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Docs_GetTypes_Response
	fillRandomly_Docs_GetTypes_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "docs.getTypes", values, expectedJSON), token)
	resp, apiErr, err := vk.Docs_GetTypes(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Docs_GetTypes_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "docs.getTypes", expectedJSON), "")
	resp, apiErr, err := vk.Docs_GetTypes(context.Background(), Docs_GetTypes_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Docs_GetTypes_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Docs_GetTypes(context.Background(), Docs_GetTypes_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Docs_GetUploadServer_Request(r *Docs_GetUploadServer_Request) {
	(*r).GroupId = new(int)
	*(*r).GroupId = randInt()
}

func TestVK_Docs_GetUploadServer_Success(t *testing.T) {
	values := make(url.Values, 3)
	var req Docs_GetUploadServer_Request
	fillRandomly_Docs_GetUploadServer_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Docs_GetUploadServer_Response
	fillRandomly_Docs_GetUploadServer_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "docs.getUploadServer", values, expectedJSON), token)
	resp, apiErr, err := vk.Docs_GetUploadServer(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Docs_GetUploadServer_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "docs.getUploadServer", expectedJSON), "")
	resp, apiErr, err := vk.Docs_GetUploadServer(context.Background(), Docs_GetUploadServer_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Docs_GetUploadServer_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Docs_GetUploadServer(context.Background(), Docs_GetUploadServer_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Docs_GetWallUploadServer_Request(r *Docs_GetWallUploadServer_Request) {
	(*r).GroupId = new(int)
	*(*r).GroupId = randInt()
}

func TestVK_Docs_GetWallUploadServer_Success(t *testing.T) {
	values := make(url.Values, 3)
	var req Docs_GetWallUploadServer_Request
	fillRandomly_Docs_GetWallUploadServer_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Base_GetUploadServer_Response
	fillRandomly_Base_GetUploadServer_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "docs.getWallUploadServer", values, expectedJSON), token)
	resp, apiErr, err := vk.Docs_GetWallUploadServer(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Docs_GetWallUploadServer_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "docs.getWallUploadServer", expectedJSON), "")
	resp, apiErr, err := vk.Docs_GetWallUploadServer(context.Background(), Docs_GetWallUploadServer_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Docs_GetWallUploadServer_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Docs_GetWallUploadServer(context.Background(), Docs_GetWallUploadServer_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Docs_Save_Request(r *Docs_Save_Request) {
	(*r).File = randString()
	(*r).Title = new(string)
	*(*r).Title = randString()
	(*r).Tags = new(string)
	*(*r).Tags = randString()
	(*r).ReturnTags = new(bool)
	*(*r).ReturnTags = randBool()
}

func TestVK_Docs_Save_Success(t *testing.T) {
	values := make(url.Values, 6)
	var req Docs_Save_Request
	fillRandomly_Docs_Save_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Docs_Save_Response
	fillRandomly_Docs_Save_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "docs.save", values, expectedJSON), token)
	resp, apiErr, err := vk.Docs_Save(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Docs_Save_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "docs.save", expectedJSON), "")
	resp, apiErr, err := vk.Docs_Save(context.Background(), Docs_Save_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Docs_Save_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Docs_Save(context.Background(), Docs_Save_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Docs_Search_Request(r *Docs_Search_Request) {
	(*r).Q = randString()
	(*r).SearchOwn = new(bool)
	*(*r).SearchOwn = randBool()
	(*r).Count = new(int)
	*(*r).Count = randInt()
	(*r).Offset = new(int)
	*(*r).Offset = randInt()
	(*r).ReturnTags = new(bool)
	*(*r).ReturnTags = randBool()
}

func TestVK_Docs_Search_Success(t *testing.T) {
	values := make(url.Values, 7)
	var req Docs_Search_Request
	fillRandomly_Docs_Search_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Docs_Search_Response
	fillRandomly_Docs_Search_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "docs.search", values, expectedJSON), token)
	resp, apiErr, err := vk.Docs_Search(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Docs_Search_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "docs.search", expectedJSON), "")
	resp, apiErr, err := vk.Docs_Search(context.Background(), Docs_Search_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Docs_Search_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Docs_Search(context.Background(), Docs_Search_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Donut_GetFriends_Request(r *Donut_GetFriends_Request) {
	(*r).OwnerId = randInt()
	(*r).Offset = new(int)
	*(*r).Offset = randInt()
	(*r).Count = new(int)
	*(*r).Count = randInt()
	(*r).Fields = new([]string)
	l0 := randIntn(maxArrayLength + 1)
	*(*r).Fields = make([]string, l0)
	for i0 := 0; i0 < l0; i0++ {
		(*(*r).Fields)[i0] = randString()
	}
}

func TestVK_Donut_GetFriends_Success(t *testing.T) {
	values := make(url.Values, 6)
	var req Donut_GetFriends_Request
	fillRandomly_Donut_GetFriends_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Groups_GetMembersFields_Response
	fillRandomly_Groups_GetMembersFields_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "donut.getFriends", values, expectedJSON), token)
	resp, apiErr, err := vk.Donut_GetFriends(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Donut_GetFriends_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "donut.getFriends", expectedJSON), "")
	resp, apiErr, err := vk.Donut_GetFriends(context.Background(), Donut_GetFriends_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Donut_GetFriends_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Donut_GetFriends(context.Background(), Donut_GetFriends_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Donut_GetSubscription_Request(r *Donut_GetSubscription_Request) {
	(*r).OwnerId = randInt()
}

func TestVK_Donut_GetSubscription_Success(t *testing.T) {
	values := make(url.Values, 3)
	var req Donut_GetSubscription_Request
	fillRandomly_Donut_GetSubscription_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Donut_GetSubscription_Response
	fillRandomly_Donut_GetSubscription_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "donut.getSubscription", values, expectedJSON), token)
	resp, apiErr, err := vk.Donut_GetSubscription(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Donut_GetSubscription_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "donut.getSubscription", expectedJSON), "")
	resp, apiErr, err := vk.Donut_GetSubscription(context.Background(), Donut_GetSubscription_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Donut_GetSubscription_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Donut_GetSubscription(context.Background(), Donut_GetSubscription_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Donut_GetSubscriptions_Request(r *Donut_GetSubscriptions_Request) {
	(*r).Fields = new([]Base_UserGroupFields)
	l0 := randIntn(maxArrayLength + 1)
	*(*r).Fields = make([]Base_UserGroupFields, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomly_Base_UserGroupFields(&(*(*r).Fields)[i0])
	}
	(*r).Offset = new(int)
	*(*r).Offset = randInt()
	(*r).Count = new(int)
	*(*r).Count = randInt()
}

func TestVK_Donut_GetSubscriptions_Success(t *testing.T) {
	values := make(url.Values, 5)
	var req Donut_GetSubscriptions_Request
	fillRandomly_Donut_GetSubscriptions_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Donut_GetSubscriptions_Response
	fillRandomly_Donut_GetSubscriptions_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "donut.getSubscriptions", values, expectedJSON), token)
	resp, apiErr, err := vk.Donut_GetSubscriptions(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Donut_GetSubscriptions_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "donut.getSubscriptions", expectedJSON), "")
	resp, apiErr, err := vk.Donut_GetSubscriptions(context.Background(), Donut_GetSubscriptions_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Donut_GetSubscriptions_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Donut_GetSubscriptions(context.Background(), Donut_GetSubscriptions_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Donut_IsDon_Request(r *Donut_IsDon_Request) {
	(*r).OwnerId = randInt()
}

func TestVK_Donut_IsDon_Success(t *testing.T) {
	values := make(url.Values, 3)
	var req Donut_IsDon_Request
	fillRandomly_Donut_IsDon_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Base_Bool_Response
	fillRandomly_Base_Bool_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "donut.isDon", values, expectedJSON), token)
	resp, apiErr, err := vk.Donut_IsDon(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Donut_IsDon_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "donut.isDon", expectedJSON), "")
	resp, apiErr, err := vk.Donut_IsDon(context.Background(), Donut_IsDon_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Donut_IsDon_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Donut_IsDon(context.Background(), Donut_IsDon_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_DownloadedGames_GetPaidStatus_Request(r *DownloadedGames_GetPaidStatus_Request) {
	(*r).UserId = new(int)
	*(*r).UserId = randInt()
}

func TestVK_DownloadedGames_GetPaidStatus_Success(t *testing.T) {
	values := make(url.Values, 3)
	var req DownloadedGames_GetPaidStatus_Request
	fillRandomly_DownloadedGames_GetPaidStatus_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected DownloadedGames_PaidStatus_Response
	fillRandomly_DownloadedGames_PaidStatus_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "downloadedGames.getPaidStatus", values, expectedJSON), token)
	resp, apiErr, err := vk.DownloadedGames_GetPaidStatus(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_DownloadedGames_GetPaidStatus_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "downloadedGames.getPaidStatus", expectedJSON), "")
	resp, apiErr, err := vk.DownloadedGames_GetPaidStatus(context.Background(), DownloadedGames_GetPaidStatus_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_DownloadedGames_GetPaidStatus_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.DownloadedGames_GetPaidStatus(context.Background(), DownloadedGames_GetPaidStatus_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Fave_AddArticle_Request(r *Fave_AddArticle_Request) {
	(*r).Url = randString()
}

func TestVK_Fave_AddArticle_Success(t *testing.T) {
	values := make(url.Values, 3)
	var req Fave_AddArticle_Request
	fillRandomly_Fave_AddArticle_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Base_Ok_Response
	fillRandomly_Base_Ok_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "fave.addArticle", values, expectedJSON), token)
	resp, apiErr, err := vk.Fave_AddArticle(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Fave_AddArticle_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "fave.addArticle", expectedJSON), "")
	resp, apiErr, err := vk.Fave_AddArticle(context.Background(), Fave_AddArticle_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Fave_AddArticle_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Fave_AddArticle(context.Background(), Fave_AddArticle_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Fave_AddLink_Request(r *Fave_AddLink_Request) {
	(*r).Link = randString()
}

func TestVK_Fave_AddLink_Success(t *testing.T) {
	values := make(url.Values, 3)
	var req Fave_AddLink_Request
	fillRandomly_Fave_AddLink_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Base_Ok_Response
	fillRandomly_Base_Ok_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "fave.addLink", values, expectedJSON), token)
	resp, apiErr, err := vk.Fave_AddLink(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Fave_AddLink_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "fave.addLink", expectedJSON), "")
	resp, apiErr, err := vk.Fave_AddLink(context.Background(), Fave_AddLink_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Fave_AddLink_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Fave_AddLink(context.Background(), Fave_AddLink_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Fave_AddPage_Request(r *Fave_AddPage_Request) {
	(*r).UserId = new(int)
	*(*r).UserId = randInt()
	(*r).GroupId = new(int)
	*(*r).GroupId = randInt()
}

func TestVK_Fave_AddPage_Success(t *testing.T) {
	values := make(url.Values, 4)
	var req Fave_AddPage_Request
	fillRandomly_Fave_AddPage_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Base_Ok_Response
	fillRandomly_Base_Ok_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "fave.addPage", values, expectedJSON), token)
	resp, apiErr, err := vk.Fave_AddPage(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Fave_AddPage_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "fave.addPage", expectedJSON), "")
	resp, apiErr, err := vk.Fave_AddPage(context.Background(), Fave_AddPage_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Fave_AddPage_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Fave_AddPage(context.Background(), Fave_AddPage_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Fave_AddPost_Request(r *Fave_AddPost_Request) {
	(*r).OwnerId = randInt()
	(*r).Id = randInt()
	(*r).AccessKey = new(string)
	*(*r).AccessKey = randString()
}

func TestVK_Fave_AddPost_Success(t *testing.T) {
	values := make(url.Values, 5)
	var req Fave_AddPost_Request
	fillRandomly_Fave_AddPost_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Base_Ok_Response
	fillRandomly_Base_Ok_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "fave.addPost", values, expectedJSON), token)
	resp, apiErr, err := vk.Fave_AddPost(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Fave_AddPost_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "fave.addPost", expectedJSON), "")
	resp, apiErr, err := vk.Fave_AddPost(context.Background(), Fave_AddPost_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Fave_AddPost_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Fave_AddPost(context.Background(), Fave_AddPost_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Fave_AddProduct_Request(r *Fave_AddProduct_Request) {
	(*r).OwnerId = randInt()
	(*r).Id = randInt()
	(*r).AccessKey = new(string)
	*(*r).AccessKey = randString()
}

func TestVK_Fave_AddProduct_Success(t *testing.T) {
	values := make(url.Values, 5)
	var req Fave_AddProduct_Request
	fillRandomly_Fave_AddProduct_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Base_Ok_Response
	fillRandomly_Base_Ok_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "fave.addProduct", values, expectedJSON), token)
	resp, apiErr, err := vk.Fave_AddProduct(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Fave_AddProduct_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "fave.addProduct", expectedJSON), "")
	resp, apiErr, err := vk.Fave_AddProduct(context.Background(), Fave_AddProduct_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Fave_AddProduct_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Fave_AddProduct(context.Background(), Fave_AddProduct_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Fave_AddTag_Position(o *Fave_AddTag_Position) {
	switch randIntn(2) {
	case 0:
		*o = "back"
	case 1:
		*o = "front"
	}
}

func fillRandomly_Fave_AddTag_Request(r *Fave_AddTag_Request) {
	(*r).Name = new(string)
	*(*r).Name = randString()
	(*r).Position = new(Fave_AddTag_Position)
	fillRandomly_Fave_AddTag_Position((*r).Position)
}

func TestVK_Fave_AddTag_Success(t *testing.T) {
	values := make(url.Values, 4)
	var req Fave_AddTag_Request
	fillRandomly_Fave_AddTag_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Fave_AddTag_Response
	fillRandomly_Fave_AddTag_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "fave.addTag", values, expectedJSON), token)
	resp, apiErr, err := vk.Fave_AddTag(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Fave_AddTag_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "fave.addTag", expectedJSON), "")
	resp, apiErr, err := vk.Fave_AddTag(context.Background(), Fave_AddTag_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Fave_AddTag_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Fave_AddTag(context.Background(), Fave_AddTag_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Fave_AddVideo_Request(r *Fave_AddVideo_Request) {
	(*r).OwnerId = randInt()
	(*r).Id = randInt()
	(*r).AccessKey = new(string)
	*(*r).AccessKey = randString()
}

func TestVK_Fave_AddVideo_Success(t *testing.T) {
	values := make(url.Values, 5)
	var req Fave_AddVideo_Request
	fillRandomly_Fave_AddVideo_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Base_Ok_Response
	fillRandomly_Base_Ok_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "fave.addVideo", values, expectedJSON), token)
	resp, apiErr, err := vk.Fave_AddVideo(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Fave_AddVideo_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "fave.addVideo", expectedJSON), "")
	resp, apiErr, err := vk.Fave_AddVideo(context.Background(), Fave_AddVideo_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Fave_AddVideo_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Fave_AddVideo(context.Background(), Fave_AddVideo_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Fave_EditTag_Request(r *Fave_EditTag_Request) {
	(*r).Id = randInt()
	(*r).Name = randString()
}

func TestVK_Fave_EditTag_Success(t *testing.T) {
	values := make(url.Values, 4)
	var req Fave_EditTag_Request
	fillRandomly_Fave_EditTag_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Base_Ok_Response
	fillRandomly_Base_Ok_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "fave.editTag", values, expectedJSON), token)
	resp, apiErr, err := vk.Fave_EditTag(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Fave_EditTag_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "fave.editTag", expectedJSON), "")
	resp, apiErr, err := vk.Fave_EditTag(context.Background(), Fave_EditTag_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Fave_EditTag_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Fave_EditTag(context.Background(), Fave_EditTag_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Fave_Get_ItemType(o *Fave_Get_ItemType) {
	switch randIntn(10) {
	case 0:
		*o = "article"
	case 1:
		*o = "clip"
	case 2:
		*o = "link"
	case 3:
		*o = "narrative"
	case 4:
		*o = "page"
	case 5:
		*o = "podcast"
	case 6:
		*o = "post"
	case 7:
		*o = "product"
	case 8:
		*o = "video"
	case 9:
		*o = "youla_product"
	}
}

func fillRandomly_Fave_Get_Request(r *Fave_Get_Request) {
	(*r).ItemType = new(Fave_Get_ItemType)
	fillRandomly_Fave_Get_ItemType((*r).ItemType)
	(*r).TagId = new(int)
	*(*r).TagId = randInt()
	(*r).Offset = new(int)
	*(*r).Offset = randInt()
	(*r).Count = new(int)
	*(*r).Count = randInt()
	(*r).Fields = new([]Users_Fields)
	l0 := randIntn(maxArrayLength + 1)
	*(*r).Fields = make([]Users_Fields, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomly_Users_Fields(&(*(*r).Fields)[i0])
	}
	(*r).IsFromSnackbar = new(bool)
	*(*r).IsFromSnackbar = randBool()
}

func TestVK_Fave_Get_Success(t *testing.T) {
	values := make(url.Values, 9)
	var req Fave_Get_Request
	fillRandomly_Fave_Get_Request(&req)
	require.NoError(t, req.fillIn(values))
	setString(values, "extended", "0")
	var expected Fave_Get_Response
	fillRandomly_Fave_Get_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "fave.get", values, expectedJSON), token)
	resp, apiErr, err := vk.Fave_Get(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Fave_Get_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "fave.get", expectedJSON), "")
	resp, apiErr, err := vk.Fave_Get(context.Background(), Fave_Get_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Fave_Get_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Fave_Get(context.Background(), Fave_Get_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func TestVK_Fave_GetExtended_Success(t *testing.T) {
	values := make(url.Values, 9)
	var req Fave_Get_Request
	fillRandomly_Fave_Get_Request(&req)
	require.NoError(t, req.fillIn(values))
	setString(values, "extended", "1")
	var expected Fave_GetExtended_Response
	fillRandomly_Fave_GetExtended_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "fave.get", values, expectedJSON), token)
	resp, apiErr, err := vk.Fave_GetExtended(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Fave_GetExtended_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "fave.get", expectedJSON), "")
	resp, apiErr, err := vk.Fave_GetExtended(context.Background(), Fave_Get_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Fave_GetExtended_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Fave_GetExtended(context.Background(), Fave_Get_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Fave_GetPages_Type(o *Fave_GetPages_Type) {
	switch randIntn(3) {
	case 0:
		*o = "groups"
	case 1:
		*o = "hints"
	case 2:
		*o = "users"
	}
}

func fillRandomly_Fave_GetPages_Request(r *Fave_GetPages_Request) {
	(*r).Offset = new(int)
	*(*r).Offset = randInt()
	(*r).Count = new(int)
	*(*r).Count = randInt()
	(*r).Type = new(Fave_GetPages_Type)
	fillRandomly_Fave_GetPages_Type((*r).Type)
	(*r).Fields = new([]Base_UserGroupFields)
	l0 := randIntn(maxArrayLength + 1)
	*(*r).Fields = make([]Base_UserGroupFields, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomly_Base_UserGroupFields(&(*(*r).Fields)[i0])
	}
	(*r).TagId = new(int)
	*(*r).TagId = randInt()
}

func TestVK_Fave_GetPages_Success(t *testing.T) {
	values := make(url.Values, 7)
	var req Fave_GetPages_Request
	fillRandomly_Fave_GetPages_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Fave_GetPages_Response
	fillRandomly_Fave_GetPages_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "fave.getPages", values, expectedJSON), token)
	resp, apiErr, err := vk.Fave_GetPages(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Fave_GetPages_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "fave.getPages", expectedJSON), "")
	resp, apiErr, err := vk.Fave_GetPages(context.Background(), Fave_GetPages_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Fave_GetPages_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Fave_GetPages(context.Background(), Fave_GetPages_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func TestVK_Fave_GetTags_Success(t *testing.T) {
	values := make(url.Values, 2)
	var expected Fave_GetTags_Response
	fillRandomly_Fave_GetTags_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "fave.getTags", values, expectedJSON), token)
	resp, apiErr, err := vk.Fave_GetTags(context.Background())
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Fave_GetTags_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "fave.getTags", expectedJSON), "")
	resp, apiErr, err := vk.Fave_GetTags(context.Background())
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Fave_GetTags_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Fave_GetTags(context.Background())
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func TestVK_Fave_MarkSeen_Success(t *testing.T) {
	values := make(url.Values, 2)
	var expected Base_Bool_Response
	fillRandomly_Base_Bool_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "fave.markSeen", values, expectedJSON), token)
	resp, apiErr, err := vk.Fave_MarkSeen(context.Background())
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Fave_MarkSeen_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "fave.markSeen", expectedJSON), "")
	resp, apiErr, err := vk.Fave_MarkSeen(context.Background())
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Fave_MarkSeen_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Fave_MarkSeen(context.Background())
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Fave_RemoveArticle_Request(r *Fave_RemoveArticle_Request) {
	(*r).OwnerId = randInt()
	(*r).ArticleId = randInt()
}

func TestVK_Fave_RemoveArticle_Success(t *testing.T) {
	values := make(url.Values, 4)
	var req Fave_RemoveArticle_Request
	fillRandomly_Fave_RemoveArticle_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Base_Bool_Response
	fillRandomly_Base_Bool_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "fave.removeArticle", values, expectedJSON), token)
	resp, apiErr, err := vk.Fave_RemoveArticle(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Fave_RemoveArticle_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "fave.removeArticle", expectedJSON), "")
	resp, apiErr, err := vk.Fave_RemoveArticle(context.Background(), Fave_RemoveArticle_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Fave_RemoveArticle_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Fave_RemoveArticle(context.Background(), Fave_RemoveArticle_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Fave_RemoveLink_Request(r *Fave_RemoveLink_Request) {
	(*r).LinkId = new(string)
	*(*r).LinkId = randString()
	(*r).Link = new(string)
	*(*r).Link = randString()
}

func TestVK_Fave_RemoveLink_Success(t *testing.T) {
	values := make(url.Values, 4)
	var req Fave_RemoveLink_Request
	fillRandomly_Fave_RemoveLink_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Base_Ok_Response
	fillRandomly_Base_Ok_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "fave.removeLink", values, expectedJSON), token)
	resp, apiErr, err := vk.Fave_RemoveLink(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Fave_RemoveLink_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "fave.removeLink", expectedJSON), "")
	resp, apiErr, err := vk.Fave_RemoveLink(context.Background(), Fave_RemoveLink_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Fave_RemoveLink_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Fave_RemoveLink(context.Background(), Fave_RemoveLink_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Fave_RemovePage_Request(r *Fave_RemovePage_Request) {
	(*r).UserId = new(int)
	*(*r).UserId = randInt()
	(*r).GroupId = new(int)
	*(*r).GroupId = randInt()
}

func TestVK_Fave_RemovePage_Success(t *testing.T) {
	values := make(url.Values, 4)
	var req Fave_RemovePage_Request
	fillRandomly_Fave_RemovePage_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Base_Ok_Response
	fillRandomly_Base_Ok_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "fave.removePage", values, expectedJSON), token)
	resp, apiErr, err := vk.Fave_RemovePage(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Fave_RemovePage_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "fave.removePage", expectedJSON), "")
	resp, apiErr, err := vk.Fave_RemovePage(context.Background(), Fave_RemovePage_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Fave_RemovePage_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Fave_RemovePage(context.Background(), Fave_RemovePage_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Fave_RemovePost_Request(r *Fave_RemovePost_Request) {
	(*r).OwnerId = randInt()
	(*r).Id = randInt()
}

func TestVK_Fave_RemovePost_Success(t *testing.T) {
	values := make(url.Values, 4)
	var req Fave_RemovePost_Request
	fillRandomly_Fave_RemovePost_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Base_Ok_Response
	fillRandomly_Base_Ok_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "fave.removePost", values, expectedJSON), token)
	resp, apiErr, err := vk.Fave_RemovePost(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Fave_RemovePost_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "fave.removePost", expectedJSON), "")
	resp, apiErr, err := vk.Fave_RemovePost(context.Background(), Fave_RemovePost_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Fave_RemovePost_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Fave_RemovePost(context.Background(), Fave_RemovePost_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Fave_RemoveProduct_Request(r *Fave_RemoveProduct_Request) {
	(*r).OwnerId = randInt()
	(*r).Id = randInt()
}

func TestVK_Fave_RemoveProduct_Success(t *testing.T) {
	values := make(url.Values, 4)
	var req Fave_RemoveProduct_Request
	fillRandomly_Fave_RemoveProduct_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Base_Ok_Response
	fillRandomly_Base_Ok_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "fave.removeProduct", values, expectedJSON), token)
	resp, apiErr, err := vk.Fave_RemoveProduct(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Fave_RemoveProduct_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "fave.removeProduct", expectedJSON), "")
	resp, apiErr, err := vk.Fave_RemoveProduct(context.Background(), Fave_RemoveProduct_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Fave_RemoveProduct_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Fave_RemoveProduct(context.Background(), Fave_RemoveProduct_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Fave_RemoveTag_Request(r *Fave_RemoveTag_Request) {
	(*r).Id = randInt()
}

func TestVK_Fave_RemoveTag_Success(t *testing.T) {
	values := make(url.Values, 3)
	var req Fave_RemoveTag_Request
	fillRandomly_Fave_RemoveTag_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Base_Ok_Response
	fillRandomly_Base_Ok_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "fave.removeTag", values, expectedJSON), token)
	resp, apiErr, err := vk.Fave_RemoveTag(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Fave_RemoveTag_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "fave.removeTag", expectedJSON), "")
	resp, apiErr, err := vk.Fave_RemoveTag(context.Background(), Fave_RemoveTag_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Fave_RemoveTag_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Fave_RemoveTag(context.Background(), Fave_RemoveTag_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Fave_RemoveVideo_Request(r *Fave_RemoveVideo_Request) {
	(*r).OwnerId = randInt()
	(*r).Id = randInt()
}

func TestVK_Fave_RemoveVideo_Success(t *testing.T) {
	values := make(url.Values, 4)
	var req Fave_RemoveVideo_Request
	fillRandomly_Fave_RemoveVideo_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Base_Ok_Response
	fillRandomly_Base_Ok_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "fave.removeVideo", values, expectedJSON), token)
	resp, apiErr, err := vk.Fave_RemoveVideo(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Fave_RemoveVideo_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "fave.removeVideo", expectedJSON), "")
	resp, apiErr, err := vk.Fave_RemoveVideo(context.Background(), Fave_RemoveVideo_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Fave_RemoveVideo_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Fave_RemoveVideo(context.Background(), Fave_RemoveVideo_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Fave_ReorderTags_Request(r *Fave_ReorderTags_Request) {
	(*r).Ids = new([]int)
	l0 := randIntn(maxArrayLength + 1)
	*(*r).Ids = make([]int, l0)
	for i0 := 0; i0 < l0; i0++ {
		(*(*r).Ids)[i0] = randInt()
	}
}

func TestVK_Fave_ReorderTags_Success(t *testing.T) {
	values := make(url.Values, 3)
	var req Fave_ReorderTags_Request
	fillRandomly_Fave_ReorderTags_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Base_Ok_Response
	fillRandomly_Base_Ok_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "fave.reorderTags", values, expectedJSON), token)
	resp, apiErr, err := vk.Fave_ReorderTags(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Fave_ReorderTags_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "fave.reorderTags", expectedJSON), "")
	resp, apiErr, err := vk.Fave_ReorderTags(context.Background(), Fave_ReorderTags_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Fave_ReorderTags_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Fave_ReorderTags(context.Background(), Fave_ReorderTags_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Fave_SetPageTags_Request(r *Fave_SetPageTags_Request) {
	(*r).UserId = new(int)
	*(*r).UserId = randInt()
	(*r).GroupId = new(int)
	*(*r).GroupId = randInt()
	(*r).TagIds = new([]int)
	l0 := randIntn(maxArrayLength + 1)
	*(*r).TagIds = make([]int, l0)
	for i0 := 0; i0 < l0; i0++ {
		(*(*r).TagIds)[i0] = randInt()
	}
}

func TestVK_Fave_SetPageTags_Success(t *testing.T) {
	values := make(url.Values, 5)
	var req Fave_SetPageTags_Request
	fillRandomly_Fave_SetPageTags_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Base_Ok_Response
	fillRandomly_Base_Ok_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "fave.setPageTags", values, expectedJSON), token)
	resp, apiErr, err := vk.Fave_SetPageTags(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Fave_SetPageTags_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "fave.setPageTags", expectedJSON), "")
	resp, apiErr, err := vk.Fave_SetPageTags(context.Background(), Fave_SetPageTags_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Fave_SetPageTags_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Fave_SetPageTags(context.Background(), Fave_SetPageTags_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Fave_SetTags_ItemType(o *Fave_SetTags_ItemType) {
	switch randIntn(10) {
	case 0:
		*o = "article"
	case 1:
		*o = "clip"
	case 2:
		*o = "link"
	case 3:
		*o = "narrative"
	case 4:
		*o = "page"
	case 5:
		*o = "podcast"
	case 6:
		*o = "post"
	case 7:
		*o = "product"
	case 8:
		*o = "video"
	case 9:
		*o = "youla_product"
	}
}

func fillRandomly_Fave_SetTags_Request(r *Fave_SetTags_Request) {
	(*r).ItemType = new(Fave_SetTags_ItemType)
	fillRandomly_Fave_SetTags_ItemType((*r).ItemType)
	(*r).ItemOwnerId = new(int)
	*(*r).ItemOwnerId = randInt()
	(*r).ItemId = new(int)
	*(*r).ItemId = randInt()
	(*r).TagIds = new([]int)
	l0 := randIntn(maxArrayLength + 1)
	*(*r).TagIds = make([]int, l0)
	for i0 := 0; i0 < l0; i0++ {
		(*(*r).TagIds)[i0] = randInt()
	}
	(*r).LinkId = new(string)
	*(*r).LinkId = randString()
	(*r).LinkUrl = new(string)
	*(*r).LinkUrl = randString()
}

func TestVK_Fave_SetTags_Success(t *testing.T) {
	values := make(url.Values, 8)
	var req Fave_SetTags_Request
	fillRandomly_Fave_SetTags_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Base_Ok_Response
	fillRandomly_Base_Ok_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "fave.setTags", values, expectedJSON), token)
	resp, apiErr, err := vk.Fave_SetTags(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Fave_SetTags_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "fave.setTags", expectedJSON), "")
	resp, apiErr, err := vk.Fave_SetTags(context.Background(), Fave_SetTags_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Fave_SetTags_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Fave_SetTags(context.Background(), Fave_SetTags_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Fave_TrackPageInteraction_Request(r *Fave_TrackPageInteraction_Request) {
	(*r).UserId = new(int)
	*(*r).UserId = randInt()
	(*r).GroupId = new(int)
	*(*r).GroupId = randInt()
}

func TestVK_Fave_TrackPageInteraction_Success(t *testing.T) {
	values := make(url.Values, 4)
	var req Fave_TrackPageInteraction_Request
	fillRandomly_Fave_TrackPageInteraction_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Base_Ok_Response
	fillRandomly_Base_Ok_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "fave.trackPageInteraction", values, expectedJSON), token)
	resp, apiErr, err := vk.Fave_TrackPageInteraction(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Fave_TrackPageInteraction_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "fave.trackPageInteraction", expectedJSON), "")
	resp, apiErr, err := vk.Fave_TrackPageInteraction(context.Background(), Fave_TrackPageInteraction_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Fave_TrackPageInteraction_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Fave_TrackPageInteraction(context.Background(), Fave_TrackPageInteraction_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Friends_Add_Request(r *Friends_Add_Request) {
	(*r).UserId = new(int)
	*(*r).UserId = randInt()
	(*r).Text = new(string)
	*(*r).Text = randString()
	(*r).Follow = new(bool)
	*(*r).Follow = randBool()
}

func TestVK_Friends_Add_Success(t *testing.T) {
	values := make(url.Values, 5)
	var req Friends_Add_Request
	fillRandomly_Friends_Add_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Friends_Add_Response
	fillRandomly_Friends_Add_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "friends.add", values, expectedJSON), token)
	resp, apiErr, err := vk.Friends_Add(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Friends_Add_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "friends.add", expectedJSON), "")
	resp, apiErr, err := vk.Friends_Add(context.Background(), Friends_Add_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Friends_Add_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Friends_Add(context.Background(), Friends_Add_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Friends_AddList_Request(r *Friends_AddList_Request) {
	(*r).Name = randString()
	(*r).UserIds = new([]int)
	l0 := randIntn(maxArrayLength + 1)
	*(*r).UserIds = make([]int, l0)
	for i0 := 0; i0 < l0; i0++ {
		(*(*r).UserIds)[i0] = randInt()
	}
}

func TestVK_Friends_AddList_Success(t *testing.T) {
	values := make(url.Values, 4)
	var req Friends_AddList_Request
	fillRandomly_Friends_AddList_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Friends_AddList_Response
	fillRandomly_Friends_AddList_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "friends.addList", values, expectedJSON), token)
	resp, apiErr, err := vk.Friends_AddList(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Friends_AddList_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "friends.addList", expectedJSON), "")
	resp, apiErr, err := vk.Friends_AddList(context.Background(), Friends_AddList_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Friends_AddList_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Friends_AddList(context.Background(), Friends_AddList_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Friends_AreFriends_Request(r *Friends_AreFriends_Request) {
	(*r).UserIds = new([]int)
	l0 := randIntn(maxArrayLength + 1)
	*(*r).UserIds = make([]int, l0)
	for i0 := 0; i0 < l0; i0++ {
		(*(*r).UserIds)[i0] = randInt()
	}
	(*r).NeedSign = new(bool)
	*(*r).NeedSign = randBool()
}

func TestVK_Friends_AreFriends_Success(t *testing.T) {
	values := make(url.Values, 5)
	var req Friends_AreFriends_Request
	fillRandomly_Friends_AreFriends_Request(&req)
	require.NoError(t, req.fillIn(values))
	setString(values, "extended", "0")
	var expected Friends_AreFriends_Response
	fillRandomly_Friends_AreFriends_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "friends.areFriends", values, expectedJSON), token)
	resp, apiErr, err := vk.Friends_AreFriends(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Friends_AreFriends_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "friends.areFriends", expectedJSON), "")
	resp, apiErr, err := vk.Friends_AreFriends(context.Background(), Friends_AreFriends_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Friends_AreFriends_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Friends_AreFriends(context.Background(), Friends_AreFriends_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func TestVK_Friends_AreFriendsExtended_Success(t *testing.T) {
	values := make(url.Values, 5)
	var req Friends_AreFriends_Request
	fillRandomly_Friends_AreFriends_Request(&req)
	require.NoError(t, req.fillIn(values))
	setString(values, "extended", "1")
	var expected Friends_AreFriendsExtended_Response
	fillRandomly_Friends_AreFriendsExtended_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "friends.areFriends", values, expectedJSON), token)
	resp, apiErr, err := vk.Friends_AreFriendsExtended(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Friends_AreFriendsExtended_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "friends.areFriends", expectedJSON), "")
	resp, apiErr, err := vk.Friends_AreFriendsExtended(context.Background(), Friends_AreFriends_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Friends_AreFriendsExtended_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Friends_AreFriendsExtended(context.Background(), Friends_AreFriends_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Friends_Delete_Request(r *Friends_Delete_Request) {
	(*r).UserId = new(int)
	*(*r).UserId = randInt()
}

func TestVK_Friends_Delete_Success(t *testing.T) {
	values := make(url.Values, 3)
	var req Friends_Delete_Request
	fillRandomly_Friends_Delete_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Friends_Delete_Response
	fillRandomly_Friends_Delete_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "friends.delete", values, expectedJSON), token)
	resp, apiErr, err := vk.Friends_Delete(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Friends_Delete_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "friends.delete", expectedJSON), "")
	resp, apiErr, err := vk.Friends_Delete(context.Background(), Friends_Delete_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Friends_Delete_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Friends_Delete(context.Background(), Friends_Delete_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func TestVK_Friends_DeleteAllRequests_Success(t *testing.T) {
	values := make(url.Values, 2)
	var expected Base_Ok_Response
	fillRandomly_Base_Ok_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "friends.deleteAllRequests", values, expectedJSON), token)
	resp, apiErr, err := vk.Friends_DeleteAllRequests(context.Background())
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Friends_DeleteAllRequests_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "friends.deleteAllRequests", expectedJSON), "")
	resp, apiErr, err := vk.Friends_DeleteAllRequests(context.Background())
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Friends_DeleteAllRequests_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Friends_DeleteAllRequests(context.Background())
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Friends_DeleteList_Request(r *Friends_DeleteList_Request) {
	(*r).ListId = randInt()
}

func TestVK_Friends_DeleteList_Success(t *testing.T) {
	values := make(url.Values, 3)
	var req Friends_DeleteList_Request
	fillRandomly_Friends_DeleteList_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Base_Ok_Response
	fillRandomly_Base_Ok_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "friends.deleteList", values, expectedJSON), token)
	resp, apiErr, err := vk.Friends_DeleteList(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Friends_DeleteList_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "friends.deleteList", expectedJSON), "")
	resp, apiErr, err := vk.Friends_DeleteList(context.Background(), Friends_DeleteList_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Friends_DeleteList_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Friends_DeleteList(context.Background(), Friends_DeleteList_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Friends_Edit_Request(r *Friends_Edit_Request) {
	(*r).UserId = randInt()
	(*r).ListIds = new([]int)
	l0 := randIntn(maxArrayLength + 1)
	*(*r).ListIds = make([]int, l0)
	for i0 := 0; i0 < l0; i0++ {
		(*(*r).ListIds)[i0] = randInt()
	}
}

func TestVK_Friends_Edit_Success(t *testing.T) {
	values := make(url.Values, 4)
	var req Friends_Edit_Request
	fillRandomly_Friends_Edit_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Base_Ok_Response
	fillRandomly_Base_Ok_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "friends.edit", values, expectedJSON), token)
	resp, apiErr, err := vk.Friends_Edit(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Friends_Edit_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "friends.edit", expectedJSON), "")
	resp, apiErr, err := vk.Friends_Edit(context.Background(), Friends_Edit_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Friends_Edit_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Friends_Edit(context.Background(), Friends_Edit_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Friends_EditList_Request(r *Friends_EditList_Request) {
	(*r).Name = new(string)
	*(*r).Name = randString()
	(*r).ListId = randInt()
	(*r).UserIds = new([]int)
	l0 := randIntn(maxArrayLength + 1)
	*(*r).UserIds = make([]int, l0)
	for i0 := 0; i0 < l0; i0++ {
		(*(*r).UserIds)[i0] = randInt()
	}
	(*r).AddUserIds = new([]int)
	l0 = randIntn(maxArrayLength + 1)
	*(*r).AddUserIds = make([]int, l0)
	for i0 := 0; i0 < l0; i0++ {
		(*(*r).AddUserIds)[i0] = randInt()
	}
	(*r).DeleteUserIds = new([]int)
	l0 = randIntn(maxArrayLength + 1)
	*(*r).DeleteUserIds = make([]int, l0)
	for i0 := 0; i0 < l0; i0++ {
		(*(*r).DeleteUserIds)[i0] = randInt()
	}
}

func TestVK_Friends_EditList_Success(t *testing.T) {
	values := make(url.Values, 7)
	var req Friends_EditList_Request
	fillRandomly_Friends_EditList_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Base_Ok_Response
	fillRandomly_Base_Ok_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "friends.editList", values, expectedJSON), token)
	resp, apiErr, err := vk.Friends_EditList(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Friends_EditList_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "friends.editList", expectedJSON), "")
	resp, apiErr, err := vk.Friends_EditList(context.Background(), Friends_EditList_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Friends_EditList_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Friends_EditList(context.Background(), Friends_EditList_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Friends_Get_Order(o *Friends_Get_Order) {
	switch randIntn(5) {
	case 0:
		*o = "hints"
	case 1:
		*o = "random"
	case 2:
		*o = "mobile"
	case 3:
		*o = "name"
	case 4:
		*o = "smart"
	}
}

func fillRandomly_Friends_Get_NameCase(o *Friends_Get_NameCase) {
	switch randIntn(6) {
	case 0:
		*o = "nom"
	case 1:
		*o = "gen"
	case 2:
		*o = "dat"
	case 3:
		*o = "acc"
	case 4:
		*o = "ins"
	case 5:
		*o = "abl"
	}
}

func fillRandomly_Friends_Get_Request(r *Friends_Get_Request) {
	(*r).UserId = new(int)
	*(*r).UserId = randInt()
	(*r).Order = new(Friends_Get_Order)
	fillRandomly_Friends_Get_Order((*r).Order)
	(*r).ListId = new(int)
	*(*r).ListId = randInt()
	(*r).Count = new(int)
	*(*r).Count = randInt()
	(*r).Offset = new(int)
	*(*r).Offset = randInt()
	(*r).Fields = new([]Users_Fields)
	l0 := randIntn(maxArrayLength + 1)
	*(*r).Fields = make([]Users_Fields, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomly_Users_Fields(&(*(*r).Fields)[i0])
	}
	(*r).NameCase = new(Friends_Get_NameCase)
	fillRandomly_Friends_Get_NameCase((*r).NameCase)
	(*r).Ref = new(string)
	*(*r).Ref = randString()
}

func TestVK_Friends_Get_Success(t *testing.T) {
	values := make(url.Values, 10)
	var req Friends_Get_Request
	fillRandomly_Friends_Get_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Friends_Get_Response
	fillRandomly_Friends_Get_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "friends.get", values, expectedJSON), token)
	resp, apiErr, err := vk.Friends_Get(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Friends_Get_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "friends.get", expectedJSON), "")
	resp, apiErr, err := vk.Friends_Get(context.Background(), Friends_Get_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Friends_Get_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Friends_Get(context.Background(), Friends_Get_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func TestVK_Friends_GetAppUsers_Success(t *testing.T) {
	values := make(url.Values, 2)
	var expected Friends_GetAppUsers_Response
	fillRandomly_Friends_GetAppUsers_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "friends.getAppUsers", values, expectedJSON), token)
	resp, apiErr, err := vk.Friends_GetAppUsers(context.Background())
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Friends_GetAppUsers_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "friends.getAppUsers", expectedJSON), "")
	resp, apiErr, err := vk.Friends_GetAppUsers(context.Background())
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Friends_GetAppUsers_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Friends_GetAppUsers(context.Background())
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Friends_GetByPhones_Request(r *Friends_GetByPhones_Request) {
	(*r).Phones = new([]string)
	l0 := randIntn(maxArrayLength + 1)
	*(*r).Phones = make([]string, l0)
	for i0 := 0; i0 < l0; i0++ {
		(*(*r).Phones)[i0] = randString()
	}
	(*r).Fields = new([]Users_Fields)
	l0 = randIntn(maxArrayLength + 1)
	*(*r).Fields = make([]Users_Fields, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomly_Users_Fields(&(*(*r).Fields)[i0])
	}
}

func TestVK_Friends_GetByPhones_Success(t *testing.T) {
	values := make(url.Values, 4)
	var req Friends_GetByPhones_Request
	fillRandomly_Friends_GetByPhones_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Friends_GetByPhones_Response
	fillRandomly_Friends_GetByPhones_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "friends.getByPhones", values, expectedJSON), token)
	resp, apiErr, err := vk.Friends_GetByPhones(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Friends_GetByPhones_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "friends.getByPhones", expectedJSON), "")
	resp, apiErr, err := vk.Friends_GetByPhones(context.Background(), Friends_GetByPhones_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Friends_GetByPhones_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Friends_GetByPhones(context.Background(), Friends_GetByPhones_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Friends_GetLists_Request(r *Friends_GetLists_Request) {
	(*r).UserId = new(int)
	*(*r).UserId = randInt()
	(*r).ReturnSystem = new(bool)
	*(*r).ReturnSystem = randBool()
}

func TestVK_Friends_GetLists_Success(t *testing.T) {
	values := make(url.Values, 4)
	var req Friends_GetLists_Request
	fillRandomly_Friends_GetLists_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Friends_GetLists_Response
	fillRandomly_Friends_GetLists_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "friends.getLists", values, expectedJSON), token)
	resp, apiErr, err := vk.Friends_GetLists(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Friends_GetLists_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "friends.getLists", expectedJSON), "")
	resp, apiErr, err := vk.Friends_GetLists(context.Background(), Friends_GetLists_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Friends_GetLists_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Friends_GetLists(context.Background(), Friends_GetLists_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Friends_GetMutual_Request(r *Friends_GetMutual_Request) {
	(*r).SourceUid = new(int)
	*(*r).SourceUid = randInt()
	(*r).TargetUid = new(int)
	*(*r).TargetUid = randInt()
	(*r).Order = new(string)
	*(*r).Order = randString()
	(*r).Count = new(int)
	*(*r).Count = randInt()
	(*r).Offset = new(int)
	*(*r).Offset = randInt()
}

func TestVK_Friends_GetMutual_Success(t *testing.T) {
	values := make(url.Values, 7)
	var req Friends_GetMutual_Request
	fillRandomly_Friends_GetMutual_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Friends_GetMutual_Response
	fillRandomly_Friends_GetMutual_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "friends.getMutual", values, expectedJSON), token)
	resp, apiErr, err := vk.Friends_GetMutual(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Friends_GetMutual_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "friends.getMutual", expectedJSON), "")
	resp, apiErr, err := vk.Friends_GetMutual(context.Background(), Friends_GetMutual_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Friends_GetMutual_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Friends_GetMutual(context.Background(), Friends_GetMutual_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Friends_GetMutualTargetUIDs_Request(r *Friends_GetMutualTargetUIDs_Request) {
	(*r).SourceUid = new(int)
	*(*r).SourceUid = randInt()
	(*r).TargetUids = new([]int)
	l0 := randIntn(maxArrayLength + 1)
	*(*r).TargetUids = make([]int, l0)
	for i0 := 0; i0 < l0; i0++ {
		(*(*r).TargetUids)[i0] = randInt()
	}
	(*r).Order = new(string)
	*(*r).Order = randString()
	(*r).Count = new(int)
	*(*r).Count = randInt()
	(*r).Offset = new(int)
	*(*r).Offset = randInt()
}

func TestVK_Friends_GetMutualTargetUIDs_Success(t *testing.T) {
	values := make(url.Values, 7)
	var req Friends_GetMutualTargetUIDs_Request
	fillRandomly_Friends_GetMutualTargetUIDs_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Friends_GetMutualTargetUids_Response
	fillRandomly_Friends_GetMutualTargetUids_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "friends.getMutual", values, expectedJSON), token)
	resp, apiErr, err := vk.Friends_GetMutualTargetUIDs(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Friends_GetMutualTargetUIDs_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "friends.getMutual", expectedJSON), "")
	resp, apiErr, err := vk.Friends_GetMutualTargetUIDs(context.Background(), Friends_GetMutualTargetUIDs_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Friends_GetMutualTargetUIDs_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Friends_GetMutualTargetUIDs(context.Background(), Friends_GetMutualTargetUIDs_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Friends_GetOnline_Request(r *Friends_GetOnline_Request) {
	(*r).UserId = new(int)
	*(*r).UserId = randInt()
	(*r).ListId = new(int)
	*(*r).ListId = randInt()
	(*r).Order = new(string)
	*(*r).Order = randString()
	(*r).Count = new(int)
	*(*r).Count = randInt()
	(*r).Offset = new(int)
	*(*r).Offset = randInt()
}

func TestVK_Friends_GetOnline_Success(t *testing.T) {
	values := make(url.Values, 8)
	var req Friends_GetOnline_Request
	fillRandomly_Friends_GetOnline_Request(&req)
	require.NoError(t, req.fillIn(values))
	setString(values, "online_mobile", "0")
	var expected Friends_GetOnline_Response
	fillRandomly_Friends_GetOnline_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "friends.getOnline", values, expectedJSON), token)
	resp, apiErr, err := vk.Friends_GetOnline(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Friends_GetOnline_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "friends.getOnline", expectedJSON), "")
	resp, apiErr, err := vk.Friends_GetOnline(context.Background(), Friends_GetOnline_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Friends_GetOnline_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Friends_GetOnline(context.Background(), Friends_GetOnline_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func TestVK_Friends_GetOnlineOnlineMobile_Success(t *testing.T) {
	values := make(url.Values, 8)
	var req Friends_GetOnline_Request
	fillRandomly_Friends_GetOnline_Request(&req)
	require.NoError(t, req.fillIn(values))
	setString(values, "online_mobile", "1")
	var expected Friends_GetOnlineOnlineMobile_Response
	fillRandomly_Friends_GetOnlineOnlineMobile_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "friends.getOnline", values, expectedJSON), token)
	resp, apiErr, err := vk.Friends_GetOnlineOnlineMobile(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Friends_GetOnlineOnlineMobile_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "friends.getOnline", expectedJSON), "")
	resp, apiErr, err := vk.Friends_GetOnlineOnlineMobile(context.Background(), Friends_GetOnline_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Friends_GetOnlineOnlineMobile_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Friends_GetOnlineOnlineMobile(context.Background(), Friends_GetOnline_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Friends_GetRecent_Request(r *Friends_GetRecent_Request) {
	(*r).Count = new(int)
	*(*r).Count = randInt()
}

func TestVK_Friends_GetRecent_Success(t *testing.T) {
	values := make(url.Values, 3)
	var req Friends_GetRecent_Request
	fillRandomly_Friends_GetRecent_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Friends_GetRecent_Response
	fillRandomly_Friends_GetRecent_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "friends.getRecent", values, expectedJSON), token)
	resp, apiErr, err := vk.Friends_GetRecent(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Friends_GetRecent_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "friends.getRecent", expectedJSON), "")
	resp, apiErr, err := vk.Friends_GetRecent(context.Background(), Friends_GetRecent_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Friends_GetRecent_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Friends_GetRecent(context.Background(), Friends_GetRecent_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Friends_GetRequests_Sort(o *Friends_GetRequests_Sort) {
	switch randIntn(3) {
	case 0:
		*o = 0
	case 1:
		*o = 1
	case 2:
		*o = 2
	}
}

func fillRandomly_Friends_GetRequests_Request(r *Friends_GetRequests_Request) {
	(*r).Offset = new(int)
	*(*r).Offset = randInt()
	(*r).Count = new(int)
	*(*r).Count = randInt()
	(*r).NeedMutual = new(bool)
	*(*r).NeedMutual = randBool()
	(*r).Out = new(bool)
	*(*r).Out = randBool()
	(*r).Sort = new(Friends_GetRequests_Sort)
	fillRandomly_Friends_GetRequests_Sort((*r).Sort)
	(*r).NeedViewed = new(bool)
	*(*r).NeedViewed = randBool()
	(*r).Suggested = new(bool)
	*(*r).Suggested = randBool()
	(*r).Ref = new(string)
	*(*r).Ref = randString()
	(*r).Fields = new([]Users_Fields)
	l0 := randIntn(maxArrayLength + 1)
	*(*r).Fields = make([]Users_Fields, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomly_Users_Fields(&(*(*r).Fields)[i0])
	}
}

func TestVK_Friends_GetRequests_Success(t *testing.T) {
	values := make(url.Values, 12)
	var req Friends_GetRequests_Request
	fillRandomly_Friends_GetRequests_Request(&req)
	require.NoError(t, req.fillIn(values))
	setString(values, "extended", "0")
	var expected Friends_GetRequests_Response
	fillRandomly_Friends_GetRequests_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "friends.getRequests", values, expectedJSON), token)
	resp, apiErr, err := vk.Friends_GetRequests(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Friends_GetRequests_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "friends.getRequests", expectedJSON), "")
	resp, apiErr, err := vk.Friends_GetRequests(context.Background(), Friends_GetRequests_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Friends_GetRequests_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Friends_GetRequests(context.Background(), Friends_GetRequests_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func TestVK_Friends_GetRequestsExtended_Success(t *testing.T) {
	values := make(url.Values, 12)
	var req Friends_GetRequests_Request
	fillRandomly_Friends_GetRequests_Request(&req)
	require.NoError(t, req.fillIn(values))
	setString(values, "extended", "1")
	var expected Friends_GetRequestsExtended_Response
	fillRandomly_Friends_GetRequestsExtended_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "friends.getRequests", values, expectedJSON), token)
	resp, apiErr, err := vk.Friends_GetRequestsExtended(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Friends_GetRequestsExtended_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "friends.getRequests", expectedJSON), "")
	resp, apiErr, err := vk.Friends_GetRequestsExtended(context.Background(), Friends_GetRequests_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Friends_GetRequestsExtended_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Friends_GetRequestsExtended(context.Background(), Friends_GetRequests_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Friends_GetSuggestions_Filter(o *Friends_GetSuggestions_Filter) {
	switch randIntn(3) {
	case 0:
		*o = "mutual"
	case 1:
		*o = "contacts"
	case 2:
		*o = "mutual_contacts"
	}
}

func fillRandomly_Friends_GetSuggestions_NameCase(o *Friends_GetSuggestions_NameCase) {
	switch randIntn(6) {
	case 0:
		*o = "nom"
	case 1:
		*o = "gen"
	case 2:
		*o = "dat"
	case 3:
		*o = "acc"
	case 4:
		*o = "ins"
	case 5:
		*o = "abl"
	}
}

func fillRandomly_Friends_GetSuggestions_Request(r *Friends_GetSuggestions_Request) {
	(*r).Filter = new([]Friends_GetSuggestions_Filter)
	l0 := randIntn(maxArrayLength + 1)
	*(*r).Filter = make([]Friends_GetSuggestions_Filter, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomly_Friends_GetSuggestions_Filter(&(*(*r).Filter)[i0])
	}
	(*r).Count = new(int)
	*(*r).Count = randInt()
	(*r).Offset = new(int)
	*(*r).Offset = randInt()
	(*r).Fields = new([]Users_Fields)
	l0 = randIntn(maxArrayLength + 1)
	*(*r).Fields = make([]Users_Fields, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomly_Users_Fields(&(*(*r).Fields)[i0])
	}
	(*r).NameCase = new(Friends_GetSuggestions_NameCase)
	fillRandomly_Friends_GetSuggestions_NameCase((*r).NameCase)
}

func TestVK_Friends_GetSuggestions_Success(t *testing.T) {
	values := make(url.Values, 7)
	var req Friends_GetSuggestions_Request
	fillRandomly_Friends_GetSuggestions_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Friends_GetSuggestions_Response
	fillRandomly_Friends_GetSuggestions_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "friends.getSuggestions", values, expectedJSON), token)
	resp, apiErr, err := vk.Friends_GetSuggestions(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Friends_GetSuggestions_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "friends.getSuggestions", expectedJSON), "")
	resp, apiErr, err := vk.Friends_GetSuggestions(context.Background(), Friends_GetSuggestions_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Friends_GetSuggestions_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Friends_GetSuggestions(context.Background(), Friends_GetSuggestions_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Friends_Search_NameCase(o *Friends_Search_NameCase) {
	switch randIntn(6) {
	case 0:
		*o = "Nom"
	case 1:
		*o = "Gen"
	case 2:
		*o = "Dat"
	case 3:
		*o = "Acc"
	case 4:
		*o = "Ins"
	case 5:
		*o = "Abl"
	}
}

func fillRandomly_Friends_Search_Request(r *Friends_Search_Request) {
	(*r).UserId = new(int)
	*(*r).UserId = randInt()
	(*r).Q = new(string)
	*(*r).Q = randString()
	(*r).Fields = new([]Users_Fields)
	l0 := randIntn(maxArrayLength + 1)
	*(*r).Fields = make([]Users_Fields, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomly_Users_Fields(&(*(*r).Fields)[i0])
	}
	(*r).NameCase = new(Friends_Search_NameCase)
	fillRandomly_Friends_Search_NameCase((*r).NameCase)
	(*r).Offset = new(int)
	*(*r).Offset = randInt()
	(*r).Count = new(int)
	*(*r).Count = randInt()
}

func TestVK_Friends_Search_Success(t *testing.T) {
	values := make(url.Values, 8)
	var req Friends_Search_Request
	fillRandomly_Friends_Search_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Friends_Search_Response
	fillRandomly_Friends_Search_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "friends.search", values, expectedJSON), token)
	resp, apiErr, err := vk.Friends_Search(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Friends_Search_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "friends.search", expectedJSON), "")
	resp, apiErr, err := vk.Friends_Search(context.Background(), Friends_Search_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Friends_Search_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Friends_Search(context.Background(), Friends_Search_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Gifts_Get_Request(r *Gifts_Get_Request) {
	(*r).UserId = new(int)
	*(*r).UserId = randInt()
	(*r).Count = new(int)
	*(*r).Count = randInt()
	(*r).Offset = new(int)
	*(*r).Offset = randInt()
}

func TestVK_Gifts_Get_Success(t *testing.T) {
	values := make(url.Values, 5)
	var req Gifts_Get_Request
	fillRandomly_Gifts_Get_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Gifts_Get_Response
	fillRandomly_Gifts_Get_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "gifts.get", values, expectedJSON), token)
	resp, apiErr, err := vk.Gifts_Get(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Gifts_Get_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "gifts.get", expectedJSON), "")
	resp, apiErr, err := vk.Gifts_Get(context.Background(), Gifts_Get_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Gifts_Get_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Gifts_Get(context.Background(), Gifts_Get_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Groups_AddAddress_Request(r *Groups_AddAddress_Request) {
	(*r).GroupId = randInt()
	(*r).Title = randString()
	(*r).Address = randString()
	(*r).AdditionalAddress = new(string)
	*(*r).AdditionalAddress = randString()
	(*r).CountryId = randInt()
	(*r).CityId = randInt()
	(*r).MetroId = new(int)
	*(*r).MetroId = randInt()
	(*r).Latitude = randFloat()
	(*r).Longitude = randFloat()
	(*r).Phone = new(string)
	*(*r).Phone = randString()
	(*r).WorkInfoStatus = new(Groups_AddressWorkInfoStatus)
	fillRandomly_Groups_AddressWorkInfoStatus((*r).WorkInfoStatus)
	(*r).Timetable = new(string)
	*(*r).Timetable = randString()
	(*r).IsMainAddress = new(bool)
	*(*r).IsMainAddress = randBool()
}

func TestVK_Groups_AddAddress_Success(t *testing.T) {
	values := make(url.Values, 15)
	var req Groups_AddAddress_Request
	fillRandomly_Groups_AddAddress_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Groups_AddAddress_Response
	fillRandomly_Groups_AddAddress_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "groups.addAddress", values, expectedJSON), token)
	resp, apiErr, err := vk.Groups_AddAddress(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Groups_AddAddress_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "groups.addAddress", expectedJSON), "")
	resp, apiErr, err := vk.Groups_AddAddress(context.Background(), Groups_AddAddress_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Groups_AddAddress_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Groups_AddAddress(context.Background(), Groups_AddAddress_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Groups_AddCallbackServer_Request(r *Groups_AddCallbackServer_Request) {
	(*r).GroupId = randInt()
	(*r).Url = randString()
	(*r).Title = randString()
	(*r).SecretKey = new(string)
	*(*r).SecretKey = randString()
}

func TestVK_Groups_AddCallbackServer_Success(t *testing.T) {
	values := make(url.Values, 6)
	var req Groups_AddCallbackServer_Request
	fillRandomly_Groups_AddCallbackServer_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Groups_AddCallbackServer_Response
	fillRandomly_Groups_AddCallbackServer_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "groups.addCallbackServer", values, expectedJSON), token)
	resp, apiErr, err := vk.Groups_AddCallbackServer(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Groups_AddCallbackServer_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "groups.addCallbackServer", expectedJSON), "")
	resp, apiErr, err := vk.Groups_AddCallbackServer(context.Background(), Groups_AddCallbackServer_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Groups_AddCallbackServer_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Groups_AddCallbackServer(context.Background(), Groups_AddCallbackServer_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Groups_AddLink_Request(r *Groups_AddLink_Request) {
	(*r).GroupId = randInt()
	(*r).Link = randString()
	(*r).Text = new(string)
	*(*r).Text = randString()
}

func TestVK_Groups_AddLink_Success(t *testing.T) {
	values := make(url.Values, 5)
	var req Groups_AddLink_Request
	fillRandomly_Groups_AddLink_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Groups_AddLink_Response
	fillRandomly_Groups_AddLink_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "groups.addLink", values, expectedJSON), token)
	resp, apiErr, err := vk.Groups_AddLink(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Groups_AddLink_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "groups.addLink", expectedJSON), "")
	resp, apiErr, err := vk.Groups_AddLink(context.Background(), Groups_AddLink_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Groups_AddLink_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Groups_AddLink(context.Background(), Groups_AddLink_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Groups_ApproveRequest_Request(r *Groups_ApproveRequest_Request) {
	(*r).GroupId = randInt()
	(*r).UserId = randInt()
}

func TestVK_Groups_ApproveRequest_Success(t *testing.T) {
	values := make(url.Values, 4)
	var req Groups_ApproveRequest_Request
	fillRandomly_Groups_ApproveRequest_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Base_Ok_Response
	fillRandomly_Base_Ok_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "groups.approveRequest", values, expectedJSON), token)
	resp, apiErr, err := vk.Groups_ApproveRequest(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Groups_ApproveRequest_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "groups.approveRequest", expectedJSON), "")
	resp, apiErr, err := vk.Groups_ApproveRequest(context.Background(), Groups_ApproveRequest_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Groups_ApproveRequest_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Groups_ApproveRequest(context.Background(), Groups_ApproveRequest_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Groups_Ban_Request(r *Groups_Ban_Request) {
	(*r).GroupId = randInt()
	(*r).OwnerId = new(int)
	*(*r).OwnerId = randInt()
	(*r).EndDate = new(int)
	*(*r).EndDate = randInt()
	(*r).Reason = new(int)
	*(*r).Reason = randInt()
	(*r).Comment = new(string)
	*(*r).Comment = randString()
	(*r).CommentVisible = new(bool)
	*(*r).CommentVisible = randBool()
}

func TestVK_Groups_Ban_Success(t *testing.T) {
	values := make(url.Values, 8)
	var req Groups_Ban_Request
	fillRandomly_Groups_Ban_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Base_Ok_Response
	fillRandomly_Base_Ok_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "groups.ban", values, expectedJSON), token)
	resp, apiErr, err := vk.Groups_Ban(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Groups_Ban_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "groups.ban", expectedJSON), "")
	resp, apiErr, err := vk.Groups_Ban(context.Background(), Groups_Ban_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Groups_Ban_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Groups_Ban(context.Background(), Groups_Ban_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Groups_Create_Type(o *Groups_Create_Type) {
	switch randIntn(3) {
	case 0:
		*o = "event"
	case 1:
		*o = "group"
	case 2:
		*o = "public"
	}
}

func fillRandomly_Groups_Create_Subtype(o *Groups_Create_Subtype) {
	switch randIntn(4) {
	case 0:
		*o = 1
	case 1:
		*o = 2
	case 2:
		*o = 3
	case 3:
		*o = 4
	}
}

func fillRandomly_Groups_Create_Request(r *Groups_Create_Request) {
	(*r).Title = randString()
	(*r).Description = new(string)
	*(*r).Description = randString()
	(*r).Type = new(Groups_Create_Type)
	fillRandomly_Groups_Create_Type((*r).Type)
	(*r).PublicCategory = new(int)
	*(*r).PublicCategory = randInt()
	(*r).PublicSubcategory = new(int)
	*(*r).PublicSubcategory = randInt()
	(*r).Subtype = new(Groups_Create_Subtype)
	fillRandomly_Groups_Create_Subtype((*r).Subtype)
}

func TestVK_Groups_Create_Success(t *testing.T) {
	values := make(url.Values, 8)
	var req Groups_Create_Request
	fillRandomly_Groups_Create_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Groups_Create_Response
	fillRandomly_Groups_Create_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "groups.create", values, expectedJSON), token)
	resp, apiErr, err := vk.Groups_Create(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Groups_Create_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "groups.create", expectedJSON), "")
	resp, apiErr, err := vk.Groups_Create(context.Background(), Groups_Create_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Groups_Create_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Groups_Create(context.Background(), Groups_Create_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Groups_DeleteAddress_Request(r *Groups_DeleteAddress_Request) {
	(*r).GroupId = randInt()
	(*r).AddressId = randInt()
}

func TestVK_Groups_DeleteAddress_Success(t *testing.T) {
	values := make(url.Values, 4)
	var req Groups_DeleteAddress_Request
	fillRandomly_Groups_DeleteAddress_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Base_Ok_Response
	fillRandomly_Base_Ok_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "groups.deleteAddress", values, expectedJSON), token)
	resp, apiErr, err := vk.Groups_DeleteAddress(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Groups_DeleteAddress_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "groups.deleteAddress", expectedJSON), "")
	resp, apiErr, err := vk.Groups_DeleteAddress(context.Background(), Groups_DeleteAddress_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Groups_DeleteAddress_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Groups_DeleteAddress(context.Background(), Groups_DeleteAddress_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Groups_DeleteCallbackServer_Request(r *Groups_DeleteCallbackServer_Request) {
	(*r).GroupId = randInt()
	(*r).ServerId = randInt()
}

func TestVK_Groups_DeleteCallbackServer_Success(t *testing.T) {
	values := make(url.Values, 4)
	var req Groups_DeleteCallbackServer_Request
	fillRandomly_Groups_DeleteCallbackServer_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Base_Ok_Response
	fillRandomly_Base_Ok_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "groups.deleteCallbackServer", values, expectedJSON), token)
	resp, apiErr, err := vk.Groups_DeleteCallbackServer(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Groups_DeleteCallbackServer_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "groups.deleteCallbackServer", expectedJSON), "")
	resp, apiErr, err := vk.Groups_DeleteCallbackServer(context.Background(), Groups_DeleteCallbackServer_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Groups_DeleteCallbackServer_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Groups_DeleteCallbackServer(context.Background(), Groups_DeleteCallbackServer_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Groups_DeleteLink_Request(r *Groups_DeleteLink_Request) {
	(*r).GroupId = randInt()
	(*r).LinkId = randInt()
}

func TestVK_Groups_DeleteLink_Success(t *testing.T) {
	values := make(url.Values, 4)
	var req Groups_DeleteLink_Request
	fillRandomly_Groups_DeleteLink_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Base_Ok_Response
	fillRandomly_Base_Ok_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "groups.deleteLink", values, expectedJSON), token)
	resp, apiErr, err := vk.Groups_DeleteLink(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Groups_DeleteLink_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "groups.deleteLink", expectedJSON), "")
	resp, apiErr, err := vk.Groups_DeleteLink(context.Background(), Groups_DeleteLink_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Groups_DeleteLink_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Groups_DeleteLink(context.Background(), Groups_DeleteLink_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Groups_DisableOnline_Request(r *Groups_DisableOnline_Request) {
	(*r).GroupId = randInt()
}

func TestVK_Groups_DisableOnline_Success(t *testing.T) {
	values := make(url.Values, 3)
	var req Groups_DisableOnline_Request
	fillRandomly_Groups_DisableOnline_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Base_Ok_Response
	fillRandomly_Base_Ok_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "groups.disableOnline", values, expectedJSON), token)
	resp, apiErr, err := vk.Groups_DisableOnline(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Groups_DisableOnline_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "groups.disableOnline", expectedJSON), "")
	resp, apiErr, err := vk.Groups_DisableOnline(context.Background(), Groups_DisableOnline_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Groups_DisableOnline_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Groups_DisableOnline(context.Background(), Groups_DisableOnline_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Groups_Edit_Request(r *Groups_Edit_Request) {
	(*r).GroupId = randInt()
	(*r).Title = new(string)
	*(*r).Title = randString()
	(*r).Description = new(string)
	*(*r).Description = randString()
	(*r).ScreenName = new(string)
	*(*r).ScreenName = randString()
	(*r).Access = new(Groups_GroupAccess)
	fillRandomly_Groups_GroupAccess((*r).Access)
	(*r).Website = new(string)
	*(*r).Website = randString()
	(*r).Subject = new(Groups_GroupSubject)
	fillRandomly_Groups_GroupSubject((*r).Subject)
	(*r).Email = new(string)
	*(*r).Email = randString()
	(*r).Phone = new(string)
	*(*r).Phone = randString()
	(*r).Rss = new(string)
	*(*r).Rss = randString()
	(*r).EventStartDate = new(int)
	*(*r).EventStartDate = randInt()
	(*r).EventFinishDate = new(int)
	*(*r).EventFinishDate = randInt()
	(*r).EventGroupId = new(int)
	*(*r).EventGroupId = randInt()
	(*r).PublicCategory = new(int)
	*(*r).PublicCategory = randInt()
	(*r).PublicSubcategory = new(int)
	*(*r).PublicSubcategory = randInt()
	(*r).PublicDate = new(string)
	*(*r).PublicDate = randString()
	(*r).Wall = new(Groups_GroupWall)
	fillRandomly_Groups_GroupWall((*r).Wall)
	(*r).Topics = new(Groups_GroupTopics)
	fillRandomly_Groups_GroupTopics((*r).Topics)
	(*r).Photos = new(Groups_GroupPhotos)
	fillRandomly_Groups_GroupPhotos((*r).Photos)
	(*r).Video = new(Groups_GroupVideo)
	fillRandomly_Groups_GroupVideo((*r).Video)
	(*r).Audio = new(Groups_GroupAudio)
	fillRandomly_Groups_GroupAudio((*r).Audio)
	(*r).Links = new(bool)
	*(*r).Links = randBool()
	(*r).Events = new(bool)
	*(*r).Events = randBool()
	(*r).Places = new(bool)
	*(*r).Places = randBool()
	(*r).Contacts = new(bool)
	*(*r).Contacts = randBool()
	(*r).Docs = new(Groups_GroupDocs)
	fillRandomly_Groups_GroupDocs((*r).Docs)
	(*r).Wiki = new(Groups_GroupWiki)
	fillRandomly_Groups_GroupWiki((*r).Wiki)
	(*r).Messages = new(bool)
	*(*r).Messages = randBool()
	(*r).Articles = new(bool)
	*(*r).Articles = randBool()
	(*r).Addresses = new(bool)
	*(*r).Addresses = randBool()
	(*r).AgeLimits = new(Groups_GroupAgeLimits)
	fillRandomly_Groups_GroupAgeLimits((*r).AgeLimits)
	(*r).Market = new(bool)
	*(*r).Market = randBool()
	(*r).MarketComments = new(bool)
	*(*r).MarketComments = randBool()
	(*r).MarketCountry = new([]int)
	l0 := randIntn(maxArrayLength + 1)
	*(*r).MarketCountry = make([]int, l0)
	for i0 := 0; i0 < l0; i0++ {
		(*(*r).MarketCountry)[i0] = randInt()
	}
	(*r).MarketCity = new([]int)
	l0 = randIntn(maxArrayLength + 1)
	*(*r).MarketCity = make([]int, l0)
	for i0 := 0; i0 < l0; i0++ {
		(*(*r).MarketCity)[i0] = randInt()
	}
	(*r).MarketCurrency = new(Groups_GroupMarketCurrency)
	fillRandomly_Groups_GroupMarketCurrency((*r).MarketCurrency)
	(*r).MarketContact = new(int)
	*(*r).MarketContact = randInt()
	(*r).MarketWiki = new(int)
	*(*r).MarketWiki = randInt()
	(*r).ObsceneFilter = new(bool)
	*(*r).ObsceneFilter = randBool()
	(*r).ObsceneStopwords = new(bool)
	*(*r).ObsceneStopwords = randBool()
	(*r).ObsceneWords = new([]string)
	l0 = randIntn(maxArrayLength + 1)
	*(*r).ObsceneWords = make([]string, l0)
	for i0 := 0; i0 < l0; i0++ {
		(*(*r).ObsceneWords)[i0] = randString()
	}
	(*r).MainSection = new(int)
	*(*r).MainSection = randInt()
	(*r).SecondarySection = new(int)
	*(*r).SecondarySection = randInt()
	(*r).Country = new(int)
	*(*r).Country = randInt()
	(*r).City = new(int)
	*(*r).City = randInt()
}

func TestVK_Groups_Edit_Success(t *testing.T) {
	values := make(url.Values, 47)
	var req Groups_Edit_Request
	fillRandomly_Groups_Edit_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Base_Ok_Response
	fillRandomly_Base_Ok_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "groups.edit", values, expectedJSON), token)
	resp, apiErr, err := vk.Groups_Edit(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Groups_Edit_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "groups.edit", expectedJSON), "")
	resp, apiErr, err := vk.Groups_Edit(context.Background(), Groups_Edit_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Groups_Edit_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Groups_Edit(context.Background(), Groups_Edit_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Groups_EditAddress_Request(r *Groups_EditAddress_Request) {
	(*r).GroupId = randInt()
	(*r).AddressId = randInt()
	(*r).Title = new(string)
	*(*r).Title = randString()
	(*r).Address = new(string)
	*(*r).Address = randString()
	(*r).AdditionalAddress = new(string)
	*(*r).AdditionalAddress = randString()
	(*r).CountryId = new(int)
	*(*r).CountryId = randInt()
	(*r).CityId = new(int)
	*(*r).CityId = randInt()
	(*r).MetroId = new(int)
	*(*r).MetroId = randInt()
	(*r).Latitude = new(float64)
	*(*r).Latitude = randFloat()
	(*r).Longitude = new(float64)
	*(*r).Longitude = randFloat()
	(*r).Phone = new(string)
	*(*r).Phone = randString()
	(*r).WorkInfoStatus = new(Groups_AddressWorkInfoStatus)
	fillRandomly_Groups_AddressWorkInfoStatus((*r).WorkInfoStatus)
	(*r).Timetable = new(string)
	*(*r).Timetable = randString()
	(*r).IsMainAddress = new(bool)
	*(*r).IsMainAddress = randBool()
}

func TestVK_Groups_EditAddress_Success(t *testing.T) {
	values := make(url.Values, 16)
	var req Groups_EditAddress_Request
	fillRandomly_Groups_EditAddress_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Groups_EditAddress_Response
	fillRandomly_Groups_EditAddress_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "groups.editAddress", values, expectedJSON), token)
	resp, apiErr, err := vk.Groups_EditAddress(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Groups_EditAddress_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "groups.editAddress", expectedJSON), "")
	resp, apiErr, err := vk.Groups_EditAddress(context.Background(), Groups_EditAddress_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Groups_EditAddress_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Groups_EditAddress(context.Background(), Groups_EditAddress_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Groups_EditCallbackServer_Request(r *Groups_EditCallbackServer_Request) {
	(*r).GroupId = randInt()
	(*r).ServerId = randInt()
	(*r).Url = randString()
	(*r).Title = randString()
	(*r).SecretKey = new(string)
	*(*r).SecretKey = randString()
}

func TestVK_Groups_EditCallbackServer_Success(t *testing.T) {
	values := make(url.Values, 7)
	var req Groups_EditCallbackServer_Request
	fillRandomly_Groups_EditCallbackServer_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Base_Ok_Response
	fillRandomly_Base_Ok_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "groups.editCallbackServer", values, expectedJSON), token)
	resp, apiErr, err := vk.Groups_EditCallbackServer(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Groups_EditCallbackServer_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "groups.editCallbackServer", expectedJSON), "")
	resp, apiErr, err := vk.Groups_EditCallbackServer(context.Background(), Groups_EditCallbackServer_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Groups_EditCallbackServer_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Groups_EditCallbackServer(context.Background(), Groups_EditCallbackServer_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Groups_EditLink_Request(r *Groups_EditLink_Request) {
	(*r).GroupId = randInt()
	(*r).LinkId = randInt()
	(*r).Text = new(string)
	*(*r).Text = randString()
}

func TestVK_Groups_EditLink_Success(t *testing.T) {
	values := make(url.Values, 5)
	var req Groups_EditLink_Request
	fillRandomly_Groups_EditLink_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Base_Ok_Response
	fillRandomly_Base_Ok_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "groups.editLink", values, expectedJSON), token)
	resp, apiErr, err := vk.Groups_EditLink(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Groups_EditLink_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "groups.editLink", expectedJSON), "")
	resp, apiErr, err := vk.Groups_EditLink(context.Background(), Groups_EditLink_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Groups_EditLink_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Groups_EditLink(context.Background(), Groups_EditLink_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Groups_EditManager_Request(r *Groups_EditManager_Request) {
	(*r).GroupId = randInt()
	(*r).UserId = randInt()
	(*r).Role = new(Groups_GroupRole)
	fillRandomly_Groups_GroupRole((*r).Role)
	(*r).IsContact = new(bool)
	*(*r).IsContact = randBool()
	(*r).ContactPosition = new(string)
	*(*r).ContactPosition = randString()
	(*r).ContactPhone = new(string)
	*(*r).ContactPhone = randString()
	(*r).ContactEmail = new(string)
	*(*r).ContactEmail = randString()
}

func TestVK_Groups_EditManager_Success(t *testing.T) {
	values := make(url.Values, 9)
	var req Groups_EditManager_Request
	fillRandomly_Groups_EditManager_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Base_Ok_Response
	fillRandomly_Base_Ok_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "groups.editManager", values, expectedJSON), token)
	resp, apiErr, err := vk.Groups_EditManager(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Groups_EditManager_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "groups.editManager", expectedJSON), "")
	resp, apiErr, err := vk.Groups_EditManager(context.Background(), Groups_EditManager_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Groups_EditManager_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Groups_EditManager(context.Background(), Groups_EditManager_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Groups_EnableOnline_Request(r *Groups_EnableOnline_Request) {
	(*r).GroupId = randInt()
}

func TestVK_Groups_EnableOnline_Success(t *testing.T) {
	values := make(url.Values, 3)
	var req Groups_EnableOnline_Request
	fillRandomly_Groups_EnableOnline_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Base_Ok_Response
	fillRandomly_Base_Ok_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "groups.enableOnline", values, expectedJSON), token)
	resp, apiErr, err := vk.Groups_EnableOnline(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Groups_EnableOnline_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "groups.enableOnline", expectedJSON), "")
	resp, apiErr, err := vk.Groups_EnableOnline(context.Background(), Groups_EnableOnline_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Groups_EnableOnline_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Groups_EnableOnline(context.Background(), Groups_EnableOnline_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Groups_Get_Request(r *Groups_Get_Request) {
	(*r).UserId = new(int)
	*(*r).UserId = randInt()
	(*r).Filter = new([]Groups_Filter)
	l0 := randIntn(maxArrayLength + 1)
	*(*r).Filter = make([]Groups_Filter, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomly_Groups_Filter(&(*(*r).Filter)[i0])
	}
	(*r).Fields = new([]Groups_Fields)
	l0 = randIntn(maxArrayLength + 1)
	*(*r).Fields = make([]Groups_Fields, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomly_Groups_Fields(&(*(*r).Fields)[i0])
	}
	(*r).Offset = new(int)
	*(*r).Offset = randInt()
	(*r).Count = new(int)
	*(*r).Count = randInt()
}

func TestVK_Groups_Get_Success(t *testing.T) {
	values := make(url.Values, 8)
	var req Groups_Get_Request
	fillRandomly_Groups_Get_Request(&req)
	require.NoError(t, req.fillIn(values))
	setString(values, "extended", "0")
	var expected Groups_Get_Response
	fillRandomly_Groups_Get_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "groups.get", values, expectedJSON), token)
	resp, apiErr, err := vk.Groups_Get(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Groups_Get_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "groups.get", expectedJSON), "")
	resp, apiErr, err := vk.Groups_Get(context.Background(), Groups_Get_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Groups_Get_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Groups_Get(context.Background(), Groups_Get_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func TestVK_Groups_GetExtended_Success(t *testing.T) {
	values := make(url.Values, 8)
	var req Groups_Get_Request
	fillRandomly_Groups_Get_Request(&req)
	require.NoError(t, req.fillIn(values))
	setString(values, "extended", "1")
	var expected Groups_GetObjectExtended_Response
	fillRandomly_Groups_GetObjectExtended_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "groups.get", values, expectedJSON), token)
	resp, apiErr, err := vk.Groups_GetExtended(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Groups_GetExtended_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "groups.get", expectedJSON), "")
	resp, apiErr, err := vk.Groups_GetExtended(context.Background(), Groups_Get_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Groups_GetExtended_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Groups_GetExtended(context.Background(), Groups_Get_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Groups_GetAddresses_Request(r *Groups_GetAddresses_Request) {
	(*r).GroupId = randInt()
	(*r).AddressIds = new([]int)
	l0 := randIntn(maxArrayLength + 1)
	*(*r).AddressIds = make([]int, l0)
	for i0 := 0; i0 < l0; i0++ {
		(*(*r).AddressIds)[i0] = randInt()
	}
	(*r).Latitude = new(float64)
	*(*r).Latitude = randFloat()
	(*r).Longitude = new(float64)
	*(*r).Longitude = randFloat()
	(*r).Offset = new(int)
	*(*r).Offset = randInt()
	(*r).Count = new(int)
	*(*r).Count = randInt()
	(*r).Fields = new([]Addresses_Fields)
	l0 = randIntn(maxArrayLength + 1)
	*(*r).Fields = make([]Addresses_Fields, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomly_Addresses_Fields(&(*(*r).Fields)[i0])
	}
}

func TestVK_Groups_GetAddresses_Success(t *testing.T) {
	values := make(url.Values, 9)
	var req Groups_GetAddresses_Request
	fillRandomly_Groups_GetAddresses_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Groups_GetAddresses_Response
	fillRandomly_Groups_GetAddresses_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "groups.getAddresses", values, expectedJSON), token)
	resp, apiErr, err := vk.Groups_GetAddresses(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Groups_GetAddresses_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "groups.getAddresses", expectedJSON), "")
	resp, apiErr, err := vk.Groups_GetAddresses(context.Background(), Groups_GetAddresses_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Groups_GetAddresses_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Groups_GetAddresses(context.Background(), Groups_GetAddresses_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Groups_GetBanned_Request(r *Groups_GetBanned_Request) {
	(*r).GroupId = randInt()
	(*r).Offset = new(int)
	*(*r).Offset = randInt()
	(*r).Count = new(int)
	*(*r).Count = randInt()
	(*r).Fields = new([]Base_UserGroupFields)
	l0 := randIntn(maxArrayLength + 1)
	*(*r).Fields = make([]Base_UserGroupFields, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomly_Base_UserGroupFields(&(*(*r).Fields)[i0])
	}
	(*r).OwnerId = new(int)
	*(*r).OwnerId = randInt()
}

func TestVK_Groups_GetBanned_Success(t *testing.T) {
	values := make(url.Values, 7)
	var req Groups_GetBanned_Request
	fillRandomly_Groups_GetBanned_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Groups_GetBanned_Response
	fillRandomly_Groups_GetBanned_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "groups.getBanned", values, expectedJSON), token)
	resp, apiErr, err := vk.Groups_GetBanned(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Groups_GetBanned_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "groups.getBanned", expectedJSON), "")
	resp, apiErr, err := vk.Groups_GetBanned(context.Background(), Groups_GetBanned_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Groups_GetBanned_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Groups_GetBanned(context.Background(), Groups_GetBanned_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Groups_GetById_Request(r *Groups_GetById_Request) {
	(*r).GroupIds = new([]string)
	l0 := randIntn(maxArrayLength + 1)
	*(*r).GroupIds = make([]string, l0)
	for i0 := 0; i0 < l0; i0++ {
		(*(*r).GroupIds)[i0] = randString()
	}
	(*r).GroupId = new(string)
	*(*r).GroupId = randString()
	(*r).Fields = new([]Groups_Fields)
	l0 = randIntn(maxArrayLength + 1)
	*(*r).Fields = make([]Groups_Fields, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomly_Groups_Fields(&(*(*r).Fields)[i0])
	}
}

func TestVK_Groups_GetById_Success(t *testing.T) {
	values := make(url.Values, 5)
	var req Groups_GetById_Request
	fillRandomly_Groups_GetById_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Groups_GetByIdObjectLegacy_Response
	fillRandomly_Groups_GetByIdObjectLegacy_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "groups.getById", values, expectedJSON), token)
	resp, apiErr, err := vk.Groups_GetById(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Groups_GetById_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "groups.getById", expectedJSON), "")
	resp, apiErr, err := vk.Groups_GetById(context.Background(), Groups_GetById_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Groups_GetById_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Groups_GetById(context.Background(), Groups_GetById_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Groups_GetCallbackConfirmationCode_Request(r *Groups_GetCallbackConfirmationCode_Request) {
	(*r).GroupId = randInt()
}

func TestVK_Groups_GetCallbackConfirmationCode_Success(t *testing.T) {
	values := make(url.Values, 3)
	var req Groups_GetCallbackConfirmationCode_Request
	fillRandomly_Groups_GetCallbackConfirmationCode_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Groups_GetCallbackConfirmationCode_Response
	fillRandomly_Groups_GetCallbackConfirmationCode_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "groups.getCallbackConfirmationCode", values, expectedJSON), token)
	resp, apiErr, err := vk.Groups_GetCallbackConfirmationCode(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Groups_GetCallbackConfirmationCode_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "groups.getCallbackConfirmationCode", expectedJSON), "")
	resp, apiErr, err := vk.Groups_GetCallbackConfirmationCode(context.Background(), Groups_GetCallbackConfirmationCode_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Groups_GetCallbackConfirmationCode_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Groups_GetCallbackConfirmationCode(context.Background(), Groups_GetCallbackConfirmationCode_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Groups_GetCallbackServers_Request(r *Groups_GetCallbackServers_Request) {
	(*r).GroupId = randInt()
	(*r).ServerIds = new([]int)
	l0 := randIntn(maxArrayLength + 1)
	*(*r).ServerIds = make([]int, l0)
	for i0 := 0; i0 < l0; i0++ {
		(*(*r).ServerIds)[i0] = randInt()
	}
}

func TestVK_Groups_GetCallbackServers_Success(t *testing.T) {
	values := make(url.Values, 4)
	var req Groups_GetCallbackServers_Request
	fillRandomly_Groups_GetCallbackServers_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Groups_GetCallbackServers_Response
	fillRandomly_Groups_GetCallbackServers_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "groups.getCallbackServers", values, expectedJSON), token)
	resp, apiErr, err := vk.Groups_GetCallbackServers(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Groups_GetCallbackServers_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "groups.getCallbackServers", expectedJSON), "")
	resp, apiErr, err := vk.Groups_GetCallbackServers(context.Background(), Groups_GetCallbackServers_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Groups_GetCallbackServers_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Groups_GetCallbackServers(context.Background(), Groups_GetCallbackServers_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Groups_GetCallbackSettings_Request(r *Groups_GetCallbackSettings_Request) {
	(*r).GroupId = randInt()
	(*r).ServerId = new(int)
	*(*r).ServerId = randInt()
}

func TestVK_Groups_GetCallbackSettings_Success(t *testing.T) {
	values := make(url.Values, 4)
	var req Groups_GetCallbackSettings_Request
	fillRandomly_Groups_GetCallbackSettings_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Groups_GetCallbackSettings_Response
	fillRandomly_Groups_GetCallbackSettings_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "groups.getCallbackSettings", values, expectedJSON), token)
	resp, apiErr, err := vk.Groups_GetCallbackSettings(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Groups_GetCallbackSettings_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "groups.getCallbackSettings", expectedJSON), "")
	resp, apiErr, err := vk.Groups_GetCallbackSettings(context.Background(), Groups_GetCallbackSettings_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Groups_GetCallbackSettings_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Groups_GetCallbackSettings(context.Background(), Groups_GetCallbackSettings_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Groups_GetCatalog_Request(r *Groups_GetCatalog_Request) {
	(*r).CategoryId = new(int)
	*(*r).CategoryId = randInt()
	(*r).SubcategoryId = new(int)
	*(*r).SubcategoryId = randInt()
}

func TestVK_Groups_GetCatalog_Success(t *testing.T) {
	values := make(url.Values, 4)
	var req Groups_GetCatalog_Request
	fillRandomly_Groups_GetCatalog_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Groups_GetCatalog_Response
	fillRandomly_Groups_GetCatalog_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "groups.getCatalog", values, expectedJSON), token)
	resp, apiErr, err := vk.Groups_GetCatalog(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Groups_GetCatalog_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "groups.getCatalog", expectedJSON), "")
	resp, apiErr, err := vk.Groups_GetCatalog(context.Background(), Groups_GetCatalog_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Groups_GetCatalog_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Groups_GetCatalog(context.Background(), Groups_GetCatalog_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Groups_GetCatalogInfo_Request(r *Groups_GetCatalogInfo_Request) {
	(*r).Subcategories = new(bool)
	*(*r).Subcategories = randBool()
}

func TestVK_Groups_GetCatalogInfo_Success(t *testing.T) {
	values := make(url.Values, 4)
	var req Groups_GetCatalogInfo_Request
	fillRandomly_Groups_GetCatalogInfo_Request(&req)
	require.NoError(t, req.fillIn(values))
	setString(values, "extended", "0")
	var expected Groups_GetCatalogInfo_Response
	fillRandomly_Groups_GetCatalogInfo_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "groups.getCatalogInfo", values, expectedJSON), token)
	resp, apiErr, err := vk.Groups_GetCatalogInfo(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Groups_GetCatalogInfo_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "groups.getCatalogInfo", expectedJSON), "")
	resp, apiErr, err := vk.Groups_GetCatalogInfo(context.Background(), Groups_GetCatalogInfo_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Groups_GetCatalogInfo_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Groups_GetCatalogInfo(context.Background(), Groups_GetCatalogInfo_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func TestVK_Groups_GetCatalogInfoExtended_Success(t *testing.T) {
	values := make(url.Values, 4)
	var req Groups_GetCatalogInfo_Request
	fillRandomly_Groups_GetCatalogInfo_Request(&req)
	require.NoError(t, req.fillIn(values))
	setString(values, "extended", "1")
	var expected Groups_GetCatalogInfoExtended_Response
	fillRandomly_Groups_GetCatalogInfoExtended_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "groups.getCatalogInfo", values, expectedJSON), token)
	resp, apiErr, err := vk.Groups_GetCatalogInfoExtended(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Groups_GetCatalogInfoExtended_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "groups.getCatalogInfo", expectedJSON), "")
	resp, apiErr, err := vk.Groups_GetCatalogInfoExtended(context.Background(), Groups_GetCatalogInfo_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Groups_GetCatalogInfoExtended_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Groups_GetCatalogInfoExtended(context.Background(), Groups_GetCatalogInfo_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Groups_GetInvitedUsers_NameCase(o *Groups_GetInvitedUsers_NameCase) {
	switch randIntn(6) {
	case 0:
		*o = "nom"
	case 1:
		*o = "gen"
	case 2:
		*o = "dat"
	case 3:
		*o = "acc"
	case 4:
		*o = "ins"
	case 5:
		*o = "abl"
	}
}

func fillRandomly_Groups_GetInvitedUsers_Request(r *Groups_GetInvitedUsers_Request) {
	(*r).GroupId = randInt()
	(*r).Offset = new(int)
	*(*r).Offset = randInt()
	(*r).Count = new(int)
	*(*r).Count = randInt()
	(*r).Fields = new([]Users_Fields)
	l0 := randIntn(maxArrayLength + 1)
	*(*r).Fields = make([]Users_Fields, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomly_Users_Fields(&(*(*r).Fields)[i0])
	}
	(*r).NameCase = new(Groups_GetInvitedUsers_NameCase)
	fillRandomly_Groups_GetInvitedUsers_NameCase((*r).NameCase)
}

func TestVK_Groups_GetInvitedUsers_Success(t *testing.T) {
	values := make(url.Values, 7)
	var req Groups_GetInvitedUsers_Request
	fillRandomly_Groups_GetInvitedUsers_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Groups_GetInvitedUsers_Response
	fillRandomly_Groups_GetInvitedUsers_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "groups.getInvitedUsers", values, expectedJSON), token)
	resp, apiErr, err := vk.Groups_GetInvitedUsers(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Groups_GetInvitedUsers_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "groups.getInvitedUsers", expectedJSON), "")
	resp, apiErr, err := vk.Groups_GetInvitedUsers(context.Background(), Groups_GetInvitedUsers_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Groups_GetInvitedUsers_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Groups_GetInvitedUsers(context.Background(), Groups_GetInvitedUsers_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Groups_GetInvites_Request(r *Groups_GetInvites_Request) {
	(*r).Offset = new(int)
	*(*r).Offset = randInt()
	(*r).Count = new(int)
	*(*r).Count = randInt()
}

func TestVK_Groups_GetInvites_Success(t *testing.T) {
	values := make(url.Values, 5)
	var req Groups_GetInvites_Request
	fillRandomly_Groups_GetInvites_Request(&req)
	require.NoError(t, req.fillIn(values))
	setString(values, "extended", "0")
	var expected Groups_GetInvites_Response
	fillRandomly_Groups_GetInvites_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "groups.getInvites", values, expectedJSON), token)
	resp, apiErr, err := vk.Groups_GetInvites(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Groups_GetInvites_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "groups.getInvites", expectedJSON), "")
	resp, apiErr, err := vk.Groups_GetInvites(context.Background(), Groups_GetInvites_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Groups_GetInvites_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Groups_GetInvites(context.Background(), Groups_GetInvites_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func TestVK_Groups_GetInvitesExtended_Success(t *testing.T) {
	values := make(url.Values, 5)
	var req Groups_GetInvites_Request
	fillRandomly_Groups_GetInvites_Request(&req)
	require.NoError(t, req.fillIn(values))
	setString(values, "extended", "1")
	var expected Groups_GetInvitesExtended_Response
	fillRandomly_Groups_GetInvitesExtended_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "groups.getInvites", values, expectedJSON), token)
	resp, apiErr, err := vk.Groups_GetInvitesExtended(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Groups_GetInvitesExtended_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "groups.getInvites", expectedJSON), "")
	resp, apiErr, err := vk.Groups_GetInvitesExtended(context.Background(), Groups_GetInvites_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Groups_GetInvitesExtended_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Groups_GetInvitesExtended(context.Background(), Groups_GetInvites_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Groups_GetLongPollServer_Request(r *Groups_GetLongPollServer_Request) {
	(*r).GroupId = randInt()
}

func TestVK_Groups_GetLongPollServer_Success(t *testing.T) {
	values := make(url.Values, 3)
	var req Groups_GetLongPollServer_Request
	fillRandomly_Groups_GetLongPollServer_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Groups_GetLongPollServer_Response
	fillRandomly_Groups_GetLongPollServer_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "groups.getLongPollServer", values, expectedJSON), token)
	resp, apiErr, err := vk.Groups_GetLongPollServer(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Groups_GetLongPollServer_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "groups.getLongPollServer", expectedJSON), "")
	resp, apiErr, err := vk.Groups_GetLongPollServer(context.Background(), Groups_GetLongPollServer_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Groups_GetLongPollServer_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Groups_GetLongPollServer(context.Background(), Groups_GetLongPollServer_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Groups_GetLongPollSettings_Request(r *Groups_GetLongPollSettings_Request) {
	(*r).GroupId = randInt()
}

func TestVK_Groups_GetLongPollSettings_Success(t *testing.T) {
	values := make(url.Values, 3)
	var req Groups_GetLongPollSettings_Request
	fillRandomly_Groups_GetLongPollSettings_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Groups_GetLongPollSettings_Response
	fillRandomly_Groups_GetLongPollSettings_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "groups.getLongPollSettings", values, expectedJSON), token)
	resp, apiErr, err := vk.Groups_GetLongPollSettings(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Groups_GetLongPollSettings_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "groups.getLongPollSettings", expectedJSON), "")
	resp, apiErr, err := vk.Groups_GetLongPollSettings(context.Background(), Groups_GetLongPollSettings_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Groups_GetLongPollSettings_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Groups_GetLongPollSettings(context.Background(), Groups_GetLongPollSettings_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Groups_GetMembers_Sort(o *Groups_GetMembers_Sort) {
	switch randIntn(4) {
	case 0:
		*o = "id_asc"
	case 1:
		*o = "id_desc"
	case 2:
		*o = "time_asc"
	case 3:
		*o = "time_desc"
	}
}

func fillRandomly_Groups_GetMembers_Filter(o *Groups_GetMembers_Filter) {
	switch randIntn(4) {
	case 0:
		*o = "friends"
	case 1:
		*o = "unsure"
	case 2:
		*o = "managers"
	case 3:
		*o = "donut"
	}
}

func fillRandomly_Groups_GetMembers_Request(r *Groups_GetMembers_Request) {
	(*r).GroupId = new(string)
	*(*r).GroupId = randString()
	(*r).Sort = new(Groups_GetMembers_Sort)
	fillRandomly_Groups_GetMembers_Sort((*r).Sort)
	(*r).Offset = new(int)
	*(*r).Offset = randInt()
	(*r).Count = new(int)
	*(*r).Count = randInt()
	(*r).Fields = new([]Users_Fields)
	l0 := randIntn(maxArrayLength + 1)
	*(*r).Fields = make([]Users_Fields, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomly_Users_Fields(&(*(*r).Fields)[i0])
	}
	(*r).Filter = new(Groups_GetMembers_Filter)
	fillRandomly_Groups_GetMembers_Filter((*r).Filter)
}

func TestVK_Groups_GetMembers_Success(t *testing.T) {
	values := make(url.Values, 8)
	var req Groups_GetMembers_Request
	fillRandomly_Groups_GetMembers_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Groups_GetMembers_Response
	fillRandomly_Groups_GetMembers_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "groups.getMembers", values, expectedJSON), token)
	resp, apiErr, err := vk.Groups_GetMembers(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Groups_GetMembers_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "groups.getMembers", expectedJSON), "")
	resp, apiErr, err := vk.Groups_GetMembers(context.Background(), Groups_GetMembers_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Groups_GetMembers_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Groups_GetMembers(context.Background(), Groups_GetMembers_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Groups_GetRequests_Request(r *Groups_GetRequests_Request) {
	(*r).GroupId = randInt()
	(*r).Offset = new(int)
	*(*r).Offset = randInt()
	(*r).Count = new(int)
	*(*r).Count = randInt()
	(*r).Fields = new([]Users_Fields)
	l0 := randIntn(maxArrayLength + 1)
	*(*r).Fields = make([]Users_Fields, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomly_Users_Fields(&(*(*r).Fields)[i0])
	}
}

func TestVK_Groups_GetRequests_Success(t *testing.T) {
	values := make(url.Values, 6)
	var req Groups_GetRequests_Request
	fillRandomly_Groups_GetRequests_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Groups_GetRequests_Response
	fillRandomly_Groups_GetRequests_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "groups.getRequests", values, expectedJSON), token)
	resp, apiErr, err := vk.Groups_GetRequests(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Groups_GetRequests_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "groups.getRequests", expectedJSON), "")
	resp, apiErr, err := vk.Groups_GetRequests(context.Background(), Groups_GetRequests_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Groups_GetRequests_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Groups_GetRequests(context.Background(), Groups_GetRequests_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Groups_GetSettings_Request(r *Groups_GetSettings_Request) {
	(*r).GroupId = randInt()
}

func TestVK_Groups_GetSettings_Success(t *testing.T) {
	values := make(url.Values, 3)
	var req Groups_GetSettings_Request
	fillRandomly_Groups_GetSettings_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Groups_GetSettings_Response
	fillRandomly_Groups_GetSettings_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "groups.getSettings", values, expectedJSON), token)
	resp, apiErr, err := vk.Groups_GetSettings(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Groups_GetSettings_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "groups.getSettings", expectedJSON), "")
	resp, apiErr, err := vk.Groups_GetSettings(context.Background(), Groups_GetSettings_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Groups_GetSettings_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Groups_GetSettings(context.Background(), Groups_GetSettings_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Groups_GetTagList_Request(r *Groups_GetTagList_Request) {
	(*r).GroupId = randInt()
}

func TestVK_Groups_GetTagList_Success(t *testing.T) {
	values := make(url.Values, 3)
	var req Groups_GetTagList_Request
	fillRandomly_Groups_GetTagList_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Groups_GetTagList_Response
	fillRandomly_Groups_GetTagList_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "groups.getTagList", values, expectedJSON), token)
	resp, apiErr, err := vk.Groups_GetTagList(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Groups_GetTagList_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "groups.getTagList", expectedJSON), "")
	resp, apiErr, err := vk.Groups_GetTagList(context.Background(), Groups_GetTagList_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Groups_GetTagList_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Groups_GetTagList(context.Background(), Groups_GetTagList_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func TestVK_Groups_GetTokenPermissions_Success(t *testing.T) {
	values := make(url.Values, 2)
	var expected Groups_GetTokenPermissions_Response
	fillRandomly_Groups_GetTokenPermissions_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "groups.getTokenPermissions", values, expectedJSON), token)
	resp, apiErr, err := vk.Groups_GetTokenPermissions(context.Background())
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Groups_GetTokenPermissions_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "groups.getTokenPermissions", expectedJSON), "")
	resp, apiErr, err := vk.Groups_GetTokenPermissions(context.Background())
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Groups_GetTokenPermissions_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Groups_GetTokenPermissions(context.Background())
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Groups_Invite_Request(r *Groups_Invite_Request) {
	(*r).GroupId = randInt()
	(*r).UserId = randInt()
}

func TestVK_Groups_Invite_Success(t *testing.T) {
	values := make(url.Values, 4)
	var req Groups_Invite_Request
	fillRandomly_Groups_Invite_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Base_Ok_Response
	fillRandomly_Base_Ok_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "groups.invite", values, expectedJSON), token)
	resp, apiErr, err := vk.Groups_Invite(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Groups_Invite_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "groups.invite", expectedJSON), "")
	resp, apiErr, err := vk.Groups_Invite(context.Background(), Groups_Invite_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Groups_Invite_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Groups_Invite(context.Background(), Groups_Invite_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Groups_IsMember_Request(r *Groups_IsMember_Request) {
	(*r).GroupId = randString()
	(*r).UserId = new(int)
	*(*r).UserId = randInt()
}

func TestVK_Groups_IsMember_Success(t *testing.T) {
	values := make(url.Values, 5)
	var req Groups_IsMember_Request
	fillRandomly_Groups_IsMember_Request(&req)
	require.NoError(t, req.fillIn(values))
	setString(values, "extended", "0")
	var expected Groups_IsMember_Response
	fillRandomly_Groups_IsMember_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "groups.isMember", values, expectedJSON), token)
	resp, apiErr, err := vk.Groups_IsMember(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Groups_IsMember_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "groups.isMember", expectedJSON), "")
	resp, apiErr, err := vk.Groups_IsMember(context.Background(), Groups_IsMember_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Groups_IsMember_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Groups_IsMember(context.Background(), Groups_IsMember_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func TestVK_Groups_IsMemberExtended_Success(t *testing.T) {
	values := make(url.Values, 5)
	var req Groups_IsMember_Request
	fillRandomly_Groups_IsMember_Request(&req)
	require.NoError(t, req.fillIn(values))
	setString(values, "extended", "1")
	var expected Groups_IsMemberExtended_Response
	fillRandomly_Groups_IsMemberExtended_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "groups.isMember", values, expectedJSON), token)
	resp, apiErr, err := vk.Groups_IsMemberExtended(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Groups_IsMemberExtended_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "groups.isMember", expectedJSON), "")
	resp, apiErr, err := vk.Groups_IsMemberExtended(context.Background(), Groups_IsMember_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Groups_IsMemberExtended_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Groups_IsMemberExtended(context.Background(), Groups_IsMember_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Groups_IsMemberUserIDs_Request(r *Groups_IsMemberUserIDs_Request) {
	(*r).GroupId = randString()
	(*r).UserIds = new([]int)
	l0 := randIntn(maxArrayLength + 1)
	*(*r).UserIds = make([]int, l0)
	for i0 := 0; i0 < l0; i0++ {
		(*(*r).UserIds)[i0] = randInt()
	}
}

func TestVK_Groups_IsMemberUserIDs_Success(t *testing.T) {
	values := make(url.Values, 5)
	var req Groups_IsMemberUserIDs_Request
	fillRandomly_Groups_IsMemberUserIDs_Request(&req)
	require.NoError(t, req.fillIn(values))
	setString(values, "extended", "0")
	var expected Groups_IsMemberUserIds_Response
	fillRandomly_Groups_IsMemberUserIds_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "groups.isMember", values, expectedJSON), token)
	resp, apiErr, err := vk.Groups_IsMemberUserIDs(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Groups_IsMemberUserIDs_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "groups.isMember", expectedJSON), "")
	resp, apiErr, err := vk.Groups_IsMemberUserIDs(context.Background(), Groups_IsMemberUserIDs_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Groups_IsMemberUserIDs_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Groups_IsMemberUserIDs(context.Background(), Groups_IsMemberUserIDs_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func TestVK_Groups_IsMemberExtendedUserIDs_Success(t *testing.T) {
	values := make(url.Values, 5)
	var req Groups_IsMemberUserIDs_Request
	fillRandomly_Groups_IsMemberUserIDs_Request(&req)
	require.NoError(t, req.fillIn(values))
	setString(values, "extended", "1")
	var expected Groups_IsMemberUserIdsExtended_Response
	fillRandomly_Groups_IsMemberUserIdsExtended_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "groups.isMember", values, expectedJSON), token)
	resp, apiErr, err := vk.Groups_IsMemberExtendedUserIDs(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Groups_IsMemberExtendedUserIDs_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "groups.isMember", expectedJSON), "")
	resp, apiErr, err := vk.Groups_IsMemberExtendedUserIDs(context.Background(), Groups_IsMemberUserIDs_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Groups_IsMemberExtendedUserIDs_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Groups_IsMemberExtendedUserIDs(context.Background(), Groups_IsMemberUserIDs_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Groups_Join_Request(r *Groups_Join_Request) {
	(*r).GroupId = new(int)
	*(*r).GroupId = randInt()
	(*r).NotSure = new(string)
	*(*r).NotSure = randString()
}

func TestVK_Groups_Join_Success(t *testing.T) {
	values := make(url.Values, 4)
	var req Groups_Join_Request
	fillRandomly_Groups_Join_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Base_Ok_Response
	fillRandomly_Base_Ok_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "groups.join", values, expectedJSON), token)
	resp, apiErr, err := vk.Groups_Join(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Groups_Join_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "groups.join", expectedJSON), "")
	resp, apiErr, err := vk.Groups_Join(context.Background(), Groups_Join_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Groups_Join_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Groups_Join(context.Background(), Groups_Join_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Groups_Leave_Request(r *Groups_Leave_Request) {
	(*r).GroupId = randInt()
}

func TestVK_Groups_Leave_Success(t *testing.T) {
	values := make(url.Values, 3)
	var req Groups_Leave_Request
	fillRandomly_Groups_Leave_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Base_Ok_Response
	fillRandomly_Base_Ok_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "groups.leave", values, expectedJSON), token)
	resp, apiErr, err := vk.Groups_Leave(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Groups_Leave_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "groups.leave", expectedJSON), "")
	resp, apiErr, err := vk.Groups_Leave(context.Background(), Groups_Leave_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Groups_Leave_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Groups_Leave(context.Background(), Groups_Leave_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Groups_RemoveUser_Request(r *Groups_RemoveUser_Request) {
	(*r).GroupId = randInt()
	(*r).UserId = randInt()
}

func TestVK_Groups_RemoveUser_Success(t *testing.T) {
	values := make(url.Values, 4)
	var req Groups_RemoveUser_Request
	fillRandomly_Groups_RemoveUser_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Base_Ok_Response
	fillRandomly_Base_Ok_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "groups.removeUser", values, expectedJSON), token)
	resp, apiErr, err := vk.Groups_RemoveUser(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Groups_RemoveUser_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "groups.removeUser", expectedJSON), "")
	resp, apiErr, err := vk.Groups_RemoveUser(context.Background(), Groups_RemoveUser_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Groups_RemoveUser_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Groups_RemoveUser(context.Background(), Groups_RemoveUser_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Groups_ReorderLink_Request(r *Groups_ReorderLink_Request) {
	(*r).GroupId = randInt()
	(*r).LinkId = randInt()
	(*r).After = new(int)
	*(*r).After = randInt()
}

func TestVK_Groups_ReorderLink_Success(t *testing.T) {
	values := make(url.Values, 5)
	var req Groups_ReorderLink_Request
	fillRandomly_Groups_ReorderLink_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Base_Ok_Response
	fillRandomly_Base_Ok_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "groups.reorderLink", values, expectedJSON), token)
	resp, apiErr, err := vk.Groups_ReorderLink(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Groups_ReorderLink_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "groups.reorderLink", expectedJSON), "")
	resp, apiErr, err := vk.Groups_ReorderLink(context.Background(), Groups_ReorderLink_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Groups_ReorderLink_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Groups_ReorderLink(context.Background(), Groups_ReorderLink_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Groups_Search_Type(o *Groups_Search_Type) {
	switch randIntn(3) {
	case 0:
		*o = "group"
	case 1:
		*o = "page"
	case 2:
		*o = "event"
	}
}

func fillRandomly_Groups_Search_Sort(o *Groups_Search_Sort) {
	switch randIntn(6) {
	case 0:
		*o = 0
	case 1:
		*o = 1
	case 2:
		*o = 2
	case 3:
		*o = 3
	case 4:
		*o = 4
	case 5:
		*o = 5
	}
}

func fillRandomly_Groups_Search_Request(r *Groups_Search_Request) {
	(*r).Q = randString()
	(*r).Type = new(Groups_Search_Type)
	fillRandomly_Groups_Search_Type((*r).Type)
	(*r).CountryId = new(int)
	*(*r).CountryId = randInt()
	(*r).CityId = new(int)
	*(*r).CityId = randInt()
	(*r).Future = new(bool)
	*(*r).Future = randBool()
	(*r).Market = new(bool)
	*(*r).Market = randBool()
	(*r).Sort = new(Groups_Search_Sort)
	fillRandomly_Groups_Search_Sort((*r).Sort)
	(*r).Offset = new(int)
	*(*r).Offset = randInt()
	(*r).Count = new(int)
	*(*r).Count = randInt()
}

func TestVK_Groups_Search_Success(t *testing.T) {
	values := make(url.Values, 11)
	var req Groups_Search_Request
	fillRandomly_Groups_Search_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Groups_Search_Response
	fillRandomly_Groups_Search_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "groups.search", values, expectedJSON), token)
	resp, apiErr, err := vk.Groups_Search(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Groups_Search_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "groups.search", expectedJSON), "")
	resp, apiErr, err := vk.Groups_Search(context.Background(), Groups_Search_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Groups_Search_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Groups_Search(context.Background(), Groups_Search_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Groups_SetCallbackSettings_Request(r *Groups_SetCallbackSettings_Request) {
	(*r).GroupId = randInt()
	(*r).ServerId = new(int)
	*(*r).ServerId = randInt()
	(*r).ApiVersion = new(string)
	*(*r).ApiVersion = randString()
	(*r).MessageNew = new(bool)
	*(*r).MessageNew = randBool()
	(*r).MessageReply = new(bool)
	*(*r).MessageReply = randBool()
	(*r).MessageAllow = new(bool)
	*(*r).MessageAllow = randBool()
	(*r).MessageEdit = new(bool)
	*(*r).MessageEdit = randBool()
	(*r).MessageDeny = new(bool)
	*(*r).MessageDeny = randBool()
	(*r).MessageTypingState = new(bool)
	*(*r).MessageTypingState = randBool()
	(*r).PhotoNew = new(bool)
	*(*r).PhotoNew = randBool()
	(*r).AudioNew = new(bool)
	*(*r).AudioNew = randBool()
	(*r).VideoNew = new(bool)
	*(*r).VideoNew = randBool()
	(*r).WallReplyNew = new(bool)
	*(*r).WallReplyNew = randBool()
	(*r).WallReplyEdit = new(bool)
	*(*r).WallReplyEdit = randBool()
	(*r).WallReplyDelete = new(bool)
	*(*r).WallReplyDelete = randBool()
	(*r).WallReplyRestore = new(bool)
	*(*r).WallReplyRestore = randBool()
	(*r).WallPostNew = new(bool)
	*(*r).WallPostNew = randBool()
	(*r).WallRepost = new(bool)
	*(*r).WallRepost = randBool()
	(*r).BoardPostNew = new(bool)
	*(*r).BoardPostNew = randBool()
	(*r).BoardPostEdit = new(bool)
	*(*r).BoardPostEdit = randBool()
	(*r).BoardPostRestore = new(bool)
	*(*r).BoardPostRestore = randBool()
	(*r).BoardPostDelete = new(bool)
	*(*r).BoardPostDelete = randBool()
	(*r).PhotoCommentNew = new(bool)
	*(*r).PhotoCommentNew = randBool()
	(*r).PhotoCommentEdit = new(bool)
	*(*r).PhotoCommentEdit = randBool()
	(*r).PhotoCommentDelete = new(bool)
	*(*r).PhotoCommentDelete = randBool()
	(*r).PhotoCommentRestore = new(bool)
	*(*r).PhotoCommentRestore = randBool()
	(*r).VideoCommentNew = new(bool)
	*(*r).VideoCommentNew = randBool()
	(*r).VideoCommentEdit = new(bool)
	*(*r).VideoCommentEdit = randBool()
	(*r).VideoCommentDelete = new(bool)
	*(*r).VideoCommentDelete = randBool()
	(*r).VideoCommentRestore = new(bool)
	*(*r).VideoCommentRestore = randBool()
	(*r).MarketCommentNew = new(bool)
	*(*r).MarketCommentNew = randBool()
	(*r).MarketCommentEdit = new(bool)
	*(*r).MarketCommentEdit = randBool()
	(*r).MarketCommentDelete = new(bool)
	*(*r).MarketCommentDelete = randBool()
	(*r).MarketCommentRestore = new(bool)
	*(*r).MarketCommentRestore = randBool()
	(*r).MarketOrderNew = new(bool)
	*(*r).MarketOrderNew = randBool()
	(*r).MarketOrderEdit = new(bool)
	*(*r).MarketOrderEdit = randBool()
	(*r).PollVoteNew = new(bool)
	*(*r).PollVoteNew = randBool()
	(*r).GroupJoin = new(bool)
	*(*r).GroupJoin = randBool()
	(*r).GroupLeave = new(bool)
	*(*r).GroupLeave = randBool()
	(*r).GroupChangeSettings = new(bool)
	*(*r).GroupChangeSettings = randBool()
	(*r).GroupChangePhoto = new(bool)
	*(*r).GroupChangePhoto = randBool()
	(*r).GroupOfficersEdit = new(bool)
	*(*r).GroupOfficersEdit = randBool()
	(*r).UserBlock = new(bool)
	*(*r).UserBlock = randBool()
	(*r).UserUnblock = new(bool)
	*(*r).UserUnblock = randBool()
	(*r).LeadFormsNew = new(bool)
	*(*r).LeadFormsNew = randBool()
	(*r).LikeAdd = new(bool)
	*(*r).LikeAdd = randBool()
	(*r).LikeRemove = new(bool)
	*(*r).LikeRemove = randBool()
	(*r).MessageEvent = new(bool)
	*(*r).MessageEvent = randBool()
	(*r).DonutSubscriptionCreate = new(bool)
	*(*r).DonutSubscriptionCreate = randBool()
	(*r).DonutSubscriptionProlonged = new(bool)
	*(*r).DonutSubscriptionProlonged = randBool()
	(*r).DonutSubscriptionCancelled = new(bool)
	*(*r).DonutSubscriptionCancelled = randBool()
	(*r).DonutSubscriptionPriceChanged = new(bool)
	*(*r).DonutSubscriptionPriceChanged = randBool()
	(*r).DonutSubscriptionExpired = new(bool)
	*(*r).DonutSubscriptionExpired = randBool()
	(*r).DonutMoneyWithdraw = new(bool)
	*(*r).DonutMoneyWithdraw = randBool()
	(*r).DonutMoneyWithdrawError = new(bool)
	*(*r).DonutMoneyWithdrawError = randBool()
}

func TestVK_Groups_SetCallbackSettings_Success(t *testing.T) {
	values := make(url.Values, 57)
	var req Groups_SetCallbackSettings_Request
	fillRandomly_Groups_SetCallbackSettings_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Base_Ok_Response
	fillRandomly_Base_Ok_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "groups.setCallbackSettings", values, expectedJSON), token)
	resp, apiErr, err := vk.Groups_SetCallbackSettings(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Groups_SetCallbackSettings_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "groups.setCallbackSettings", expectedJSON), "")
	resp, apiErr, err := vk.Groups_SetCallbackSettings(context.Background(), Groups_SetCallbackSettings_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Groups_SetCallbackSettings_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Groups_SetCallbackSettings(context.Background(), Groups_SetCallbackSettings_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Groups_SetLongPollSettings_Request(r *Groups_SetLongPollSettings_Request) {
	(*r).GroupId = randInt()
	(*r).Enabled = new(bool)
	*(*r).Enabled = randBool()
	(*r).ApiVersion = new(string)
	*(*r).ApiVersion = randString()
	(*r).MessageNew = new(bool)
	*(*r).MessageNew = randBool()
	(*r).MessageReply = new(bool)
	*(*r).MessageReply = randBool()
	(*r).MessageAllow = new(bool)
	*(*r).MessageAllow = randBool()
	(*r).MessageDeny = new(bool)
	*(*r).MessageDeny = randBool()
	(*r).MessageEdit = new(bool)
	*(*r).MessageEdit = randBool()
	(*r).MessageTypingState = new(bool)
	*(*r).MessageTypingState = randBool()
	(*r).PhotoNew = new(bool)
	*(*r).PhotoNew = randBool()
	(*r).AudioNew = new(bool)
	*(*r).AudioNew = randBool()
	(*r).VideoNew = new(bool)
	*(*r).VideoNew = randBool()
	(*r).WallReplyNew = new(bool)
	*(*r).WallReplyNew = randBool()
	(*r).WallReplyEdit = new(bool)
	*(*r).WallReplyEdit = randBool()
	(*r).WallReplyDelete = new(bool)
	*(*r).WallReplyDelete = randBool()
	(*r).WallReplyRestore = new(bool)
	*(*r).WallReplyRestore = randBool()
	(*r).WallPostNew = new(bool)
	*(*r).WallPostNew = randBool()
	(*r).WallRepost = new(bool)
	*(*r).WallRepost = randBool()
	(*r).BoardPostNew = new(bool)
	*(*r).BoardPostNew = randBool()
	(*r).BoardPostEdit = new(bool)
	*(*r).BoardPostEdit = randBool()
	(*r).BoardPostRestore = new(bool)
	*(*r).BoardPostRestore = randBool()
	(*r).BoardPostDelete = new(bool)
	*(*r).BoardPostDelete = randBool()
	(*r).PhotoCommentNew = new(bool)
	*(*r).PhotoCommentNew = randBool()
	(*r).PhotoCommentEdit = new(bool)
	*(*r).PhotoCommentEdit = randBool()
	(*r).PhotoCommentDelete = new(bool)
	*(*r).PhotoCommentDelete = randBool()
	(*r).PhotoCommentRestore = new(bool)
	*(*r).PhotoCommentRestore = randBool()
	(*r).VideoCommentNew = new(bool)
	*(*r).VideoCommentNew = randBool()
	(*r).VideoCommentEdit = new(bool)
	*(*r).VideoCommentEdit = randBool()
	(*r).VideoCommentDelete = new(bool)
	*(*r).VideoCommentDelete = randBool()
	(*r).VideoCommentRestore = new(bool)
	*(*r).VideoCommentRestore = randBool()
	(*r).MarketCommentNew = new(bool)
	*(*r).MarketCommentNew = randBool()
	(*r).MarketCommentEdit = new(bool)
	*(*r).MarketCommentEdit = randBool()
	(*r).MarketCommentDelete = new(bool)
	*(*r).MarketCommentDelete = randBool()
	(*r).MarketCommentRestore = new(bool)
	*(*r).MarketCommentRestore = randBool()
	(*r).PollVoteNew = new(bool)
	*(*r).PollVoteNew = randBool()
	(*r).GroupJoin = new(bool)
	*(*r).GroupJoin = randBool()
	(*r).GroupLeave = new(bool)
	*(*r).GroupLeave = randBool()
	(*r).GroupChangeSettings = new(bool)
	*(*r).GroupChangeSettings = randBool()
	(*r).GroupChangePhoto = new(bool)
	*(*r).GroupChangePhoto = randBool()
	(*r).GroupOfficersEdit = new(bool)
	*(*r).GroupOfficersEdit = randBool()
	(*r).UserBlock = new(bool)
	*(*r).UserBlock = randBool()
	(*r).UserUnblock = new(bool)
	*(*r).UserUnblock = randBool()
	(*r).LikeAdd = new(bool)
	*(*r).LikeAdd = randBool()
	(*r).LikeRemove = new(bool)
	*(*r).LikeRemove = randBool()
	(*r).MessageEvent = new(bool)
	*(*r).MessageEvent = randBool()
	(*r).DonutSubscriptionCreate = new(bool)
	*(*r).DonutSubscriptionCreate = randBool()
	(*r).DonutSubscriptionProlonged = new(bool)
	*(*r).DonutSubscriptionProlonged = randBool()
	(*r).DonutSubscriptionCancelled = new(bool)
	*(*r).DonutSubscriptionCancelled = randBool()
	(*r).DonutSubscriptionPriceChanged = new(bool)
	*(*r).DonutSubscriptionPriceChanged = randBool()
	(*r).DonutSubscriptionExpired = new(bool)
	*(*r).DonutSubscriptionExpired = randBool()
	(*r).DonutMoneyWithdraw = new(bool)
	*(*r).DonutMoneyWithdraw = randBool()
	(*r).DonutMoneyWithdrawError = new(bool)
	*(*r).DonutMoneyWithdrawError = randBool()
}

func TestVK_Groups_SetLongPollSettings_Success(t *testing.T) {
	values := make(url.Values, 54)
	var req Groups_SetLongPollSettings_Request
	fillRandomly_Groups_SetLongPollSettings_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Base_Ok_Response
	fillRandomly_Base_Ok_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "groups.setLongPollSettings", values, expectedJSON), token)
	resp, apiErr, err := vk.Groups_SetLongPollSettings(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Groups_SetLongPollSettings_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "groups.setLongPollSettings", expectedJSON), "")
	resp, apiErr, err := vk.Groups_SetLongPollSettings(context.Background(), Groups_SetLongPollSettings_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Groups_SetLongPollSettings_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Groups_SetLongPollSettings(context.Background(), Groups_SetLongPollSettings_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Groups_SetSettings_Request(r *Groups_SetSettings_Request) {
	(*r).GroupId = randInt()
	(*r).Messages = new(bool)
	*(*r).Messages = randBool()
	(*r).BotsCapabilities = new(bool)
	*(*r).BotsCapabilities = randBool()
	(*r).BotsStartButton = new(bool)
	*(*r).BotsStartButton = randBool()
	(*r).BotsAddToChat = new(bool)
	*(*r).BotsAddToChat = randBool()
}

func TestVK_Groups_SetSettings_Success(t *testing.T) {
	values := make(url.Values, 7)
	var req Groups_SetSettings_Request
	fillRandomly_Groups_SetSettings_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Base_Ok_Response
	fillRandomly_Base_Ok_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "groups.setSettings", values, expectedJSON), token)
	resp, apiErr, err := vk.Groups_SetSettings(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Groups_SetSettings_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "groups.setSettings", expectedJSON), "")
	resp, apiErr, err := vk.Groups_SetSettings(context.Background(), Groups_SetSettings_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Groups_SetSettings_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Groups_SetSettings(context.Background(), Groups_SetSettings_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Groups_SetUserNote_Request(r *Groups_SetUserNote_Request) {
	(*r).GroupId = randInt()
	(*r).UserId = randInt()
	(*r).Note = new(string)
	*(*r).Note = randString()
}

func TestVK_Groups_SetUserNote_Success(t *testing.T) {
	values := make(url.Values, 5)
	var req Groups_SetUserNote_Request
	fillRandomly_Groups_SetUserNote_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Base_Bool_Response
	fillRandomly_Base_Bool_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "groups.setUserNote", values, expectedJSON), token)
	resp, apiErr, err := vk.Groups_SetUserNote(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Groups_SetUserNote_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "groups.setUserNote", expectedJSON), "")
	resp, apiErr, err := vk.Groups_SetUserNote(context.Background(), Groups_SetUserNote_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Groups_SetUserNote_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Groups_SetUserNote(context.Background(), Groups_SetUserNote_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Groups_TagAdd_TagColor(o *Groups_TagAdd_TagColor) {
	switch randIntn(20) {
	case 0:
		*o = "454647"
	case 1:
		*o = "45678f"
	case 2:
		*o = "4bb34b"
	case 3:
		*o = "5181b8"
	case 4:
		*o = "539b9c"
	case 5:
		*o = "5c9ce6"
	case 6:
		*o = "63b9ba"
	case 7:
		*o = "6bc76b"
	case 8:
		*o = "76787a"
	case 9:
		*o = "792ec0"
	case 10:
		*o = "7a6c4f"
	case 11:
		*o = "7ececf"
	case 12:
		*o = "9e8d6b"
	case 13:
		*o = "a162de"
	case 14:
		*o = "aaaeb3"
	case 15:
		*o = "bbaa84"
	case 16:
		*o = "e64646"
	case 17:
		*o = "ff5c5c"
	case 18:
		*o = "ffa000"
	case 19:
		*o = "ffc107"
	}
}

func fillRandomly_Groups_TagAdd_Request(r *Groups_TagAdd_Request) {
	(*r).GroupId = randInt()
	(*r).TagName = randString()
	(*r).TagColor = new(Groups_TagAdd_TagColor)
	fillRandomly_Groups_TagAdd_TagColor((*r).TagColor)
}

func TestVK_Groups_TagAdd_Success(t *testing.T) {
	values := make(url.Values, 5)
	var req Groups_TagAdd_Request
	fillRandomly_Groups_TagAdd_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Base_Bool_Response
	fillRandomly_Base_Bool_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "groups.tagAdd", values, expectedJSON), token)
	resp, apiErr, err := vk.Groups_TagAdd(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Groups_TagAdd_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "groups.tagAdd", expectedJSON), "")
	resp, apiErr, err := vk.Groups_TagAdd(context.Background(), Groups_TagAdd_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Groups_TagAdd_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Groups_TagAdd(context.Background(), Groups_TagAdd_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Groups_TagBind_Act(o *Groups_TagBind_Act) {
	switch randIntn(2) {
	case 0:
		*o = "bind"
	case 1:
		*o = "unbind"
	}
}

func fillRandomly_Groups_TagBind_Request(r *Groups_TagBind_Request) {
	(*r).GroupId = randInt()
	(*r).TagId = randInt()
	(*r).UserId = randInt()
	fillRandomly_Groups_TagBind_Act(&(*r).Act)
}

func TestVK_Groups_TagBind_Success(t *testing.T) {
	values := make(url.Values, 6)
	var req Groups_TagBind_Request
	fillRandomly_Groups_TagBind_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Base_Bool_Response
	fillRandomly_Base_Bool_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "groups.tagBind", values, expectedJSON), token)
	resp, apiErr, err := vk.Groups_TagBind(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Groups_TagBind_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "groups.tagBind", expectedJSON), "")
	resp, apiErr, err := vk.Groups_TagBind(context.Background(), Groups_TagBind_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Groups_TagBind_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Groups_TagBind(context.Background(), Groups_TagBind_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Groups_TagDelete_Request(r *Groups_TagDelete_Request) {
	(*r).GroupId = randInt()
	(*r).TagId = randInt()
}

func TestVK_Groups_TagDelete_Success(t *testing.T) {
	values := make(url.Values, 4)
	var req Groups_TagDelete_Request
	fillRandomly_Groups_TagDelete_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Base_Bool_Response
	fillRandomly_Base_Bool_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "groups.tagDelete", values, expectedJSON), token)
	resp, apiErr, err := vk.Groups_TagDelete(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Groups_TagDelete_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "groups.tagDelete", expectedJSON), "")
	resp, apiErr, err := vk.Groups_TagDelete(context.Background(), Groups_TagDelete_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Groups_TagDelete_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Groups_TagDelete(context.Background(), Groups_TagDelete_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Groups_TagUpdate_Request(r *Groups_TagUpdate_Request) {
	(*r).GroupId = randInt()
	(*r).TagId = randInt()
	(*r).TagName = randString()
}

func TestVK_Groups_TagUpdate_Success(t *testing.T) {
	values := make(url.Values, 5)
	var req Groups_TagUpdate_Request
	fillRandomly_Groups_TagUpdate_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Base_Bool_Response
	fillRandomly_Base_Bool_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "groups.tagUpdate", values, expectedJSON), token)
	resp, apiErr, err := vk.Groups_TagUpdate(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Groups_TagUpdate_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "groups.tagUpdate", expectedJSON), "")
	resp, apiErr, err := vk.Groups_TagUpdate(context.Background(), Groups_TagUpdate_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Groups_TagUpdate_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Groups_TagUpdate(context.Background(), Groups_TagUpdate_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Groups_ToggleMarket_Request(r *Groups_ToggleMarket_Request) {
	(*r).GroupId = randInt()
	fillRandomly_Groups_MarketState(&(*r).State)
	(*r).Ref = new(string)
	*(*r).Ref = randString()
}

func TestVK_Groups_ToggleMarket_Success(t *testing.T) {
	values := make(url.Values, 5)
	var req Groups_ToggleMarket_Request
	fillRandomly_Groups_ToggleMarket_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Base_Ok_Response
	fillRandomly_Base_Ok_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "groups.toggleMarket", values, expectedJSON), token)
	resp, apiErr, err := vk.Groups_ToggleMarket(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Groups_ToggleMarket_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "groups.toggleMarket", expectedJSON), "")
	resp, apiErr, err := vk.Groups_ToggleMarket(context.Background(), Groups_ToggleMarket_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Groups_ToggleMarket_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Groups_ToggleMarket(context.Background(), Groups_ToggleMarket_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Groups_Unban_Request(r *Groups_Unban_Request) {
	(*r).GroupId = randInt()
	(*r).OwnerId = new(int)
	*(*r).OwnerId = randInt()
}

func TestVK_Groups_Unban_Success(t *testing.T) {
	values := make(url.Values, 4)
	var req Groups_Unban_Request
	fillRandomly_Groups_Unban_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Base_Ok_Response
	fillRandomly_Base_Ok_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "groups.unban", values, expectedJSON), token)
	resp, apiErr, err := vk.Groups_Unban(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Groups_Unban_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "groups.unban", expectedJSON), "")
	resp, apiErr, err := vk.Groups_Unban(context.Background(), Groups_Unban_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Groups_Unban_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Groups_Unban(context.Background(), Groups_Unban_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_LeadForms_Create_Request(r *LeadForms_Create_Request) {
	(*r).GroupId = randInt()
	(*r).Name = randString()
	(*r).Title = randString()
	(*r).Description = randString()
	(*r).Questions = randString()
	(*r).PolicyLinkUrl = randString()
	(*r).Photo = new(string)
	*(*r).Photo = randString()
	(*r).Confirmation = new(string)
	*(*r).Confirmation = randString()
	(*r).SiteLinkUrl = new(string)
	*(*r).SiteLinkUrl = randString()
	(*r).Active = new(bool)
	*(*r).Active = randBool()
	(*r).OncePerUser = new(bool)
	*(*r).OncePerUser = randBool()
	(*r).PixelCode = new(string)
	*(*r).PixelCode = randString()
	(*r).NotifyAdmins = new([]int)
	l0 := randIntn(maxArrayLength + 1)
	*(*r).NotifyAdmins = make([]int, l0)
	for i0 := 0; i0 < l0; i0++ {
		(*(*r).NotifyAdmins)[i0] = randInt()
	}
	(*r).NotifyEmails = new([]string)
	l0 = randIntn(maxArrayLength + 1)
	*(*r).NotifyEmails = make([]string, l0)
	for i0 := 0; i0 < l0; i0++ {
		(*(*r).NotifyEmails)[i0] = randString()
	}
}

func TestVK_LeadForms_Create_Success(t *testing.T) {
	values := make(url.Values, 16)
	var req LeadForms_Create_Request
	fillRandomly_LeadForms_Create_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected LeadForms_Create_Response
	fillRandomly_LeadForms_Create_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "leadForms.create", values, expectedJSON), token)
	resp, apiErr, err := vk.LeadForms_Create(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_LeadForms_Create_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "leadForms.create", expectedJSON), "")
	resp, apiErr, err := vk.LeadForms_Create(context.Background(), LeadForms_Create_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_LeadForms_Create_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.LeadForms_Create(context.Background(), LeadForms_Create_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_LeadForms_Delete_Request(r *LeadForms_Delete_Request) {
	(*r).GroupId = randInt()
	(*r).FormId = randInt()
}

func TestVK_LeadForms_Delete_Success(t *testing.T) {
	values := make(url.Values, 4)
	var req LeadForms_Delete_Request
	fillRandomly_LeadForms_Delete_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected LeadForms_Delete_Response
	fillRandomly_LeadForms_Delete_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "leadForms.delete", values, expectedJSON), token)
	resp, apiErr, err := vk.LeadForms_Delete(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_LeadForms_Delete_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "leadForms.delete", expectedJSON), "")
	resp, apiErr, err := vk.LeadForms_Delete(context.Background(), LeadForms_Delete_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_LeadForms_Delete_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.LeadForms_Delete(context.Background(), LeadForms_Delete_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_LeadForms_Get_Request(r *LeadForms_Get_Request) {
	(*r).GroupId = randInt()
	(*r).FormId = randInt()
}

func TestVK_LeadForms_Get_Success(t *testing.T) {
	values := make(url.Values, 4)
	var req LeadForms_Get_Request
	fillRandomly_LeadForms_Get_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected LeadForms_Get_Response
	fillRandomly_LeadForms_Get_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "leadForms.get", values, expectedJSON), token)
	resp, apiErr, err := vk.LeadForms_Get(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_LeadForms_Get_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "leadForms.get", expectedJSON), "")
	resp, apiErr, err := vk.LeadForms_Get(context.Background(), LeadForms_Get_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_LeadForms_Get_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.LeadForms_Get(context.Background(), LeadForms_Get_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_LeadForms_GetLeads_Request(r *LeadForms_GetLeads_Request) {
	(*r).GroupId = randInt()
	(*r).FormId = randInt()
	(*r).Limit = new(int)
	*(*r).Limit = randInt()
	(*r).NextPageToken = new(string)
	*(*r).NextPageToken = randString()
}

func TestVK_LeadForms_GetLeads_Success(t *testing.T) {
	values := make(url.Values, 6)
	var req LeadForms_GetLeads_Request
	fillRandomly_LeadForms_GetLeads_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected LeadForms_GetLeads_Response
	fillRandomly_LeadForms_GetLeads_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "leadForms.getLeads", values, expectedJSON), token)
	resp, apiErr, err := vk.LeadForms_GetLeads(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_LeadForms_GetLeads_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "leadForms.getLeads", expectedJSON), "")
	resp, apiErr, err := vk.LeadForms_GetLeads(context.Background(), LeadForms_GetLeads_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_LeadForms_GetLeads_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.LeadForms_GetLeads(context.Background(), LeadForms_GetLeads_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func TestVK_LeadForms_GetUploadURL_Success(t *testing.T) {
	values := make(url.Values, 2)
	var expected LeadForms_UploadUrl_Response
	fillRandomly_LeadForms_UploadUrl_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "leadForms.getUploadURL", values, expectedJSON), token)
	resp, apiErr, err := vk.LeadForms_GetUploadURL(context.Background())
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_LeadForms_GetUploadURL_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "leadForms.getUploadURL", expectedJSON), "")
	resp, apiErr, err := vk.LeadForms_GetUploadURL(context.Background())
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_LeadForms_GetUploadURL_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.LeadForms_GetUploadURL(context.Background())
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_LeadForms_List_Request(r *LeadForms_List_Request) {
	(*r).GroupId = randInt()
}

func TestVK_LeadForms_List_Success(t *testing.T) {
	values := make(url.Values, 3)
	var req LeadForms_List_Request
	fillRandomly_LeadForms_List_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected LeadForms_List_Response
	fillRandomly_LeadForms_List_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "leadForms.list", values, expectedJSON), token)
	resp, apiErr, err := vk.LeadForms_List(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_LeadForms_List_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "leadForms.list", expectedJSON), "")
	resp, apiErr, err := vk.LeadForms_List(context.Background(), LeadForms_List_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_LeadForms_List_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.LeadForms_List(context.Background(), LeadForms_List_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_LeadForms_Update_Request(r *LeadForms_Update_Request) {
	(*r).GroupId = randInt()
	(*r).FormId = randInt()
	(*r).Name = randString()
	(*r).Title = randString()
	(*r).Description = randString()
	(*r).Questions = randString()
	(*r).PolicyLinkUrl = randString()
	(*r).Photo = new(string)
	*(*r).Photo = randString()
	(*r).Confirmation = new(string)
	*(*r).Confirmation = randString()
	(*r).SiteLinkUrl = new(string)
	*(*r).SiteLinkUrl = randString()
	(*r).Active = new(bool)
	*(*r).Active = randBool()
	(*r).OncePerUser = new(bool)
	*(*r).OncePerUser = randBool()
	(*r).PixelCode = new(string)
	*(*r).PixelCode = randString()
	(*r).NotifyAdmins = new([]int)
	l0 := randIntn(maxArrayLength + 1)
	*(*r).NotifyAdmins = make([]int, l0)
	for i0 := 0; i0 < l0; i0++ {
		(*(*r).NotifyAdmins)[i0] = randInt()
	}
	(*r).NotifyEmails = new([]string)
	l0 = randIntn(maxArrayLength + 1)
	*(*r).NotifyEmails = make([]string, l0)
	for i0 := 0; i0 < l0; i0++ {
		(*(*r).NotifyEmails)[i0] = randString()
	}
}

func TestVK_LeadForms_Update_Success(t *testing.T) {
	values := make(url.Values, 17)
	var req LeadForms_Update_Request
	fillRandomly_LeadForms_Update_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected LeadForms_Create_Response
	fillRandomly_LeadForms_Create_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "leadForms.update", values, expectedJSON), token)
	resp, apiErr, err := vk.LeadForms_Update(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_LeadForms_Update_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "leadForms.update", expectedJSON), "")
	resp, apiErr, err := vk.LeadForms_Update(context.Background(), LeadForms_Update_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_LeadForms_Update_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.LeadForms_Update(context.Background(), LeadForms_Update_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Likes_Add_Request(r *Likes_Add_Request) {
	fillRandomly_Likes_Type(&(*r).Type)
	(*r).OwnerId = new(int)
	*(*r).OwnerId = randInt()
	(*r).ItemId = randInt()
	(*r).AccessKey = new(string)
	*(*r).AccessKey = randString()
}

func TestVK_Likes_Add_Success(t *testing.T) {
	values := make(url.Values, 6)
	var req Likes_Add_Request
	fillRandomly_Likes_Add_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Likes_Add_Response
	fillRandomly_Likes_Add_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "likes.add", values, expectedJSON), token)
	resp, apiErr, err := vk.Likes_Add(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Likes_Add_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "likes.add", expectedJSON), "")
	resp, apiErr, err := vk.Likes_Add(context.Background(), Likes_Add_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Likes_Add_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Likes_Add(context.Background(), Likes_Add_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Likes_Delete_Request(r *Likes_Delete_Request) {
	fillRandomly_Likes_Type(&(*r).Type)
	(*r).OwnerId = new(int)
	*(*r).OwnerId = randInt()
	(*r).ItemId = randInt()
	(*r).AccessKey = new(string)
	*(*r).AccessKey = randString()
}

func TestVK_Likes_Delete_Success(t *testing.T) {
	values := make(url.Values, 6)
	var req Likes_Delete_Request
	fillRandomly_Likes_Delete_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Likes_Delete_Response
	fillRandomly_Likes_Delete_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "likes.delete", values, expectedJSON), token)
	resp, apiErr, err := vk.Likes_Delete(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Likes_Delete_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "likes.delete", expectedJSON), "")
	resp, apiErr, err := vk.Likes_Delete(context.Background(), Likes_Delete_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Likes_Delete_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Likes_Delete(context.Background(), Likes_Delete_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Likes_GetList_Filter(o *Likes_GetList_Filter) {
	switch randIntn(2) {
	case 0:
		*o = "likes"
	case 1:
		*o = "copies"
	}
}

func fillRandomly_Likes_GetList_FriendsOnly(o *Likes_GetList_FriendsOnly) {
	switch randIntn(4) {
	case 0:
		*o = 0
	case 1:
		*o = 1
	case 2:
		*o = 2
	case 3:
		*o = 3
	}
}

func fillRandomly_Likes_GetList_Request(r *Likes_GetList_Request) {
	fillRandomly_Likes_Type(&(*r).Type)
	(*r).OwnerId = new(int)
	*(*r).OwnerId = randInt()
	(*r).ItemId = new(int)
	*(*r).ItemId = randInt()
	(*r).PageUrl = new(string)
	*(*r).PageUrl = randString()
	(*r).Filter = new(Likes_GetList_Filter)
	fillRandomly_Likes_GetList_Filter((*r).Filter)
	(*r).FriendsOnly = new(Likes_GetList_FriendsOnly)
	fillRandomly_Likes_GetList_FriendsOnly((*r).FriendsOnly)
	(*r).Offset = new(int)
	*(*r).Offset = randInt()
	(*r).Count = new(int)
	*(*r).Count = randInt()
	(*r).SkipOwn = new(bool)
	*(*r).SkipOwn = randBool()
}

func TestVK_Likes_GetList_Success(t *testing.T) {
	values := make(url.Values, 12)
	var req Likes_GetList_Request
	fillRandomly_Likes_GetList_Request(&req)
	require.NoError(t, req.fillIn(values))
	setString(values, "extended", "0")
	var expected Likes_GetList_Response
	fillRandomly_Likes_GetList_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "likes.getList", values, expectedJSON), token)
	resp, apiErr, err := vk.Likes_GetList(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Likes_GetList_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "likes.getList", expectedJSON), "")
	resp, apiErr, err := vk.Likes_GetList(context.Background(), Likes_GetList_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Likes_GetList_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Likes_GetList(context.Background(), Likes_GetList_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func TestVK_Likes_GetListExtended_Success(t *testing.T) {
	values := make(url.Values, 12)
	var req Likes_GetList_Request
	fillRandomly_Likes_GetList_Request(&req)
	require.NoError(t, req.fillIn(values))
	setString(values, "extended", "1")
	var expected Likes_GetListExtended_Response
	fillRandomly_Likes_GetListExtended_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "likes.getList", values, expectedJSON), token)
	resp, apiErr, err := vk.Likes_GetListExtended(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Likes_GetListExtended_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "likes.getList", expectedJSON), "")
	resp, apiErr, err := vk.Likes_GetListExtended(context.Background(), Likes_GetList_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Likes_GetListExtended_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Likes_GetListExtended(context.Background(), Likes_GetList_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Likes_IsLiked_Request(r *Likes_IsLiked_Request) {
	(*r).UserId = new(int)
	*(*r).UserId = randInt()
	fillRandomly_Likes_Type(&(*r).Type)
	(*r).OwnerId = new(int)
	*(*r).OwnerId = randInt()
	(*r).ItemId = randInt()
}

func TestVK_Likes_IsLiked_Success(t *testing.T) {
	values := make(url.Values, 6)
	var req Likes_IsLiked_Request
	fillRandomly_Likes_IsLiked_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Likes_IsLiked_Response
	fillRandomly_Likes_IsLiked_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "likes.isLiked", values, expectedJSON), token)
	resp, apiErr, err := vk.Likes_IsLiked(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Likes_IsLiked_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "likes.isLiked", expectedJSON), "")
	resp, apiErr, err := vk.Likes_IsLiked(context.Background(), Likes_IsLiked_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Likes_IsLiked_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Likes_IsLiked(context.Background(), Likes_IsLiked_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Market_Add_Request(r *Market_Add_Request) {
	(*r).OwnerId = randInt()
	(*r).Name = randString()
	(*r).Description = randString()
	(*r).CategoryId = randInt()
	(*r).Price = new(float64)
	*(*r).Price = randFloat()
	(*r).OldPrice = new(float64)
	*(*r).OldPrice = randFloat()
	(*r).Deleted = new(bool)
	*(*r).Deleted = randBool()
	(*r).MainPhotoId = new(int)
	*(*r).MainPhotoId = randInt()
	(*r).PhotoIds = new([]int)
	l0 := randIntn(maxArrayLength + 1)
	*(*r).PhotoIds = make([]int, l0)
	for i0 := 0; i0 < l0; i0++ {
		(*(*r).PhotoIds)[i0] = randInt()
	}
	(*r).Url = new(string)
	*(*r).Url = randString()
	(*r).DimensionWidth = new(int)
	*(*r).DimensionWidth = randInt()
	(*r).DimensionHeight = new(int)
	*(*r).DimensionHeight = randInt()
	(*r).DimensionLength = new(int)
	*(*r).DimensionLength = randInt()
	(*r).Weight = new(int)
	*(*r).Weight = randInt()
	(*r).Sku = new(string)
	*(*r).Sku = randString()
}

func TestVK_Market_Add_Success(t *testing.T) {
	values := make(url.Values, 17)
	var req Market_Add_Request
	fillRandomly_Market_Add_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Market_Add_Response
	fillRandomly_Market_Add_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "market.add", values, expectedJSON), token)
	resp, apiErr, err := vk.Market_Add(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Market_Add_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "market.add", expectedJSON), "")
	resp, apiErr, err := vk.Market_Add(context.Background(), Market_Add_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Market_Add_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Market_Add(context.Background(), Market_Add_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Market_AddAlbum_Request(r *Market_AddAlbum_Request) {
	(*r).OwnerId = randInt()
	(*r).Title = randString()
	(*r).PhotoId = new(int)
	*(*r).PhotoId = randInt()
	(*r).MainAlbum = new(bool)
	*(*r).MainAlbum = randBool()
	(*r).IsHidden = new(bool)
	*(*r).IsHidden = randBool()
}

func TestVK_Market_AddAlbum_Success(t *testing.T) {
	values := make(url.Values, 7)
	var req Market_AddAlbum_Request
	fillRandomly_Market_AddAlbum_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Market_AddAlbum_Response
	fillRandomly_Market_AddAlbum_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "market.addAlbum", values, expectedJSON), token)
	resp, apiErr, err := vk.Market_AddAlbum(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Market_AddAlbum_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "market.addAlbum", expectedJSON), "")
	resp, apiErr, err := vk.Market_AddAlbum(context.Background(), Market_AddAlbum_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Market_AddAlbum_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Market_AddAlbum(context.Background(), Market_AddAlbum_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Market_AddToAlbum_Request(r *Market_AddToAlbum_Request) {
	(*r).OwnerId = randInt()
	(*r).ItemIds = new([]int)
	l0 := randIntn(maxArrayLength + 1)
	*(*r).ItemIds = make([]int, l0)
	for i0 := 0; i0 < l0; i0++ {
		(*(*r).ItemIds)[i0] = randInt()
	}
	(*r).AlbumIds = new([]int)
	l0 = randIntn(maxArrayLength + 1)
	*(*r).AlbumIds = make([]int, l0)
	for i0 := 0; i0 < l0; i0++ {
		(*(*r).AlbumIds)[i0] = randInt()
	}
}

func TestVK_Market_AddToAlbum_Success(t *testing.T) {
	values := make(url.Values, 5)
	var req Market_AddToAlbum_Request
	fillRandomly_Market_AddToAlbum_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Base_Ok_Response
	fillRandomly_Base_Ok_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "market.addToAlbum", values, expectedJSON), token)
	resp, apiErr, err := vk.Market_AddToAlbum(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Market_AddToAlbum_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "market.addToAlbum", expectedJSON), "")
	resp, apiErr, err := vk.Market_AddToAlbum(context.Background(), Market_AddToAlbum_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Market_AddToAlbum_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Market_AddToAlbum(context.Background(), Market_AddToAlbum_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Market_CreateComment_Request(r *Market_CreateComment_Request) {
	(*r).OwnerId = randInt()
	(*r).ItemId = randInt()
	(*r).Message = new(string)
	*(*r).Message = randString()
	(*r).Attachments = new([]string)
	l0 := randIntn(maxArrayLength + 1)
	*(*r).Attachments = make([]string, l0)
	for i0 := 0; i0 < l0; i0++ {
		(*(*r).Attachments)[i0] = randString()
	}
	(*r).FromGroup = new(bool)
	*(*r).FromGroup = randBool()
	(*r).ReplyToComment = new(int)
	*(*r).ReplyToComment = randInt()
	(*r).StickerId = new(int)
	*(*r).StickerId = randInt()
	(*r).Guid = new(string)
	*(*r).Guid = randString()
}

func TestVK_Market_CreateComment_Success(t *testing.T) {
	values := make(url.Values, 10)
	var req Market_CreateComment_Request
	fillRandomly_Market_CreateComment_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Market_CreateComment_Response
	fillRandomly_Market_CreateComment_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "market.createComment", values, expectedJSON), token)
	resp, apiErr, err := vk.Market_CreateComment(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Market_CreateComment_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "market.createComment", expectedJSON), "")
	resp, apiErr, err := vk.Market_CreateComment(context.Background(), Market_CreateComment_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Market_CreateComment_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Market_CreateComment(context.Background(), Market_CreateComment_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Market_Delete_Request(r *Market_Delete_Request) {
	(*r).OwnerId = randInt()
	(*r).ItemId = randInt()
}

func TestVK_Market_Delete_Success(t *testing.T) {
	values := make(url.Values, 4)
	var req Market_Delete_Request
	fillRandomly_Market_Delete_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Base_Ok_Response
	fillRandomly_Base_Ok_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "market.delete", values, expectedJSON), token)
	resp, apiErr, err := vk.Market_Delete(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Market_Delete_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "market.delete", expectedJSON), "")
	resp, apiErr, err := vk.Market_Delete(context.Background(), Market_Delete_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Market_Delete_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Market_Delete(context.Background(), Market_Delete_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Market_DeleteAlbum_Request(r *Market_DeleteAlbum_Request) {
	(*r).OwnerId = randInt()
	(*r).AlbumId = randInt()
}

func TestVK_Market_DeleteAlbum_Success(t *testing.T) {
	values := make(url.Values, 4)
	var req Market_DeleteAlbum_Request
	fillRandomly_Market_DeleteAlbum_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Base_Ok_Response
	fillRandomly_Base_Ok_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "market.deleteAlbum", values, expectedJSON), token)
	resp, apiErr, err := vk.Market_DeleteAlbum(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Market_DeleteAlbum_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "market.deleteAlbum", expectedJSON), "")
	resp, apiErr, err := vk.Market_DeleteAlbum(context.Background(), Market_DeleteAlbum_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Market_DeleteAlbum_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Market_DeleteAlbum(context.Background(), Market_DeleteAlbum_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Market_DeleteComment_Request(r *Market_DeleteComment_Request) {
	(*r).OwnerId = randInt()
	(*r).CommentId = randInt()
}

func TestVK_Market_DeleteComment_Success(t *testing.T) {
	values := make(url.Values, 4)
	var req Market_DeleteComment_Request
	fillRandomly_Market_DeleteComment_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Market_DeleteComment_Response
	fillRandomly_Market_DeleteComment_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "market.deleteComment", values, expectedJSON), token)
	resp, apiErr, err := vk.Market_DeleteComment(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Market_DeleteComment_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "market.deleteComment", expectedJSON), "")
	resp, apiErr, err := vk.Market_DeleteComment(context.Background(), Market_DeleteComment_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Market_DeleteComment_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Market_DeleteComment(context.Background(), Market_DeleteComment_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Market_Edit_Request(r *Market_Edit_Request) {
	(*r).OwnerId = randInt()
	(*r).ItemId = randInt()
	(*r).Name = new(string)
	*(*r).Name = randString()
	(*r).Description = new(string)
	*(*r).Description = randString()
	(*r).CategoryId = new(int)
	*(*r).CategoryId = randInt()
	(*r).Price = new(float64)
	*(*r).Price = randFloat()
	(*r).OldPrice = new(float64)
	*(*r).OldPrice = randFloat()
	(*r).Deleted = new(bool)
	*(*r).Deleted = randBool()
	(*r).MainPhotoId = new(int)
	*(*r).MainPhotoId = randInt()
	(*r).PhotoIds = new([]int)
	l0 := randIntn(maxArrayLength + 1)
	*(*r).PhotoIds = make([]int, l0)
	for i0 := 0; i0 < l0; i0++ {
		(*(*r).PhotoIds)[i0] = randInt()
	}
	(*r).Url = new(string)
	*(*r).Url = randString()
	(*r).DimensionWidth = new(int)
	*(*r).DimensionWidth = randInt()
	(*r).DimensionHeight = new(int)
	*(*r).DimensionHeight = randInt()
	(*r).DimensionLength = new(int)
	*(*r).DimensionLength = randInt()
	(*r).Weight = new(int)
	*(*r).Weight = randInt()
	(*r).Sku = new(string)
	*(*r).Sku = randString()
}

func TestVK_Market_Edit_Success(t *testing.T) {
	values := make(url.Values, 18)
	var req Market_Edit_Request
	fillRandomly_Market_Edit_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Base_Ok_Response
	fillRandomly_Base_Ok_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "market.edit", values, expectedJSON), token)
	resp, apiErr, err := vk.Market_Edit(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Market_Edit_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "market.edit", expectedJSON), "")
	resp, apiErr, err := vk.Market_Edit(context.Background(), Market_Edit_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Market_Edit_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Market_Edit(context.Background(), Market_Edit_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Market_EditAlbum_Request(r *Market_EditAlbum_Request) {
	(*r).OwnerId = randInt()
	(*r).AlbumId = randInt()
	(*r).Title = randString()
	(*r).PhotoId = new(int)
	*(*r).PhotoId = randInt()
	(*r).MainAlbum = new(bool)
	*(*r).MainAlbum = randBool()
	(*r).IsHidden = new(bool)
	*(*r).IsHidden = randBool()
}

func TestVK_Market_EditAlbum_Success(t *testing.T) {
	values := make(url.Values, 8)
	var req Market_EditAlbum_Request
	fillRandomly_Market_EditAlbum_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Base_Ok_Response
	fillRandomly_Base_Ok_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "market.editAlbum", values, expectedJSON), token)
	resp, apiErr, err := vk.Market_EditAlbum(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Market_EditAlbum_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "market.editAlbum", expectedJSON), "")
	resp, apiErr, err := vk.Market_EditAlbum(context.Background(), Market_EditAlbum_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Market_EditAlbum_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Market_EditAlbum(context.Background(), Market_EditAlbum_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Market_EditComment_Request(r *Market_EditComment_Request) {
	(*r).OwnerId = randInt()
	(*r).CommentId = randInt()
	(*r).Message = new(string)
	*(*r).Message = randString()
	(*r).Attachments = new([]string)
	l0 := randIntn(maxArrayLength + 1)
	*(*r).Attachments = make([]string, l0)
	for i0 := 0; i0 < l0; i0++ {
		(*(*r).Attachments)[i0] = randString()
	}
}

func TestVK_Market_EditComment_Success(t *testing.T) {
	values := make(url.Values, 6)
	var req Market_EditComment_Request
	fillRandomly_Market_EditComment_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Base_Ok_Response
	fillRandomly_Base_Ok_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "market.editComment", values, expectedJSON), token)
	resp, apiErr, err := vk.Market_EditComment(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Market_EditComment_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "market.editComment", expectedJSON), "")
	resp, apiErr, err := vk.Market_EditComment(context.Background(), Market_EditComment_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Market_EditComment_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Market_EditComment(context.Background(), Market_EditComment_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Market_EditOrder_PaymentStatus(o *Market_EditOrder_PaymentStatus) {
	switch randIntn(3) {
	case 0:
		*o = "not_paid"
	case 1:
		*o = "paid"
	case 2:
		*o = "returned"
	}
}

func fillRandomly_Market_EditOrder_Request(r *Market_EditOrder_Request) {
	(*r).UserId = randInt()
	(*r).OrderId = randInt()
	(*r).MerchantComment = new(string)
	*(*r).MerchantComment = randString()
	(*r).Status = new(int)
	*(*r).Status = randInt()
	(*r).TrackNumber = new(string)
	*(*r).TrackNumber = randString()
	(*r).PaymentStatus = new(Market_EditOrder_PaymentStatus)
	fillRandomly_Market_EditOrder_PaymentStatus((*r).PaymentStatus)
	(*r).DeliveryPrice = new(int)
	*(*r).DeliveryPrice = randInt()
	(*r).Width = new(int)
	*(*r).Width = randInt()
	(*r).Length = new(int)
	*(*r).Length = randInt()
	(*r).Height = new(int)
	*(*r).Height = randInt()
	(*r).Weight = new(int)
	*(*r).Weight = randInt()
}

func TestVK_Market_EditOrder_Success(t *testing.T) {
	values := make(url.Values, 13)
	var req Market_EditOrder_Request
	fillRandomly_Market_EditOrder_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Base_Ok_Response
	fillRandomly_Base_Ok_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "market.editOrder", values, expectedJSON), token)
	resp, apiErr, err := vk.Market_EditOrder(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Market_EditOrder_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "market.editOrder", expectedJSON), "")
	resp, apiErr, err := vk.Market_EditOrder(context.Background(), Market_EditOrder_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Market_EditOrder_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Market_EditOrder(context.Background(), Market_EditOrder_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Market_Get_Request(r *Market_Get_Request) {
	(*r).OwnerId = randInt()
	(*r).AlbumId = new(int)
	*(*r).AlbumId = randInt()
	(*r).Count = new(int)
	*(*r).Count = randInt()
	(*r).Offset = new(int)
	*(*r).Offset = randInt()
	(*r).DateFrom = new(string)
	*(*r).DateFrom = randString()
	(*r).DateTo = new(string)
	*(*r).DateTo = randString()
	(*r).NeedVariants = new(bool)
	*(*r).NeedVariants = randBool()
	(*r).WithDisabled = new(bool)
	*(*r).WithDisabled = randBool()
}

func TestVK_Market_Get_Success(t *testing.T) {
	values := make(url.Values, 11)
	var req Market_Get_Request
	fillRandomly_Market_Get_Request(&req)
	require.NoError(t, req.fillIn(values))
	setString(values, "extended", "0")
	var expected Market_Get_Response
	fillRandomly_Market_Get_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "market.get", values, expectedJSON), token)
	resp, apiErr, err := vk.Market_Get(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Market_Get_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "market.get", expectedJSON), "")
	resp, apiErr, err := vk.Market_Get(context.Background(), Market_Get_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Market_Get_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Market_Get(context.Background(), Market_Get_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func TestVK_Market_GetExtended_Success(t *testing.T) {
	values := make(url.Values, 11)
	var req Market_Get_Request
	fillRandomly_Market_Get_Request(&req)
	require.NoError(t, req.fillIn(values))
	setString(values, "extended", "1")
	var expected Market_GetExtended_Response
	fillRandomly_Market_GetExtended_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "market.get", values, expectedJSON), token)
	resp, apiErr, err := vk.Market_GetExtended(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Market_GetExtended_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "market.get", expectedJSON), "")
	resp, apiErr, err := vk.Market_GetExtended(context.Background(), Market_Get_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Market_GetExtended_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Market_GetExtended(context.Background(), Market_Get_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Market_GetAlbumById_Request(r *Market_GetAlbumById_Request) {
	(*r).OwnerId = randInt()
	(*r).AlbumIds = new([]int)
	l0 := randIntn(maxArrayLength + 1)
	*(*r).AlbumIds = make([]int, l0)
	for i0 := 0; i0 < l0; i0++ {
		(*(*r).AlbumIds)[i0] = randInt()
	}
}

func TestVK_Market_GetAlbumById_Success(t *testing.T) {
	values := make(url.Values, 4)
	var req Market_GetAlbumById_Request
	fillRandomly_Market_GetAlbumById_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Market_GetAlbumById_Response
	fillRandomly_Market_GetAlbumById_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "market.getAlbumById", values, expectedJSON), token)
	resp, apiErr, err := vk.Market_GetAlbumById(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Market_GetAlbumById_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "market.getAlbumById", expectedJSON), "")
	resp, apiErr, err := vk.Market_GetAlbumById(context.Background(), Market_GetAlbumById_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Market_GetAlbumById_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Market_GetAlbumById(context.Background(), Market_GetAlbumById_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Market_GetAlbums_Request(r *Market_GetAlbums_Request) {
	(*r).OwnerId = randInt()
	(*r).Offset = new(int)
	*(*r).Offset = randInt()
	(*r).Count = new(int)
	*(*r).Count = randInt()
}

func TestVK_Market_GetAlbums_Success(t *testing.T) {
	values := make(url.Values, 5)
	var req Market_GetAlbums_Request
	fillRandomly_Market_GetAlbums_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Market_GetAlbums_Response
	fillRandomly_Market_GetAlbums_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "market.getAlbums", values, expectedJSON), token)
	resp, apiErr, err := vk.Market_GetAlbums(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Market_GetAlbums_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "market.getAlbums", expectedJSON), "")
	resp, apiErr, err := vk.Market_GetAlbums(context.Background(), Market_GetAlbums_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Market_GetAlbums_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Market_GetAlbums(context.Background(), Market_GetAlbums_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Market_GetById_Request(r *Market_GetById_Request) {
	(*r).ItemIds = new([]string)
	l0 := randIntn(maxArrayLength + 1)
	*(*r).ItemIds = make([]string, l0)
	for i0 := 0; i0 < l0; i0++ {
		(*(*r).ItemIds)[i0] = randString()
	}
}

func TestVK_Market_GetById_Success(t *testing.T) {
	values := make(url.Values, 4)
	var req Market_GetById_Request
	fillRandomly_Market_GetById_Request(&req)
	require.NoError(t, req.fillIn(values))
	setString(values, "extended", "0")
	var expected Market_GetById_Response
	fillRandomly_Market_GetById_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "market.getById", values, expectedJSON), token)
	resp, apiErr, err := vk.Market_GetById(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Market_GetById_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "market.getById", expectedJSON), "")
	resp, apiErr, err := vk.Market_GetById(context.Background(), Market_GetById_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Market_GetById_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Market_GetById(context.Background(), Market_GetById_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func TestVK_Market_GetByIdExtended_Success(t *testing.T) {
	values := make(url.Values, 4)
	var req Market_GetById_Request
	fillRandomly_Market_GetById_Request(&req)
	require.NoError(t, req.fillIn(values))
	setString(values, "extended", "1")
	var expected Market_GetByIdExtended_Response
	fillRandomly_Market_GetByIdExtended_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "market.getById", values, expectedJSON), token)
	resp, apiErr, err := vk.Market_GetByIdExtended(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Market_GetByIdExtended_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "market.getById", expectedJSON), "")
	resp, apiErr, err := vk.Market_GetByIdExtended(context.Background(), Market_GetById_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Market_GetByIdExtended_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Market_GetByIdExtended(context.Background(), Market_GetById_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Market_GetCategories_Request(r *Market_GetCategories_Request) {
	(*r).Count = new(int)
	*(*r).Count = randInt()
	(*r).Offset = new(int)
	*(*r).Offset = randInt()
}

func TestVK_Market_GetCategories_Success(t *testing.T) {
	values := make(url.Values, 4)
	var req Market_GetCategories_Request
	fillRandomly_Market_GetCategories_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Market_GetCategories_Response
	fillRandomly_Market_GetCategories_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "market.getCategories", values, expectedJSON), token)
	resp, apiErr, err := vk.Market_GetCategories(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Market_GetCategories_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "market.getCategories", expectedJSON), "")
	resp, apiErr, err := vk.Market_GetCategories(context.Background(), Market_GetCategories_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Market_GetCategories_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Market_GetCategories(context.Background(), Market_GetCategories_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Market_GetComments_Sort(o *Market_GetComments_Sort) {
	switch randIntn(2) {
	case 0:
		*o = "asc"
	case 1:
		*o = "desc"
	}
}

func fillRandomly_Market_GetComments_Request(r *Market_GetComments_Request) {
	(*r).OwnerId = randInt()
	(*r).ItemId = randInt()
	(*r).NeedLikes = new(bool)
	*(*r).NeedLikes = randBool()
	(*r).StartCommentId = new(int)
	*(*r).StartCommentId = randInt()
	(*r).Offset = new(int)
	*(*r).Offset = randInt()
	(*r).Count = new(int)
	*(*r).Count = randInt()
	(*r).Sort = new(Market_GetComments_Sort)
	fillRandomly_Market_GetComments_Sort((*r).Sort)
	(*r).Extended = new(bool)
	*(*r).Extended = randBool()
	(*r).Fields = new([]Users_Fields)
	l0 := randIntn(maxArrayLength + 1)
	*(*r).Fields = make([]Users_Fields, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomly_Users_Fields(&(*(*r).Fields)[i0])
	}
}

func TestVK_Market_GetComments_Success(t *testing.T) {
	values := make(url.Values, 11)
	var req Market_GetComments_Request
	fillRandomly_Market_GetComments_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Market_GetComments_Response
	fillRandomly_Market_GetComments_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "market.getComments", values, expectedJSON), token)
	resp, apiErr, err := vk.Market_GetComments(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Market_GetComments_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "market.getComments", expectedJSON), "")
	resp, apiErr, err := vk.Market_GetComments(context.Background(), Market_GetComments_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Market_GetComments_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Market_GetComments(context.Background(), Market_GetComments_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Market_GetGroupOrders_Request(r *Market_GetGroupOrders_Request) {
	(*r).GroupId = randInt()
	(*r).Offset = new(int)
	*(*r).Offset = randInt()
	(*r).Count = new(int)
	*(*r).Count = randInt()
}

func TestVK_Market_GetGroupOrders_Success(t *testing.T) {
	values := make(url.Values, 5)
	var req Market_GetGroupOrders_Request
	fillRandomly_Market_GetGroupOrders_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Market_GetGroupOrders_Response
	fillRandomly_Market_GetGroupOrders_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "market.getGroupOrders", values, expectedJSON), token)
	resp, apiErr, err := vk.Market_GetGroupOrders(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Market_GetGroupOrders_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "market.getGroupOrders", expectedJSON), "")
	resp, apiErr, err := vk.Market_GetGroupOrders(context.Background(), Market_GetGroupOrders_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Market_GetGroupOrders_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Market_GetGroupOrders(context.Background(), Market_GetGroupOrders_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Market_GetOrderById_Request(r *Market_GetOrderById_Request) {
	(*r).UserId = new(int)
	*(*r).UserId = randInt()
	(*r).OrderId = randInt()
	(*r).Extended = new(bool)
	*(*r).Extended = randBool()
}

func TestVK_Market_GetOrderById_Success(t *testing.T) {
	values := make(url.Values, 5)
	var req Market_GetOrderById_Request
	fillRandomly_Market_GetOrderById_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Market_GetOrderById_Response
	fillRandomly_Market_GetOrderById_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "market.getOrderById", values, expectedJSON), token)
	resp, apiErr, err := vk.Market_GetOrderById(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Market_GetOrderById_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "market.getOrderById", expectedJSON), "")
	resp, apiErr, err := vk.Market_GetOrderById(context.Background(), Market_GetOrderById_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Market_GetOrderById_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Market_GetOrderById(context.Background(), Market_GetOrderById_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Market_GetOrderItems_Request(r *Market_GetOrderItems_Request) {
	(*r).UserId = new(int)
	*(*r).UserId = randInt()
	(*r).OrderId = randInt()
	(*r).Offset = new(int)
	*(*r).Offset = randInt()
	(*r).Count = new(int)
	*(*r).Count = randInt()
}

func TestVK_Market_GetOrderItems_Success(t *testing.T) {
	values := make(url.Values, 6)
	var req Market_GetOrderItems_Request
	fillRandomly_Market_GetOrderItems_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Market_GetOrderItems_Response
	fillRandomly_Market_GetOrderItems_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "market.getOrderItems", values, expectedJSON), token)
	resp, apiErr, err := vk.Market_GetOrderItems(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Market_GetOrderItems_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "market.getOrderItems", expectedJSON), "")
	resp, apiErr, err := vk.Market_GetOrderItems(context.Background(), Market_GetOrderItems_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Market_GetOrderItems_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Market_GetOrderItems(context.Background(), Market_GetOrderItems_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Market_GetOrders_Request(r *Market_GetOrders_Request) {
	(*r).Offset = new(int)
	*(*r).Offset = randInt()
	(*r).Count = new(int)
	*(*r).Count = randInt()
	(*r).DateFrom = new(string)
	*(*r).DateFrom = randString()
	(*r).DateTo = new(string)
	*(*r).DateTo = randString()
}

func TestVK_Market_GetOrders_Success(t *testing.T) {
	values := make(url.Values, 7)
	var req Market_GetOrders_Request
	fillRandomly_Market_GetOrders_Request(&req)
	require.NoError(t, req.fillIn(values))
	setString(values, "extended", "0")
	var expected Market_GetOrders_Response
	fillRandomly_Market_GetOrders_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "market.getOrders", values, expectedJSON), token)
	resp, apiErr, err := vk.Market_GetOrders(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Market_GetOrders_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "market.getOrders", expectedJSON), "")
	resp, apiErr, err := vk.Market_GetOrders(context.Background(), Market_GetOrders_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Market_GetOrders_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Market_GetOrders(context.Background(), Market_GetOrders_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func TestVK_Market_GetOrdersExtended_Success(t *testing.T) {
	values := make(url.Values, 7)
	var req Market_GetOrders_Request
	fillRandomly_Market_GetOrders_Request(&req)
	require.NoError(t, req.fillIn(values))
	setString(values, "extended", "1")
	var expected Market_GetOrdersExtended_Response
	fillRandomly_Market_GetOrdersExtended_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "market.getOrders", values, expectedJSON), token)
	resp, apiErr, err := vk.Market_GetOrdersExtended(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Market_GetOrdersExtended_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "market.getOrders", expectedJSON), "")
	resp, apiErr, err := vk.Market_GetOrdersExtended(context.Background(), Market_GetOrders_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Market_GetOrdersExtended_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Market_GetOrdersExtended(context.Background(), Market_GetOrders_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Market_RemoveFromAlbum_Request(r *Market_RemoveFromAlbum_Request) {
	(*r).OwnerId = randInt()
	(*r).ItemId = randInt()
	(*r).AlbumIds = new([]int)
	l0 := randIntn(maxArrayLength + 1)
	*(*r).AlbumIds = make([]int, l0)
	for i0 := 0; i0 < l0; i0++ {
		(*(*r).AlbumIds)[i0] = randInt()
	}
}

func TestVK_Market_RemoveFromAlbum_Success(t *testing.T) {
	values := make(url.Values, 5)
	var req Market_RemoveFromAlbum_Request
	fillRandomly_Market_RemoveFromAlbum_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Base_Ok_Response
	fillRandomly_Base_Ok_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "market.removeFromAlbum", values, expectedJSON), token)
	resp, apiErr, err := vk.Market_RemoveFromAlbum(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Market_RemoveFromAlbum_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "market.removeFromAlbum", expectedJSON), "")
	resp, apiErr, err := vk.Market_RemoveFromAlbum(context.Background(), Market_RemoveFromAlbum_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Market_RemoveFromAlbum_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Market_RemoveFromAlbum(context.Background(), Market_RemoveFromAlbum_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Market_ReorderAlbums_Request(r *Market_ReorderAlbums_Request) {
	(*r).OwnerId = randInt()
	(*r).AlbumId = randInt()
	(*r).Before = new(int)
	*(*r).Before = randInt()
	(*r).After = new(int)
	*(*r).After = randInt()
}

func TestVK_Market_ReorderAlbums_Success(t *testing.T) {
	values := make(url.Values, 6)
	var req Market_ReorderAlbums_Request
	fillRandomly_Market_ReorderAlbums_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Base_Ok_Response
	fillRandomly_Base_Ok_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "market.reorderAlbums", values, expectedJSON), token)
	resp, apiErr, err := vk.Market_ReorderAlbums(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Market_ReorderAlbums_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "market.reorderAlbums", expectedJSON), "")
	resp, apiErr, err := vk.Market_ReorderAlbums(context.Background(), Market_ReorderAlbums_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Market_ReorderAlbums_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Market_ReorderAlbums(context.Background(), Market_ReorderAlbums_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Market_ReorderItems_Request(r *Market_ReorderItems_Request) {
	(*r).OwnerId = randInt()
	(*r).AlbumId = new(int)
	*(*r).AlbumId = randInt()
	(*r).ItemId = randInt()
	(*r).Before = new(int)
	*(*r).Before = randInt()
	(*r).After = new(int)
	*(*r).After = randInt()
}

func TestVK_Market_ReorderItems_Success(t *testing.T) {
	values := make(url.Values, 7)
	var req Market_ReorderItems_Request
	fillRandomly_Market_ReorderItems_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Base_Ok_Response
	fillRandomly_Base_Ok_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "market.reorderItems", values, expectedJSON), token)
	resp, apiErr, err := vk.Market_ReorderItems(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Market_ReorderItems_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "market.reorderItems", expectedJSON), "")
	resp, apiErr, err := vk.Market_ReorderItems(context.Background(), Market_ReorderItems_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Market_ReorderItems_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Market_ReorderItems(context.Background(), Market_ReorderItems_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Market_Report_Reason(o *Market_Report_Reason) {
	switch randIntn(7) {
	case 0:
		*o = 0
	case 1:
		*o = 1
	case 2:
		*o = 2
	case 3:
		*o = 3
	case 4:
		*o = 4
	case 5:
		*o = 5
	case 6:
		*o = 6
	}
}

func fillRandomly_Market_Report_Request(r *Market_Report_Request) {
	(*r).OwnerId = randInt()
	(*r).ItemId = randInt()
	(*r).Reason = new(Market_Report_Reason)
	fillRandomly_Market_Report_Reason((*r).Reason)
}

func TestVK_Market_Report_Success(t *testing.T) {
	values := make(url.Values, 5)
	var req Market_Report_Request
	fillRandomly_Market_Report_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Base_Ok_Response
	fillRandomly_Base_Ok_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "market.report", values, expectedJSON), token)
	resp, apiErr, err := vk.Market_Report(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Market_Report_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "market.report", expectedJSON), "")
	resp, apiErr, err := vk.Market_Report(context.Background(), Market_Report_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Market_Report_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Market_Report(context.Background(), Market_Report_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Market_ReportComment_Reason(o *Market_ReportComment_Reason) {
	switch randIntn(7) {
	case 0:
		*o = 0
	case 1:
		*o = 1
	case 2:
		*o = 2
	case 3:
		*o = 3
	case 4:
		*o = 4
	case 5:
		*o = 5
	case 6:
		*o = 6
	}
}

func fillRandomly_Market_ReportComment_Request(r *Market_ReportComment_Request) {
	(*r).OwnerId = randInt()
	(*r).CommentId = randInt()
	fillRandomly_Market_ReportComment_Reason(&(*r).Reason)
}

func TestVK_Market_ReportComment_Success(t *testing.T) {
	values := make(url.Values, 5)
	var req Market_ReportComment_Request
	fillRandomly_Market_ReportComment_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Base_Ok_Response
	fillRandomly_Base_Ok_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "market.reportComment", values, expectedJSON), token)
	resp, apiErr, err := vk.Market_ReportComment(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Market_ReportComment_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "market.reportComment", expectedJSON), "")
	resp, apiErr, err := vk.Market_ReportComment(context.Background(), Market_ReportComment_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Market_ReportComment_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Market_ReportComment(context.Background(), Market_ReportComment_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Market_Restore_Request(r *Market_Restore_Request) {
	(*r).OwnerId = randInt()
	(*r).ItemId = randInt()
}

func TestVK_Market_Restore_Success(t *testing.T) {
	values := make(url.Values, 4)
	var req Market_Restore_Request
	fillRandomly_Market_Restore_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Base_Ok_Response
	fillRandomly_Base_Ok_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "market.restore", values, expectedJSON), token)
	resp, apiErr, err := vk.Market_Restore(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Market_Restore_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "market.restore", expectedJSON), "")
	resp, apiErr, err := vk.Market_Restore(context.Background(), Market_Restore_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Market_Restore_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Market_Restore(context.Background(), Market_Restore_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Market_RestoreComment_Request(r *Market_RestoreComment_Request) {
	(*r).OwnerId = randInt()
	(*r).CommentId = randInt()
}

func TestVK_Market_RestoreComment_Success(t *testing.T) {
	values := make(url.Values, 4)
	var req Market_RestoreComment_Request
	fillRandomly_Market_RestoreComment_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Market_RestoreComment_Response
	fillRandomly_Market_RestoreComment_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "market.restoreComment", values, expectedJSON), token)
	resp, apiErr, err := vk.Market_RestoreComment(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Market_RestoreComment_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "market.restoreComment", expectedJSON), "")
	resp, apiErr, err := vk.Market_RestoreComment(context.Background(), Market_RestoreComment_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Market_RestoreComment_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Market_RestoreComment(context.Background(), Market_RestoreComment_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Market_Search_Sort(o *Market_Search_Sort) {
	switch randIntn(4) {
	case 0:
		*o = 0
	case 1:
		*o = 1
	case 2:
		*o = 2
	case 3:
		*o = 3
	}
}

func fillRandomly_Market_Search_Rev(o *Market_Search_Rev) {
	switch randIntn(2) {
	case 0:
		*o = 0
	case 1:
		*o = 1
	}
}

func fillRandomly_Market_Search_Request(r *Market_Search_Request) {
	(*r).OwnerId = randInt()
	(*r).AlbumId = new(int)
	*(*r).AlbumId = randInt()
	(*r).Q = new(string)
	*(*r).Q = randString()
	(*r).PriceFrom = new(int)
	*(*r).PriceFrom = randInt()
	(*r).PriceTo = new(int)
	*(*r).PriceTo = randInt()
	(*r).Sort = new(Market_Search_Sort)
	fillRandomly_Market_Search_Sort((*r).Sort)
	(*r).Rev = new(Market_Search_Rev)
	fillRandomly_Market_Search_Rev((*r).Rev)
	(*r).Offset = new(int)
	*(*r).Offset = randInt()
	(*r).Count = new(int)
	*(*r).Count = randInt()
	(*r).Status = new([]int)
	l0 := randIntn(maxArrayLength + 1)
	*(*r).Status = make([]int, l0)
	for i0 := 0; i0 < l0; i0++ {
		(*(*r).Status)[i0] = randInt()
	}
	(*r).NeedVariants = new(bool)
	*(*r).NeedVariants = randBool()
}

func TestVK_Market_Search_Success(t *testing.T) {
	values := make(url.Values, 14)
	var req Market_Search_Request
	fillRandomly_Market_Search_Request(&req)
	require.NoError(t, req.fillIn(values))
	setString(values, "extended", "0")
	var expected Market_Search_Response
	fillRandomly_Market_Search_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "market.search", values, expectedJSON), token)
	resp, apiErr, err := vk.Market_Search(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Market_Search_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "market.search", expectedJSON), "")
	resp, apiErr, err := vk.Market_Search(context.Background(), Market_Search_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Market_Search_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Market_Search(context.Background(), Market_Search_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func TestVK_Market_SearchExtended_Success(t *testing.T) {
	values := make(url.Values, 14)
	var req Market_Search_Request
	fillRandomly_Market_Search_Request(&req)
	require.NoError(t, req.fillIn(values))
	setString(values, "extended", "1")
	var expected Market_SearchExtended_Response
	fillRandomly_Market_SearchExtended_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "market.search", values, expectedJSON), token)
	resp, apiErr, err := vk.Market_SearchExtended(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Market_SearchExtended_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "market.search", expectedJSON), "")
	resp, apiErr, err := vk.Market_SearchExtended(context.Background(), Market_Search_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Market_SearchExtended_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Market_SearchExtended(context.Background(), Market_Search_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Market_SearchItems_SortBy(o *Market_SearchItems_SortBy) {
	switch randIntn(3) {
	case 0:
		*o = 1
	case 1:
		*o = 2
	case 2:
		*o = 3
	}
}

func fillRandomly_Market_SearchItems_SortDirection(o *Market_SearchItems_SortDirection) {
	switch randIntn(2) {
	case 0:
		*o = 0
	case 1:
		*o = 1
	}
}

func fillRandomly_Market_SearchItems_Request(r *Market_SearchItems_Request) {
	(*r).Q = randString()
	(*r).Offset = new(int)
	*(*r).Offset = randInt()
	(*r).Count = new(int)
	*(*r).Count = randInt()
	(*r).CategoryId = new(int)
	*(*r).CategoryId = randInt()
	(*r).PriceFrom = new(int)
	*(*r).PriceFrom = randInt()
	(*r).PriceTo = new(int)
	*(*r).PriceTo = randInt()
	(*r).SortBy = new(Market_SearchItems_SortBy)
	fillRandomly_Market_SearchItems_SortBy((*r).SortBy)
	(*r).SortDirection = new(Market_SearchItems_SortDirection)
	fillRandomly_Market_SearchItems_SortDirection((*r).SortDirection)
	(*r).Country = new(int)
	*(*r).Country = randInt()
	(*r).City = new(int)
	*(*r).City = randInt()
}

func TestVK_Market_SearchItems_Success(t *testing.T) {
	values := make(url.Values, 12)
	var req Market_SearchItems_Request
	fillRandomly_Market_SearchItems_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Market_Search_Response
	fillRandomly_Market_Search_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "market.searchItems", values, expectedJSON), token)
	resp, apiErr, err := vk.Market_SearchItems(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Market_SearchItems_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "market.searchItems", expectedJSON), "")
	resp, apiErr, err := vk.Market_SearchItems(context.Background(), Market_SearchItems_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Market_SearchItems_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Market_SearchItems(context.Background(), Market_SearchItems_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Messages_AddChatUser_Request(r *Messages_AddChatUser_Request) {
	(*r).ChatId = randInt()
	(*r).UserId = new(int)
	*(*r).UserId = randInt()
	(*r).VisibleMessagesCount = new(int)
	*(*r).VisibleMessagesCount = randInt()
}

func TestVK_Messages_AddChatUser_Success(t *testing.T) {
	values := make(url.Values, 5)
	var req Messages_AddChatUser_Request
	fillRandomly_Messages_AddChatUser_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Base_Ok_Response
	fillRandomly_Base_Ok_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "messages.addChatUser", values, expectedJSON), token)
	resp, apiErr, err := vk.Messages_AddChatUser(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Messages_AddChatUser_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "messages.addChatUser", expectedJSON), "")
	resp, apiErr, err := vk.Messages_AddChatUser(context.Background(), Messages_AddChatUser_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Messages_AddChatUser_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Messages_AddChatUser(context.Background(), Messages_AddChatUser_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Messages_AllowMessagesFromGroup_Request(r *Messages_AllowMessagesFromGroup_Request) {
	(*r).GroupId = randInt()
	(*r).Key = new(string)
	*(*r).Key = randString()
}

func TestVK_Messages_AllowMessagesFromGroup_Success(t *testing.T) {
	values := make(url.Values, 4)
	var req Messages_AllowMessagesFromGroup_Request
	fillRandomly_Messages_AllowMessagesFromGroup_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Base_Ok_Response
	fillRandomly_Base_Ok_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "messages.allowMessagesFromGroup", values, expectedJSON), token)
	resp, apiErr, err := vk.Messages_AllowMessagesFromGroup(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Messages_AllowMessagesFromGroup_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "messages.allowMessagesFromGroup", expectedJSON), "")
	resp, apiErr, err := vk.Messages_AllowMessagesFromGroup(context.Background(), Messages_AllowMessagesFromGroup_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Messages_AllowMessagesFromGroup_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Messages_AllowMessagesFromGroup(context.Background(), Messages_AllowMessagesFromGroup_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Messages_CreateChat_Request(r *Messages_CreateChat_Request) {
	(*r).UserIds = new([]int)
	l0 := randIntn(maxArrayLength + 1)
	*(*r).UserIds = make([]int, l0)
	for i0 := 0; i0 < l0; i0++ {
		(*(*r).UserIds)[i0] = randInt()
	}
	(*r).Title = new(string)
	*(*r).Title = randString()
	(*r).GroupId = new(int)
	*(*r).GroupId = randInt()
}

func TestVK_Messages_CreateChat_Success(t *testing.T) {
	values := make(url.Values, 5)
	var req Messages_CreateChat_Request
	fillRandomly_Messages_CreateChat_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Messages_CreateChat_Response
	fillRandomly_Messages_CreateChat_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "messages.createChat", values, expectedJSON), token)
	resp, apiErr, err := vk.Messages_CreateChat(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Messages_CreateChat_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "messages.createChat", expectedJSON), "")
	resp, apiErr, err := vk.Messages_CreateChat(context.Background(), Messages_CreateChat_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Messages_CreateChat_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Messages_CreateChat(context.Background(), Messages_CreateChat_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Messages_Delete_Request(r *Messages_Delete_Request) {
	(*r).MessageIds = new([]int)
	l0 := randIntn(maxArrayLength + 1)
	*(*r).MessageIds = make([]int, l0)
	for i0 := 0; i0 < l0; i0++ {
		(*(*r).MessageIds)[i0] = randInt()
	}
	(*r).Spam = new(bool)
	*(*r).Spam = randBool()
	(*r).GroupId = new(int)
	*(*r).GroupId = randInt()
	(*r).DeleteForAll = new(bool)
	*(*r).DeleteForAll = randBool()
	(*r).PeerId = new(int)
	*(*r).PeerId = randInt()
	(*r).Cmids = new([]int)
	l0 = randIntn(maxArrayLength + 1)
	*(*r).Cmids = make([]int, l0)
	for i0 := 0; i0 < l0; i0++ {
		(*(*r).Cmids)[i0] = randInt()
	}
}

func TestVK_Messages_Delete_Success(t *testing.T) {
	values := make(url.Values, 8)
	var req Messages_Delete_Request
	fillRandomly_Messages_Delete_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Messages_Delete_Response
	fillRandomly_Messages_Delete_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "messages.delete", values, expectedJSON), token)
	resp, apiErr, err := vk.Messages_Delete(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Messages_Delete_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "messages.delete", expectedJSON), "")
	resp, apiErr, err := vk.Messages_Delete(context.Background(), Messages_Delete_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Messages_Delete_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Messages_Delete(context.Background(), Messages_Delete_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Messages_DeleteChatPhoto_Request(r *Messages_DeleteChatPhoto_Request) {
	(*r).ChatId = randInt()
	(*r).GroupId = new(int)
	*(*r).GroupId = randInt()
}

func TestVK_Messages_DeleteChatPhoto_Success(t *testing.T) {
	values := make(url.Values, 4)
	var req Messages_DeleteChatPhoto_Request
	fillRandomly_Messages_DeleteChatPhoto_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Messages_DeleteChatPhoto_Response
	fillRandomly_Messages_DeleteChatPhoto_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "messages.deleteChatPhoto", values, expectedJSON), token)
	resp, apiErr, err := vk.Messages_DeleteChatPhoto(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Messages_DeleteChatPhoto_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "messages.deleteChatPhoto", expectedJSON), "")
	resp, apiErr, err := vk.Messages_DeleteChatPhoto(context.Background(), Messages_DeleteChatPhoto_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Messages_DeleteChatPhoto_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Messages_DeleteChatPhoto(context.Background(), Messages_DeleteChatPhoto_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Messages_DeleteConversation_Request(r *Messages_DeleteConversation_Request) {
	(*r).UserId = new(int)
	*(*r).UserId = randInt()
	(*r).PeerId = new(int)
	*(*r).PeerId = randInt()
	(*r).GroupId = new(int)
	*(*r).GroupId = randInt()
}

func TestVK_Messages_DeleteConversation_Success(t *testing.T) {
	values := make(url.Values, 5)
	var req Messages_DeleteConversation_Request
	fillRandomly_Messages_DeleteConversation_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Messages_DeleteConversation_Response
	fillRandomly_Messages_DeleteConversation_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "messages.deleteConversation", values, expectedJSON), token)
	resp, apiErr, err := vk.Messages_DeleteConversation(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Messages_DeleteConversation_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "messages.deleteConversation", expectedJSON), "")
	resp, apiErr, err := vk.Messages_DeleteConversation(context.Background(), Messages_DeleteConversation_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Messages_DeleteConversation_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Messages_DeleteConversation(context.Background(), Messages_DeleteConversation_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Messages_DenyMessagesFromGroup_Request(r *Messages_DenyMessagesFromGroup_Request) {
	(*r).GroupId = randInt()
}

func TestVK_Messages_DenyMessagesFromGroup_Success(t *testing.T) {
	values := make(url.Values, 3)
	var req Messages_DenyMessagesFromGroup_Request
	fillRandomly_Messages_DenyMessagesFromGroup_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Base_Ok_Response
	fillRandomly_Base_Ok_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "messages.denyMessagesFromGroup", values, expectedJSON), token)
	resp, apiErr, err := vk.Messages_DenyMessagesFromGroup(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Messages_DenyMessagesFromGroup_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "messages.denyMessagesFromGroup", expectedJSON), "")
	resp, apiErr, err := vk.Messages_DenyMessagesFromGroup(context.Background(), Messages_DenyMessagesFromGroup_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Messages_DenyMessagesFromGroup_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Messages_DenyMessagesFromGroup(context.Background(), Messages_DenyMessagesFromGroup_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Messages_Edit_Request(r *Messages_Edit_Request) {
	(*r).PeerId = randInt()
	(*r).Message = new(string)
	*(*r).Message = randString()
	(*r).Lat = new(float64)
	*(*r).Lat = randFloat()
	(*r).Long = new(float64)
	*(*r).Long = randFloat()
	(*r).Attachment = new(string)
	*(*r).Attachment = randString()
	(*r).KeepForwardMessages = new(bool)
	*(*r).KeepForwardMessages = randBool()
	(*r).KeepSnippets = new(bool)
	*(*r).KeepSnippets = randBool()
	(*r).GroupId = new(int)
	*(*r).GroupId = randInt()
	(*r).DontParseLinks = new(bool)
	*(*r).DontParseLinks = randBool()
	(*r).DisableMentions = new(bool)
	*(*r).DisableMentions = randBool()
	(*r).MessageId = new(int)
	*(*r).MessageId = randInt()
	(*r).ConversationMessageId = new(int)
	*(*r).ConversationMessageId = randInt()
	(*r).Template = new(string)
	*(*r).Template = randString()
	(*r).Keyboard = new(string)
	*(*r).Keyboard = randString()
}

func TestVK_Messages_Edit_Success(t *testing.T) {
	values := make(url.Values, 16)
	var req Messages_Edit_Request
	fillRandomly_Messages_Edit_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Messages_Edit_Response
	fillRandomly_Messages_Edit_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "messages.edit", values, expectedJSON), token)
	resp, apiErr, err := vk.Messages_Edit(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Messages_Edit_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "messages.edit", expectedJSON), "")
	resp, apiErr, err := vk.Messages_Edit(context.Background(), Messages_Edit_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Messages_Edit_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Messages_Edit(context.Background(), Messages_Edit_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Messages_EditChat_Request(r *Messages_EditChat_Request) {
	(*r).ChatId = randInt()
	(*r).Title = new(string)
	*(*r).Title = randString()
}

func TestVK_Messages_EditChat_Success(t *testing.T) {
	values := make(url.Values, 4)
	var req Messages_EditChat_Request
	fillRandomly_Messages_EditChat_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Base_Ok_Response
	fillRandomly_Base_Ok_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "messages.editChat", values, expectedJSON), token)
	resp, apiErr, err := vk.Messages_EditChat(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Messages_EditChat_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "messages.editChat", expectedJSON), "")
	resp, apiErr, err := vk.Messages_EditChat(context.Background(), Messages_EditChat_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Messages_EditChat_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Messages_EditChat(context.Background(), Messages_EditChat_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Messages_GetByConversationMessageId_Request(r *Messages_GetByConversationMessageId_Request) {
	(*r).PeerId = randInt()
	(*r).ConversationMessageIds = new([]int)
	l0 := randIntn(maxArrayLength + 1)
	*(*r).ConversationMessageIds = make([]int, l0)
	for i0 := 0; i0 < l0; i0++ {
		(*(*r).ConversationMessageIds)[i0] = randInt()
	}
	(*r).Fields = new([]Users_Fields)
	l0 = randIntn(maxArrayLength + 1)
	*(*r).Fields = make([]Users_Fields, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomly_Users_Fields(&(*(*r).Fields)[i0])
	}
	(*r).GroupId = new(int)
	*(*r).GroupId = randInt()
}

func TestVK_Messages_GetByConversationMessageId_Success(t *testing.T) {
	values := make(url.Values, 7)
	var req Messages_GetByConversationMessageId_Request
	fillRandomly_Messages_GetByConversationMessageId_Request(&req)
	require.NoError(t, req.fillIn(values))
	setString(values, "extended", "0")
	var expected Messages_GetByConversationMessageId_Response
	fillRandomly_Messages_GetByConversationMessageId_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "messages.getByConversationMessageId", values, expectedJSON), token)
	resp, apiErr, err := vk.Messages_GetByConversationMessageId(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Messages_GetByConversationMessageId_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "messages.getByConversationMessageId", expectedJSON), "")
	resp, apiErr, err := vk.Messages_GetByConversationMessageId(context.Background(), Messages_GetByConversationMessageId_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Messages_GetByConversationMessageId_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Messages_GetByConversationMessageId(context.Background(), Messages_GetByConversationMessageId_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func TestVK_Messages_GetByConversationMessageIdExtended_Success(t *testing.T) {
	values := make(url.Values, 7)
	var req Messages_GetByConversationMessageId_Request
	fillRandomly_Messages_GetByConversationMessageId_Request(&req)
	require.NoError(t, req.fillIn(values))
	setString(values, "extended", "1")
	var expected Messages_GetByConversationMessageIdExtended_Response
	fillRandomly_Messages_GetByConversationMessageIdExtended_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "messages.getByConversationMessageId", values, expectedJSON), token)
	resp, apiErr, err := vk.Messages_GetByConversationMessageIdExtended(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Messages_GetByConversationMessageIdExtended_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "messages.getByConversationMessageId", expectedJSON), "")
	resp, apiErr, err := vk.Messages_GetByConversationMessageIdExtended(context.Background(), Messages_GetByConversationMessageId_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Messages_GetByConversationMessageIdExtended_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Messages_GetByConversationMessageIdExtended(context.Background(), Messages_GetByConversationMessageId_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Messages_GetById_Request(r *Messages_GetById_Request) {
	(*r).MessageIds = new([]int)
	l0 := randIntn(maxArrayLength + 1)
	*(*r).MessageIds = make([]int, l0)
	for i0 := 0; i0 < l0; i0++ {
		(*(*r).MessageIds)[i0] = randInt()
	}
	(*r).PreviewLength = new(int)
	*(*r).PreviewLength = randInt()
	(*r).Fields = new([]Users_Fields)
	l0 = randIntn(maxArrayLength + 1)
	*(*r).Fields = make([]Users_Fields, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomly_Users_Fields(&(*(*r).Fields)[i0])
	}
	(*r).GroupId = new(int)
	*(*r).GroupId = randInt()
}

func TestVK_Messages_GetById_Success(t *testing.T) {
	values := make(url.Values, 7)
	var req Messages_GetById_Request
	fillRandomly_Messages_GetById_Request(&req)
	require.NoError(t, req.fillIn(values))
	setString(values, "extended", "0")
	var expected Messages_GetById_Response
	fillRandomly_Messages_GetById_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "messages.getById", values, expectedJSON), token)
	resp, apiErr, err := vk.Messages_GetById(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Messages_GetById_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "messages.getById", expectedJSON), "")
	resp, apiErr, err := vk.Messages_GetById(context.Background(), Messages_GetById_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Messages_GetById_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Messages_GetById(context.Background(), Messages_GetById_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func TestVK_Messages_GetByIdExtended_Success(t *testing.T) {
	values := make(url.Values, 7)
	var req Messages_GetById_Request
	fillRandomly_Messages_GetById_Request(&req)
	require.NoError(t, req.fillIn(values))
	setString(values, "extended", "1")
	var expected Messages_GetByIdExtended_Response
	fillRandomly_Messages_GetByIdExtended_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "messages.getById", values, expectedJSON), token)
	resp, apiErr, err := vk.Messages_GetByIdExtended(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Messages_GetByIdExtended_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "messages.getById", expectedJSON), "")
	resp, apiErr, err := vk.Messages_GetByIdExtended(context.Background(), Messages_GetById_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Messages_GetByIdExtended_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Messages_GetByIdExtended(context.Background(), Messages_GetById_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Messages_GetChatPreview_Request(r *Messages_GetChatPreview_Request) {
	(*r).PeerId = new(int)
	*(*r).PeerId = randInt()
	(*r).Link = new(string)
	*(*r).Link = randString()
	(*r).Fields = new([]Users_Fields)
	l0 := randIntn(maxArrayLength + 1)
	*(*r).Fields = make([]Users_Fields, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomly_Users_Fields(&(*(*r).Fields)[i0])
	}
}

func TestVK_Messages_GetChatPreview_Success(t *testing.T) {
	values := make(url.Values, 5)
	var req Messages_GetChatPreview_Request
	fillRandomly_Messages_GetChatPreview_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Messages_GetChatPreview_Response
	fillRandomly_Messages_GetChatPreview_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "messages.getChatPreview", values, expectedJSON), token)
	resp, apiErr, err := vk.Messages_GetChatPreview(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Messages_GetChatPreview_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "messages.getChatPreview", expectedJSON), "")
	resp, apiErr, err := vk.Messages_GetChatPreview(context.Background(), Messages_GetChatPreview_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Messages_GetChatPreview_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Messages_GetChatPreview(context.Background(), Messages_GetChatPreview_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Messages_GetConversationMembers_Request(r *Messages_GetConversationMembers_Request) {
	(*r).PeerId = randInt()
	(*r).Fields = new([]Users_Fields)
	l0 := randIntn(maxArrayLength + 1)
	*(*r).Fields = make([]Users_Fields, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomly_Users_Fields(&(*(*r).Fields)[i0])
	}
	(*r).GroupId = new(int)
	*(*r).GroupId = randInt()
}

func TestVK_Messages_GetConversationMembers_Success(t *testing.T) {
	values := make(url.Values, 5)
	var req Messages_GetConversationMembers_Request
	fillRandomly_Messages_GetConversationMembers_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Messages_GetConversationMembers_Response
	fillRandomly_Messages_GetConversationMembers_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "messages.getConversationMembers", values, expectedJSON), token)
	resp, apiErr, err := vk.Messages_GetConversationMembers(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Messages_GetConversationMembers_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "messages.getConversationMembers", expectedJSON), "")
	resp, apiErr, err := vk.Messages_GetConversationMembers(context.Background(), Messages_GetConversationMembers_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Messages_GetConversationMembers_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Messages_GetConversationMembers(context.Background(), Messages_GetConversationMembers_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Messages_GetConversations_Filter(o *Messages_GetConversations_Filter) {
	switch randIntn(5) {
	case 0:
		*o = "all"
	case 1:
		*o = "archive"
	case 2:
		*o = "important"
	case 3:
		*o = "unanswered"
	case 4:
		*o = "unread"
	}
}

func fillRandomly_Messages_GetConversations_Request(r *Messages_GetConversations_Request) {
	(*r).Offset = new(int)
	*(*r).Offset = randInt()
	(*r).Count = new(int)
	*(*r).Count = randInt()
	(*r).Filter = new(Messages_GetConversations_Filter)
	fillRandomly_Messages_GetConversations_Filter((*r).Filter)
	(*r).Extended = new(bool)
	*(*r).Extended = randBool()
	(*r).StartMessageId = new(int)
	*(*r).StartMessageId = randInt()
	(*r).Fields = new([]Base_UserGroupFields)
	l0 := randIntn(maxArrayLength + 1)
	*(*r).Fields = make([]Base_UserGroupFields, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomly_Base_UserGroupFields(&(*(*r).Fields)[i0])
	}
	(*r).GroupId = new(int)
	*(*r).GroupId = randInt()
}

func TestVK_Messages_GetConversations_Success(t *testing.T) {
	values := make(url.Values, 9)
	var req Messages_GetConversations_Request
	fillRandomly_Messages_GetConversations_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Messages_GetConversations_Response
	fillRandomly_Messages_GetConversations_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "messages.getConversations", values, expectedJSON), token)
	resp, apiErr, err := vk.Messages_GetConversations(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Messages_GetConversations_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "messages.getConversations", expectedJSON), "")
	resp, apiErr, err := vk.Messages_GetConversations(context.Background(), Messages_GetConversations_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Messages_GetConversations_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Messages_GetConversations(context.Background(), Messages_GetConversations_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Messages_GetConversationsById_Request(r *Messages_GetConversationsById_Request) {
	(*r).PeerIds = new([]int)
	l0 := randIntn(maxArrayLength + 1)
	*(*r).PeerIds = make([]int, l0)
	for i0 := 0; i0 < l0; i0++ {
		(*(*r).PeerIds)[i0] = randInt()
	}
	(*r).Fields = new([]Base_UserGroupFields)
	l0 = randIntn(maxArrayLength + 1)
	*(*r).Fields = make([]Base_UserGroupFields, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomly_Base_UserGroupFields(&(*(*r).Fields)[i0])
	}
	(*r).GroupId = new(int)
	*(*r).GroupId = randInt()
}

func TestVK_Messages_GetConversationsById_Success(t *testing.T) {
	values := make(url.Values, 6)
	var req Messages_GetConversationsById_Request
	fillRandomly_Messages_GetConversationsById_Request(&req)
	require.NoError(t, req.fillIn(values))
	setString(values, "extended", "0")
	var expected Messages_GetConversationsById_Response
	fillRandomly_Messages_GetConversationsById_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "messages.getConversationsById", values, expectedJSON), token)
	resp, apiErr, err := vk.Messages_GetConversationsById(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Messages_GetConversationsById_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "messages.getConversationsById", expectedJSON), "")
	resp, apiErr, err := vk.Messages_GetConversationsById(context.Background(), Messages_GetConversationsById_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Messages_GetConversationsById_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Messages_GetConversationsById(context.Background(), Messages_GetConversationsById_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func TestVK_Messages_GetConversationsByIdExtended_Success(t *testing.T) {
	values := make(url.Values, 6)
	var req Messages_GetConversationsById_Request
	fillRandomly_Messages_GetConversationsById_Request(&req)
	require.NoError(t, req.fillIn(values))
	setString(values, "extended", "1")
	var expected Messages_GetConversationsByIdExtended_Response
	fillRandomly_Messages_GetConversationsByIdExtended_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "messages.getConversationsById", values, expectedJSON), token)
	resp, apiErr, err := vk.Messages_GetConversationsByIdExtended(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Messages_GetConversationsByIdExtended_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "messages.getConversationsById", expectedJSON), "")
	resp, apiErr, err := vk.Messages_GetConversationsByIdExtended(context.Background(), Messages_GetConversationsById_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Messages_GetConversationsByIdExtended_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Messages_GetConversationsByIdExtended(context.Background(), Messages_GetConversationsById_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Messages_GetHistory_Rev(o *Messages_GetHistory_Rev) {
	switch randIntn(2) {
	case 0:
		*o = 1
	case 1:
		*o = 0
	}
}

func fillRandomly_Messages_GetHistory_Request(r *Messages_GetHistory_Request) {
	(*r).Offset = new(int)
	*(*r).Offset = randInt()
	(*r).Count = new(int)
	*(*r).Count = randInt()
	(*r).UserId = new(int)
	*(*r).UserId = randInt()
	(*r).PeerId = new(int)
	*(*r).PeerId = randInt()
	(*r).StartMessageId = new(int)
	*(*r).StartMessageId = randInt()
	(*r).Rev = new(Messages_GetHistory_Rev)
	fillRandomly_Messages_GetHistory_Rev((*r).Rev)
	(*r).Fields = new([]Users_Fields)
	l0 := randIntn(maxArrayLength + 1)
	*(*r).Fields = make([]Users_Fields, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomly_Users_Fields(&(*(*r).Fields)[i0])
	}
	(*r).GroupId = new(int)
	*(*r).GroupId = randInt()
}

func TestVK_Messages_GetHistory_Success(t *testing.T) {
	values := make(url.Values, 11)
	var req Messages_GetHistory_Request
	fillRandomly_Messages_GetHistory_Request(&req)
	require.NoError(t, req.fillIn(values))
	setString(values, "extended", "0")
	var expected Messages_GetHistory_Response
	fillRandomly_Messages_GetHistory_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "messages.getHistory", values, expectedJSON), token)
	resp, apiErr, err := vk.Messages_GetHistory(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Messages_GetHistory_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "messages.getHistory", expectedJSON), "")
	resp, apiErr, err := vk.Messages_GetHistory(context.Background(), Messages_GetHistory_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Messages_GetHistory_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Messages_GetHistory(context.Background(), Messages_GetHistory_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func TestVK_Messages_GetHistoryExtended_Success(t *testing.T) {
	values := make(url.Values, 11)
	var req Messages_GetHistory_Request
	fillRandomly_Messages_GetHistory_Request(&req)
	require.NoError(t, req.fillIn(values))
	setString(values, "extended", "1")
	var expected Messages_GetHistoryExtended_Response
	fillRandomly_Messages_GetHistoryExtended_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "messages.getHistory", values, expectedJSON), token)
	resp, apiErr, err := vk.Messages_GetHistoryExtended(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Messages_GetHistoryExtended_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "messages.getHistory", expectedJSON), "")
	resp, apiErr, err := vk.Messages_GetHistoryExtended(context.Background(), Messages_GetHistory_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Messages_GetHistoryExtended_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Messages_GetHistoryExtended(context.Background(), Messages_GetHistory_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Messages_GetHistoryAttachments_MediaType(o *Messages_GetHistoryAttachments_MediaType) {
	switch randIntn(10) {
	case 0:
		*o = "audio"
	case 1:
		*o = "audio_message"
	case 2:
		*o = "doc"
	case 3:
		*o = "graffiti"
	case 4:
		*o = "link"
	case 5:
		*o = "market"
	case 6:
		*o = "photo"
	case 7:
		*o = "share"
	case 8:
		*o = "video"
	case 9:
		*o = "wall"
	}
}

func fillRandomly_Messages_GetHistoryAttachments_Request(r *Messages_GetHistoryAttachments_Request) {
	(*r).PeerId = randInt()
	(*r).MediaType = new(Messages_GetHistoryAttachments_MediaType)
	fillRandomly_Messages_GetHistoryAttachments_MediaType((*r).MediaType)
	(*r).StartFrom = new(string)
	*(*r).StartFrom = randString()
	(*r).Count = new(int)
	*(*r).Count = randInt()
	(*r).PhotoSizes = new(bool)
	*(*r).PhotoSizes = randBool()
	(*r).Fields = new([]Users_Fields)
	l0 := randIntn(maxArrayLength + 1)
	*(*r).Fields = make([]Users_Fields, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomly_Users_Fields(&(*(*r).Fields)[i0])
	}
	(*r).GroupId = new(int)
	*(*r).GroupId = randInt()
	(*r).PreserveOrder = new(bool)
	*(*r).PreserveOrder = randBool()
	(*r).MaxForwardsLevel = new(int)
	*(*r).MaxForwardsLevel = randInt()
}

func TestVK_Messages_GetHistoryAttachments_Success(t *testing.T) {
	values := make(url.Values, 11)
	var req Messages_GetHistoryAttachments_Request
	fillRandomly_Messages_GetHistoryAttachments_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Messages_GetHistoryAttachments_Response
	fillRandomly_Messages_GetHistoryAttachments_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "messages.getHistoryAttachments", values, expectedJSON), token)
	resp, apiErr, err := vk.Messages_GetHistoryAttachments(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Messages_GetHistoryAttachments_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "messages.getHistoryAttachments", expectedJSON), "")
	resp, apiErr, err := vk.Messages_GetHistoryAttachments(context.Background(), Messages_GetHistoryAttachments_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Messages_GetHistoryAttachments_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Messages_GetHistoryAttachments(context.Background(), Messages_GetHistoryAttachments_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Messages_GetImportantMessages_Request(r *Messages_GetImportantMessages_Request) {
	(*r).Count = new(int)
	*(*r).Count = randInt()
	(*r).Offset = new(int)
	*(*r).Offset = randInt()
	(*r).StartMessageId = new(int)
	*(*r).StartMessageId = randInt()
	(*r).PreviewLength = new(int)
	*(*r).PreviewLength = randInt()
	(*r).Fields = new([]Base_UserGroupFields)
	l0 := randIntn(maxArrayLength + 1)
	*(*r).Fields = make([]Base_UserGroupFields, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomly_Base_UserGroupFields(&(*(*r).Fields)[i0])
	}
	(*r).GroupId = new(int)
	*(*r).GroupId = randInt()
}

func TestVK_Messages_GetImportantMessages_Success(t *testing.T) {
	values := make(url.Values, 9)
	var req Messages_GetImportantMessages_Request
	fillRandomly_Messages_GetImportantMessages_Request(&req)
	require.NoError(t, req.fillIn(values))
	setString(values, "extended", "0")
	var expected Messages_GetImportantMessages_Response
	fillRandomly_Messages_GetImportantMessages_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "messages.getImportantMessages", values, expectedJSON), token)
	resp, apiErr, err := vk.Messages_GetImportantMessages(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Messages_GetImportantMessages_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "messages.getImportantMessages", expectedJSON), "")
	resp, apiErr, err := vk.Messages_GetImportantMessages(context.Background(), Messages_GetImportantMessages_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Messages_GetImportantMessages_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Messages_GetImportantMessages(context.Background(), Messages_GetImportantMessages_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func TestVK_Messages_GetImportantMessagesExtended_Success(t *testing.T) {
	values := make(url.Values, 9)
	var req Messages_GetImportantMessages_Request
	fillRandomly_Messages_GetImportantMessages_Request(&req)
	require.NoError(t, req.fillIn(values))
	setString(values, "extended", "1")
	var expected Messages_GetImportantMessagesExtended_Response
	fillRandomly_Messages_GetImportantMessagesExtended_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "messages.getImportantMessages", values, expectedJSON), token)
	resp, apiErr, err := vk.Messages_GetImportantMessagesExtended(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Messages_GetImportantMessagesExtended_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "messages.getImportantMessages", expectedJSON), "")
	resp, apiErr, err := vk.Messages_GetImportantMessagesExtended(context.Background(), Messages_GetImportantMessages_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Messages_GetImportantMessagesExtended_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Messages_GetImportantMessagesExtended(context.Background(), Messages_GetImportantMessages_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Messages_GetIntentUsers_Intent(o *Messages_GetIntentUsers_Intent) {
	switch randIntn(3) {
	case 0:
		*o = "confirmed_notification"
	case 1:
		*o = "non_promo_newsletter"
	case 2:
		*o = "promo_newsletter"
	}
}

func fillRandomly_Messages_GetIntentUsers_Request(r *Messages_GetIntentUsers_Request) {
	fillRandomly_Messages_GetIntentUsers_Intent(&(*r).Intent)
	(*r).SubscribeId = new(int)
	*(*r).SubscribeId = randInt()
	(*r).Offset = new(int)
	*(*r).Offset = randInt()
	(*r).Count = new(int)
	*(*r).Count = randInt()
	(*r).Extended = new(bool)
	*(*r).Extended = randBool()
	(*r).NameCase = new([]string)
	l0 := randIntn(maxArrayLength + 1)
	*(*r).NameCase = make([]string, l0)
	for i0 := 0; i0 < l0; i0++ {
		(*(*r).NameCase)[i0] = randString()
	}
	(*r).Fields = new([]string)
	l0 = randIntn(maxArrayLength + 1)
	*(*r).Fields = make([]string, l0)
	for i0 := 0; i0 < l0; i0++ {
		(*(*r).Fields)[i0] = randString()
	}
}

func TestVK_Messages_GetIntentUsers_Success(t *testing.T) {
	values := make(url.Values, 9)
	var req Messages_GetIntentUsers_Request
	fillRandomly_Messages_GetIntentUsers_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Messages_GetIntentUsers_Response
	fillRandomly_Messages_GetIntentUsers_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "messages.getIntentUsers", values, expectedJSON), token)
	resp, apiErr, err := vk.Messages_GetIntentUsers(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Messages_GetIntentUsers_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "messages.getIntentUsers", expectedJSON), "")
	resp, apiErr, err := vk.Messages_GetIntentUsers(context.Background(), Messages_GetIntentUsers_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Messages_GetIntentUsers_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Messages_GetIntentUsers(context.Background(), Messages_GetIntentUsers_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Messages_GetInviteLink_Request(r *Messages_GetInviteLink_Request) {
	(*r).PeerId = randInt()
	(*r).Reset = new(bool)
	*(*r).Reset = randBool()
	(*r).GroupId = new(int)
	*(*r).GroupId = randInt()
}

func TestVK_Messages_GetInviteLink_Success(t *testing.T) {
	values := make(url.Values, 5)
	var req Messages_GetInviteLink_Request
	fillRandomly_Messages_GetInviteLink_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Messages_GetInviteLink_Response
	fillRandomly_Messages_GetInviteLink_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "messages.getInviteLink", values, expectedJSON), token)
	resp, apiErr, err := vk.Messages_GetInviteLink(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Messages_GetInviteLink_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "messages.getInviteLink", expectedJSON), "")
	resp, apiErr, err := vk.Messages_GetInviteLink(context.Background(), Messages_GetInviteLink_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Messages_GetInviteLink_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Messages_GetInviteLink(context.Background(), Messages_GetInviteLink_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Messages_GetLastActivity_Request(r *Messages_GetLastActivity_Request) {
	(*r).UserId = randInt()
}

func TestVK_Messages_GetLastActivity_Success(t *testing.T) {
	values := make(url.Values, 3)
	var req Messages_GetLastActivity_Request
	fillRandomly_Messages_GetLastActivity_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Messages_GetLastActivity_Response
	fillRandomly_Messages_GetLastActivity_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "messages.getLastActivity", values, expectedJSON), token)
	resp, apiErr, err := vk.Messages_GetLastActivity(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Messages_GetLastActivity_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "messages.getLastActivity", expectedJSON), "")
	resp, apiErr, err := vk.Messages_GetLastActivity(context.Background(), Messages_GetLastActivity_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Messages_GetLastActivity_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Messages_GetLastActivity(context.Background(), Messages_GetLastActivity_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Messages_GetLongPollHistory_Request(r *Messages_GetLongPollHistory_Request) {
	(*r).Ts = new(int)
	*(*r).Ts = randInt()
	(*r).Pts = new(int)
	*(*r).Pts = randInt()
	(*r).PreviewLength = new(int)
	*(*r).PreviewLength = randInt()
	(*r).Onlines = new(bool)
	*(*r).Onlines = randBool()
	(*r).Fields = new([]Users_Fields)
	l0 := randIntn(maxArrayLength + 1)
	*(*r).Fields = make([]Users_Fields, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomly_Users_Fields(&(*(*r).Fields)[i0])
	}
	(*r).EventsLimit = new(int)
	*(*r).EventsLimit = randInt()
	(*r).MsgsLimit = new(int)
	*(*r).MsgsLimit = randInt()
	(*r).MaxMsgId = new(int)
	*(*r).MaxMsgId = randInt()
	(*r).GroupId = new(int)
	*(*r).GroupId = randInt()
	(*r).LpVersion = new(int)
	*(*r).LpVersion = randInt()
	(*r).LastN = new(int)
	*(*r).LastN = randInt()
	(*r).Credentials = new(bool)
	*(*r).Credentials = randBool()
	(*r).Extended = new(bool)
	*(*r).Extended = randBool()
}

func TestVK_Messages_GetLongPollHistory_Success(t *testing.T) {
	values := make(url.Values, 15)
	var req Messages_GetLongPollHistory_Request
	fillRandomly_Messages_GetLongPollHistory_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Messages_GetLongPollHistory_Response
	fillRandomly_Messages_GetLongPollHistory_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "messages.getLongPollHistory", values, expectedJSON), token)
	resp, apiErr, err := vk.Messages_GetLongPollHistory(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Messages_GetLongPollHistory_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "messages.getLongPollHistory", expectedJSON), "")
	resp, apiErr, err := vk.Messages_GetLongPollHistory(context.Background(), Messages_GetLongPollHistory_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Messages_GetLongPollHistory_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Messages_GetLongPollHistory(context.Background(), Messages_GetLongPollHistory_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Messages_GetLongPollServer_Request(r *Messages_GetLongPollServer_Request) {
	(*r).NeedPts = new(bool)
	*(*r).NeedPts = randBool()
	(*r).GroupId = new(int)
	*(*r).GroupId = randInt()
	(*r).LpVersion = new(int)
	*(*r).LpVersion = randInt()
}

func TestVK_Messages_GetLongPollServer_Success(t *testing.T) {
	values := make(url.Values, 5)
	var req Messages_GetLongPollServer_Request
	fillRandomly_Messages_GetLongPollServer_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Messages_GetLongPollServer_Response
	fillRandomly_Messages_GetLongPollServer_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "messages.getLongPollServer", values, expectedJSON), token)
	resp, apiErr, err := vk.Messages_GetLongPollServer(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Messages_GetLongPollServer_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "messages.getLongPollServer", expectedJSON), "")
	resp, apiErr, err := vk.Messages_GetLongPollServer(context.Background(), Messages_GetLongPollServer_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Messages_GetLongPollServer_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Messages_GetLongPollServer(context.Background(), Messages_GetLongPollServer_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Messages_IsMessagesFromGroupAllowed_Request(r *Messages_IsMessagesFromGroupAllowed_Request) {
	(*r).GroupId = randInt()
	(*r).UserId = randInt()
}

func TestVK_Messages_IsMessagesFromGroupAllowed_Success(t *testing.T) {
	values := make(url.Values, 4)
	var req Messages_IsMessagesFromGroupAllowed_Request
	fillRandomly_Messages_IsMessagesFromGroupAllowed_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Messages_IsMessagesFromGroupAllowed_Response
	fillRandomly_Messages_IsMessagesFromGroupAllowed_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "messages.isMessagesFromGroupAllowed", values, expectedJSON), token)
	resp, apiErr, err := vk.Messages_IsMessagesFromGroupAllowed(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Messages_IsMessagesFromGroupAllowed_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "messages.isMessagesFromGroupAllowed", expectedJSON), "")
	resp, apiErr, err := vk.Messages_IsMessagesFromGroupAllowed(context.Background(), Messages_IsMessagesFromGroupAllowed_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Messages_IsMessagesFromGroupAllowed_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Messages_IsMessagesFromGroupAllowed(context.Background(), Messages_IsMessagesFromGroupAllowed_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Messages_JoinChatByInviteLink_Request(r *Messages_JoinChatByInviteLink_Request) {
	(*r).Link = randString()
}

func TestVK_Messages_JoinChatByInviteLink_Success(t *testing.T) {
	values := make(url.Values, 3)
	var req Messages_JoinChatByInviteLink_Request
	fillRandomly_Messages_JoinChatByInviteLink_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Messages_JoinChatByInviteLink_Response
	fillRandomly_Messages_JoinChatByInviteLink_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "messages.joinChatByInviteLink", values, expectedJSON), token)
	resp, apiErr, err := vk.Messages_JoinChatByInviteLink(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Messages_JoinChatByInviteLink_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "messages.joinChatByInviteLink", expectedJSON), "")
	resp, apiErr, err := vk.Messages_JoinChatByInviteLink(context.Background(), Messages_JoinChatByInviteLink_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Messages_JoinChatByInviteLink_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Messages_JoinChatByInviteLink(context.Background(), Messages_JoinChatByInviteLink_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Messages_MarkAsAnsweredConversation_Request(r *Messages_MarkAsAnsweredConversation_Request) {
	(*r).PeerId = randInt()
	(*r).Answered = new(bool)
	*(*r).Answered = randBool()
	(*r).GroupId = new(int)
	*(*r).GroupId = randInt()
}

func TestVK_Messages_MarkAsAnsweredConversation_Success(t *testing.T) {
	values := make(url.Values, 5)
	var req Messages_MarkAsAnsweredConversation_Request
	fillRandomly_Messages_MarkAsAnsweredConversation_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Base_Ok_Response
	fillRandomly_Base_Ok_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "messages.markAsAnsweredConversation", values, expectedJSON), token)
	resp, apiErr, err := vk.Messages_MarkAsAnsweredConversation(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Messages_MarkAsAnsweredConversation_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "messages.markAsAnsweredConversation", expectedJSON), "")
	resp, apiErr, err := vk.Messages_MarkAsAnsweredConversation(context.Background(), Messages_MarkAsAnsweredConversation_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Messages_MarkAsAnsweredConversation_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Messages_MarkAsAnsweredConversation(context.Background(), Messages_MarkAsAnsweredConversation_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Messages_MarkAsImportant_Request(r *Messages_MarkAsImportant_Request) {
	(*r).MessageIds = new([]int)
	l0 := randIntn(maxArrayLength + 1)
	*(*r).MessageIds = make([]int, l0)
	for i0 := 0; i0 < l0; i0++ {
		(*(*r).MessageIds)[i0] = randInt()
	}
	(*r).Important = new(int)
	*(*r).Important = randInt()
}

func TestVK_Messages_MarkAsImportant_Success(t *testing.T) {
	values := make(url.Values, 4)
	var req Messages_MarkAsImportant_Request
	fillRandomly_Messages_MarkAsImportant_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Messages_MarkAsImportant_Response
	fillRandomly_Messages_MarkAsImportant_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "messages.markAsImportant", values, expectedJSON), token)
	resp, apiErr, err := vk.Messages_MarkAsImportant(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Messages_MarkAsImportant_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "messages.markAsImportant", expectedJSON), "")
	resp, apiErr, err := vk.Messages_MarkAsImportant(context.Background(), Messages_MarkAsImportant_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Messages_MarkAsImportant_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Messages_MarkAsImportant(context.Background(), Messages_MarkAsImportant_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Messages_MarkAsImportantConversation_Request(r *Messages_MarkAsImportantConversation_Request) {
	(*r).PeerId = randInt()
	(*r).Important = new(bool)
	*(*r).Important = randBool()
	(*r).GroupId = new(int)
	*(*r).GroupId = randInt()
}

func TestVK_Messages_MarkAsImportantConversation_Success(t *testing.T) {
	values := make(url.Values, 5)
	var req Messages_MarkAsImportantConversation_Request
	fillRandomly_Messages_MarkAsImportantConversation_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Base_Ok_Response
	fillRandomly_Base_Ok_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "messages.markAsImportantConversation", values, expectedJSON), token)
	resp, apiErr, err := vk.Messages_MarkAsImportantConversation(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Messages_MarkAsImportantConversation_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "messages.markAsImportantConversation", expectedJSON), "")
	resp, apiErr, err := vk.Messages_MarkAsImportantConversation(context.Background(), Messages_MarkAsImportantConversation_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Messages_MarkAsImportantConversation_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Messages_MarkAsImportantConversation(context.Background(), Messages_MarkAsImportantConversation_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Messages_MarkAsRead_Request(r *Messages_MarkAsRead_Request) {
	(*r).MessageIds = new([]int)
	l0 := randIntn(maxArrayLength + 1)
	*(*r).MessageIds = make([]int, l0)
	for i0 := 0; i0 < l0; i0++ {
		(*(*r).MessageIds)[i0] = randInt()
	}
	(*r).PeerId = new(int)
	*(*r).PeerId = randInt()
	(*r).StartMessageId = new(int)
	*(*r).StartMessageId = randInt()
	(*r).GroupId = new(int)
	*(*r).GroupId = randInt()
	(*r).MarkConversationAsRead = new(bool)
	*(*r).MarkConversationAsRead = randBool()
}

func TestVK_Messages_MarkAsRead_Success(t *testing.T) {
	values := make(url.Values, 7)
	var req Messages_MarkAsRead_Request
	fillRandomly_Messages_MarkAsRead_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Base_Ok_Response
	fillRandomly_Base_Ok_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "messages.markAsRead", values, expectedJSON), token)
	resp, apiErr, err := vk.Messages_MarkAsRead(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Messages_MarkAsRead_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "messages.markAsRead", expectedJSON), "")
	resp, apiErr, err := vk.Messages_MarkAsRead(context.Background(), Messages_MarkAsRead_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Messages_MarkAsRead_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Messages_MarkAsRead(context.Background(), Messages_MarkAsRead_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Messages_Pin_Request(r *Messages_Pin_Request) {
	(*r).PeerId = randInt()
	(*r).MessageId = new(int)
	*(*r).MessageId = randInt()
	(*r).ConversationMessageId = new(int)
	*(*r).ConversationMessageId = randInt()
}

func TestVK_Messages_Pin_Success(t *testing.T) {
	values := make(url.Values, 5)
	var req Messages_Pin_Request
	fillRandomly_Messages_Pin_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Messages_Pin_Response
	fillRandomly_Messages_Pin_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "messages.pin", values, expectedJSON), token)
	resp, apiErr, err := vk.Messages_Pin(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Messages_Pin_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "messages.pin", expectedJSON), "")
	resp, apiErr, err := vk.Messages_Pin(context.Background(), Messages_Pin_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Messages_Pin_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Messages_Pin(context.Background(), Messages_Pin_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Messages_RemoveChatUser_Request(r *Messages_RemoveChatUser_Request) {
	(*r).ChatId = randInt()
	(*r).UserId = new(int)
	*(*r).UserId = randInt()
	(*r).MemberId = new(int)
	*(*r).MemberId = randInt()
}

func TestVK_Messages_RemoveChatUser_Success(t *testing.T) {
	values := make(url.Values, 5)
	var req Messages_RemoveChatUser_Request
	fillRandomly_Messages_RemoveChatUser_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Base_Ok_Response
	fillRandomly_Base_Ok_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "messages.removeChatUser", values, expectedJSON), token)
	resp, apiErr, err := vk.Messages_RemoveChatUser(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Messages_RemoveChatUser_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "messages.removeChatUser", expectedJSON), "")
	resp, apiErr, err := vk.Messages_RemoveChatUser(context.Background(), Messages_RemoveChatUser_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Messages_RemoveChatUser_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Messages_RemoveChatUser(context.Background(), Messages_RemoveChatUser_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Messages_Restore_Request(r *Messages_Restore_Request) {
	(*r).MessageId = randInt()
	(*r).GroupId = new(int)
	*(*r).GroupId = randInt()
}

func TestVK_Messages_Restore_Success(t *testing.T) {
	values := make(url.Values, 4)
	var req Messages_Restore_Request
	fillRandomly_Messages_Restore_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Base_Ok_Response
	fillRandomly_Base_Ok_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "messages.restore", values, expectedJSON), token)
	resp, apiErr, err := vk.Messages_Restore(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Messages_Restore_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "messages.restore", expectedJSON), "")
	resp, apiErr, err := vk.Messages_Restore(context.Background(), Messages_Restore_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Messages_Restore_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Messages_Restore(context.Background(), Messages_Restore_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Messages_Search_Request(r *Messages_Search_Request) {
	(*r).Q = new(string)
	*(*r).Q = randString()
	(*r).PeerId = new(int)
	*(*r).PeerId = randInt()
	(*r).Date = new(int)
	*(*r).Date = randInt()
	(*r).PreviewLength = new(int)
	*(*r).PreviewLength = randInt()
	(*r).Offset = new(int)
	*(*r).Offset = randInt()
	(*r).Count = new(int)
	*(*r).Count = randInt()
	(*r).Fields = new([]string)
	l0 := randIntn(maxArrayLength + 1)
	*(*r).Fields = make([]string, l0)
	for i0 := 0; i0 < l0; i0++ {
		(*(*r).Fields)[i0] = randString()
	}
	(*r).GroupId = new(int)
	*(*r).GroupId = randInt()
}

func TestVK_Messages_Search_Success(t *testing.T) {
	values := make(url.Values, 11)
	var req Messages_Search_Request
	fillRandomly_Messages_Search_Request(&req)
	require.NoError(t, req.fillIn(values))
	setString(values, "extended", "0")
	var expected Messages_Search_Response
	fillRandomly_Messages_Search_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "messages.search", values, expectedJSON), token)
	resp, apiErr, err := vk.Messages_Search(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Messages_Search_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "messages.search", expectedJSON), "")
	resp, apiErr, err := vk.Messages_Search(context.Background(), Messages_Search_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Messages_Search_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Messages_Search(context.Background(), Messages_Search_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func TestVK_Messages_SearchExtended_Success(t *testing.T) {
	values := make(url.Values, 11)
	var req Messages_Search_Request
	fillRandomly_Messages_Search_Request(&req)
	require.NoError(t, req.fillIn(values))
	setString(values, "extended", "1")
	var expected Messages_SearchExtended_Response
	fillRandomly_Messages_SearchExtended_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "messages.search", values, expectedJSON), token)
	resp, apiErr, err := vk.Messages_SearchExtended(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Messages_SearchExtended_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "messages.search", expectedJSON), "")
	resp, apiErr, err := vk.Messages_SearchExtended(context.Background(), Messages_Search_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Messages_SearchExtended_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Messages_SearchExtended(context.Background(), Messages_Search_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Messages_SearchConversations_Request(r *Messages_SearchConversations_Request) {
	(*r).Q = new(string)
	*(*r).Q = randString()
	(*r).Count = new(int)
	*(*r).Count = randInt()
	(*r).Fields = new([]Users_Fields)
	l0 := randIntn(maxArrayLength + 1)
	*(*r).Fields = make([]Users_Fields, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomly_Users_Fields(&(*(*r).Fields)[i0])
	}
	(*r).GroupId = new(int)
	*(*r).GroupId = randInt()
}

func TestVK_Messages_SearchConversations_Success(t *testing.T) {
	values := make(url.Values, 7)
	var req Messages_SearchConversations_Request
	fillRandomly_Messages_SearchConversations_Request(&req)
	require.NoError(t, req.fillIn(values))
	setString(values, "extended", "0")
	var expected Messages_SearchConversations_Response
	fillRandomly_Messages_SearchConversations_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "messages.searchConversations", values, expectedJSON), token)
	resp, apiErr, err := vk.Messages_SearchConversations(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Messages_SearchConversations_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "messages.searchConversations", expectedJSON), "")
	resp, apiErr, err := vk.Messages_SearchConversations(context.Background(), Messages_SearchConversations_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Messages_SearchConversations_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Messages_SearchConversations(context.Background(), Messages_SearchConversations_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func TestVK_Messages_SearchConversationsExtended_Success(t *testing.T) {
	values := make(url.Values, 7)
	var req Messages_SearchConversations_Request
	fillRandomly_Messages_SearchConversations_Request(&req)
	require.NoError(t, req.fillIn(values))
	setString(values, "extended", "1")
	var expected Messages_SearchConversationsExtended_Response
	fillRandomly_Messages_SearchConversationsExtended_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "messages.searchConversations", values, expectedJSON), token)
	resp, apiErr, err := vk.Messages_SearchConversationsExtended(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Messages_SearchConversationsExtended_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "messages.searchConversations", expectedJSON), "")
	resp, apiErr, err := vk.Messages_SearchConversationsExtended(context.Background(), Messages_SearchConversations_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Messages_SearchConversationsExtended_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Messages_SearchConversationsExtended(context.Background(), Messages_SearchConversations_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Messages_Send_Intent(o *Messages_Send_Intent) {
	switch randIntn(11) {
	case 0:
		*o = "account_update"
	case 1:
		*o = "bot_ad_invite"
	case 2:
		*o = "bot_ad_promo"
	case 3:
		*o = "confirmed_notification"
	case 4:
		*o = "customer_support"
	case 5:
		*o = "default"
	case 6:
		*o = "game_notification"
	case 7:
		*o = "moderated_newsletter"
	case 8:
		*o = "non_promo_newsletter"
	case 9:
		*o = "promo_newsletter"
	case 10:
		*o = "purchase_update"
	}
}

func fillRandomly_Messages_Send_Request(r *Messages_Send_Request) {
	(*r).UserId = new(int)
	*(*r).UserId = randInt()
	(*r).RandomId = new(int)
	*(*r).RandomId = randInt()
	(*r).PeerId = new(int)
	*(*r).PeerId = randInt()
	(*r).Domain = new(string)
	*(*r).Domain = randString()
	(*r).ChatId = new(int)
	*(*r).ChatId = randInt()
	(*r).UserIds = new([]int)
	l0 := randIntn(maxArrayLength + 1)
	*(*r).UserIds = make([]int, l0)
	for i0 := 0; i0 < l0; i0++ {
		(*(*r).UserIds)[i0] = randInt()
	}
	(*r).Message = new(string)
	*(*r).Message = randString()
	(*r).Lat = new(float64)
	*(*r).Lat = randFloat()
	(*r).Long = new(float64)
	*(*r).Long = randFloat()
	(*r).Attachment = new(string)
	*(*r).Attachment = randString()
	(*r).ReplyTo = new(int)
	*(*r).ReplyTo = randInt()
	(*r).ForwardMessages = new([]int)
	l0 = randIntn(maxArrayLength + 1)
	*(*r).ForwardMessages = make([]int, l0)
	for i0 := 0; i0 < l0; i0++ {
		(*(*r).ForwardMessages)[i0] = randInt()
	}
	(*r).Forward = new(Messages_Forward)
	fillRandomly_Messages_Forward((*r).Forward)
	(*r).StickerId = new(int)
	*(*r).StickerId = randInt()
	(*r).GroupId = new(int)
	*(*r).GroupId = randInt()
	(*r).Keyboard = new(Messages_Keyboard)
	fillRandomly_Messages_Keyboard((*r).Keyboard)
	(*r).Template = new(string)
	*(*r).Template = randString()
	(*r).Payload = new(string)
	*(*r).Payload = randString()
	(*r).ContentSource = new(string)
	*(*r).ContentSource = randString()
	(*r).DontParseLinks = new(bool)
	*(*r).DontParseLinks = randBool()
	(*r).DisableMentions = new(bool)
	*(*r).DisableMentions = randBool()
	(*r).Intent = new(Messages_Send_Intent)
	fillRandomly_Messages_Send_Intent((*r).Intent)
	(*r).SubscribeId = new(int)
	*(*r).SubscribeId = randInt()
}

func TestVK_Messages_Send_Success(t *testing.T) {
	values := make(url.Values, 25)
	var req Messages_Send_Request
	fillRandomly_Messages_Send_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Messages_Send_Response
	fillRandomly_Messages_Send_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "messages.send", values, expectedJSON), token)
	resp, apiErr, err := vk.Messages_Send(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Messages_Send_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "messages.send", expectedJSON), "")
	resp, apiErr, err := vk.Messages_Send(context.Background(), Messages_Send_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Messages_Send_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Messages_Send(context.Background(), Messages_Send_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Messages_SendUserIDs_Intent(o *Messages_SendUserIDs_Intent) {
	switch randIntn(11) {
	case 0:
		*o = "account_update"
	case 1:
		*o = "bot_ad_invite"
	case 2:
		*o = "bot_ad_promo"
	case 3:
		*o = "confirmed_notification"
	case 4:
		*o = "customer_support"
	case 5:
		*o = "default"
	case 6:
		*o = "game_notification"
	case 7:
		*o = "moderated_newsletter"
	case 8:
		*o = "non_promo_newsletter"
	case 9:
		*o = "promo_newsletter"
	case 10:
		*o = "purchase_update"
	}
}

func fillRandomly_Messages_SendUserIDs_Request(r *Messages_SendUserIDs_Request) {
	(*r).UserId = new(int)
	*(*r).UserId = randInt()
	(*r).RandomId = new(int)
	*(*r).RandomId = randInt()
	(*r).PeerIds = new([]int)
	l0 := randIntn(maxArrayLength + 1)
	*(*r).PeerIds = make([]int, l0)
	for i0 := 0; i0 < l0; i0++ {
		(*(*r).PeerIds)[i0] = randInt()
	}
	(*r).Domain = new(string)
	*(*r).Domain = randString()
	(*r).ChatId = new(int)
	*(*r).ChatId = randInt()
	(*r).UserIds = new([]int)
	l0 = randIntn(maxArrayLength + 1)
	*(*r).UserIds = make([]int, l0)
	for i0 := 0; i0 < l0; i0++ {
		(*(*r).UserIds)[i0] = randInt()
	}
	(*r).Message = new(string)
	*(*r).Message = randString()
	(*r).Lat = new(float64)
	*(*r).Lat = randFloat()
	(*r).Long = new(float64)
	*(*r).Long = randFloat()
	(*r).Attachment = new(string)
	*(*r).Attachment = randString()
	(*r).ReplyTo = new(int)
	*(*r).ReplyTo = randInt()
	(*r).ForwardMessages = new([]int)
	l0 = randIntn(maxArrayLength + 1)
	*(*r).ForwardMessages = make([]int, l0)
	for i0 := 0; i0 < l0; i0++ {
		(*(*r).ForwardMessages)[i0] = randInt()
	}
	(*r).Forward = new(Messages_Forward)
	fillRandomly_Messages_Forward((*r).Forward)
	(*r).StickerId = new(int)
	*(*r).StickerId = randInt()
	(*r).GroupId = new(int)
	*(*r).GroupId = randInt()
	(*r).Keyboard = new(Messages_Keyboard)
	fillRandomly_Messages_Keyboard((*r).Keyboard)
	(*r).Template = new(string)
	*(*r).Template = randString()
	(*r).Payload = new(string)
	*(*r).Payload = randString()
	(*r).ContentSource = new(string)
	*(*r).ContentSource = randString()
	(*r).DontParseLinks = new(bool)
	*(*r).DontParseLinks = randBool()
	(*r).DisableMentions = new(bool)
	*(*r).DisableMentions = randBool()
	(*r).Intent = new(Messages_SendUserIDs_Intent)
	fillRandomly_Messages_SendUserIDs_Intent((*r).Intent)
	(*r).SubscribeId = new(int)
	*(*r).SubscribeId = randInt()
}

func TestVK_Messages_SendUserIDs_Success(t *testing.T) {
	values := make(url.Values, 25)
	var req Messages_SendUserIDs_Request
	fillRandomly_Messages_SendUserIDs_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Messages_SendUserIds_Response
	fillRandomly_Messages_SendUserIds_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "messages.send", values, expectedJSON), token)
	resp, apiErr, err := vk.Messages_SendUserIDs(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Messages_SendUserIDs_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "messages.send", expectedJSON), "")
	resp, apiErr, err := vk.Messages_SendUserIDs(context.Background(), Messages_SendUserIDs_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Messages_SendUserIDs_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Messages_SendUserIDs(context.Background(), Messages_SendUserIDs_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Messages_SendMessageEventAnswer_Request(r *Messages_SendMessageEventAnswer_Request) {
	(*r).EventId = randString()
	(*r).UserId = randInt()
	(*r).PeerId = randInt()
	(*r).EventData = new(string)
	*(*r).EventData = randString()
}

func TestVK_Messages_SendMessageEventAnswer_Success(t *testing.T) {
	values := make(url.Values, 6)
	var req Messages_SendMessageEventAnswer_Request
	fillRandomly_Messages_SendMessageEventAnswer_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Base_Ok_Response
	fillRandomly_Base_Ok_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "messages.sendMessageEventAnswer", values, expectedJSON), token)
	resp, apiErr, err := vk.Messages_SendMessageEventAnswer(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Messages_SendMessageEventAnswer_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "messages.sendMessageEventAnswer", expectedJSON), "")
	resp, apiErr, err := vk.Messages_SendMessageEventAnswer(context.Background(), Messages_SendMessageEventAnswer_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Messages_SendMessageEventAnswer_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Messages_SendMessageEventAnswer(context.Background(), Messages_SendMessageEventAnswer_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Messages_SetActivity_Type(o *Messages_SetActivity_Type) {
	switch randIntn(5) {
	case 0:
		*o = "audiomessage"
	case 1:
		*o = "file"
	case 2:
		*o = "photo"
	case 3:
		*o = "typing"
	case 4:
		*o = "video"
	}
}

func fillRandomly_Messages_SetActivity_Request(r *Messages_SetActivity_Request) {
	(*r).UserId = new(int)
	*(*r).UserId = randInt()
	(*r).Type = new(Messages_SetActivity_Type)
	fillRandomly_Messages_SetActivity_Type((*r).Type)
	(*r).PeerId = new(int)
	*(*r).PeerId = randInt()
	(*r).GroupId = new(int)
	*(*r).GroupId = randInt()
}

func TestVK_Messages_SetActivity_Success(t *testing.T) {
	values := make(url.Values, 6)
	var req Messages_SetActivity_Request
	fillRandomly_Messages_SetActivity_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Base_Ok_Response
	fillRandomly_Base_Ok_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "messages.setActivity", values, expectedJSON), token)
	resp, apiErr, err := vk.Messages_SetActivity(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Messages_SetActivity_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "messages.setActivity", expectedJSON), "")
	resp, apiErr, err := vk.Messages_SetActivity(context.Background(), Messages_SetActivity_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Messages_SetActivity_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Messages_SetActivity(context.Background(), Messages_SetActivity_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Messages_SetChatPhoto_Request(r *Messages_SetChatPhoto_Request) {
	(*r).File = randString()
}

func TestVK_Messages_SetChatPhoto_Success(t *testing.T) {
	values := make(url.Values, 3)
	var req Messages_SetChatPhoto_Request
	fillRandomly_Messages_SetChatPhoto_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Messages_SetChatPhoto_Response
	fillRandomly_Messages_SetChatPhoto_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "messages.setChatPhoto", values, expectedJSON), token)
	resp, apiErr, err := vk.Messages_SetChatPhoto(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Messages_SetChatPhoto_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "messages.setChatPhoto", expectedJSON), "")
	resp, apiErr, err := vk.Messages_SetChatPhoto(context.Background(), Messages_SetChatPhoto_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Messages_SetChatPhoto_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Messages_SetChatPhoto(context.Background(), Messages_SetChatPhoto_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Messages_Unpin_Request(r *Messages_Unpin_Request) {
	(*r).PeerId = randInt()
	(*r).GroupId = new(int)
	*(*r).GroupId = randInt()
}

func TestVK_Messages_Unpin_Success(t *testing.T) {
	values := make(url.Values, 4)
	var req Messages_Unpin_Request
	fillRandomly_Messages_Unpin_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Base_Ok_Response
	fillRandomly_Base_Ok_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "messages.unpin", values, expectedJSON), token)
	resp, apiErr, err := vk.Messages_Unpin(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Messages_Unpin_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "messages.unpin", expectedJSON), "")
	resp, apiErr, err := vk.Messages_Unpin(context.Background(), Messages_Unpin_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Messages_Unpin_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Messages_Unpin(context.Background(), Messages_Unpin_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Newsfeed_AddBan_Request(r *Newsfeed_AddBan_Request) {
	(*r).UserIds = new([]int)
	l0 := randIntn(maxArrayLength + 1)
	*(*r).UserIds = make([]int, l0)
	for i0 := 0; i0 < l0; i0++ {
		(*(*r).UserIds)[i0] = randInt()
	}
	(*r).GroupIds = new([]int)
	l0 = randIntn(maxArrayLength + 1)
	*(*r).GroupIds = make([]int, l0)
	for i0 := 0; i0 < l0; i0++ {
		(*(*r).GroupIds)[i0] = randInt()
	}
}

func TestVK_Newsfeed_AddBan_Success(t *testing.T) {
	values := make(url.Values, 4)
	var req Newsfeed_AddBan_Request
	fillRandomly_Newsfeed_AddBan_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Base_Ok_Response
	fillRandomly_Base_Ok_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "newsfeed.addBan", values, expectedJSON), token)
	resp, apiErr, err := vk.Newsfeed_AddBan(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Newsfeed_AddBan_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "newsfeed.addBan", expectedJSON), "")
	resp, apiErr, err := vk.Newsfeed_AddBan(context.Background(), Newsfeed_AddBan_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Newsfeed_AddBan_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Newsfeed_AddBan(context.Background(), Newsfeed_AddBan_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Newsfeed_DeleteBan_Request(r *Newsfeed_DeleteBan_Request) {
	(*r).UserIds = new([]int)
	l0 := randIntn(maxArrayLength + 1)
	*(*r).UserIds = make([]int, l0)
	for i0 := 0; i0 < l0; i0++ {
		(*(*r).UserIds)[i0] = randInt()
	}
	(*r).GroupIds = new([]int)
	l0 = randIntn(maxArrayLength + 1)
	*(*r).GroupIds = make([]int, l0)
	for i0 := 0; i0 < l0; i0++ {
		(*(*r).GroupIds)[i0] = randInt()
	}
}

func TestVK_Newsfeed_DeleteBan_Success(t *testing.T) {
	values := make(url.Values, 4)
	var req Newsfeed_DeleteBan_Request
	fillRandomly_Newsfeed_DeleteBan_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Base_Ok_Response
	fillRandomly_Base_Ok_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "newsfeed.deleteBan", values, expectedJSON), token)
	resp, apiErr, err := vk.Newsfeed_DeleteBan(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Newsfeed_DeleteBan_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "newsfeed.deleteBan", expectedJSON), "")
	resp, apiErr, err := vk.Newsfeed_DeleteBan(context.Background(), Newsfeed_DeleteBan_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Newsfeed_DeleteBan_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Newsfeed_DeleteBan(context.Background(), Newsfeed_DeleteBan_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Newsfeed_DeleteList_Request(r *Newsfeed_DeleteList_Request) {
	(*r).ListId = randInt()
}

func TestVK_Newsfeed_DeleteList_Success(t *testing.T) {
	values := make(url.Values, 3)
	var req Newsfeed_DeleteList_Request
	fillRandomly_Newsfeed_DeleteList_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Base_Ok_Response
	fillRandomly_Base_Ok_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "newsfeed.deleteList", values, expectedJSON), token)
	resp, apiErr, err := vk.Newsfeed_DeleteList(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Newsfeed_DeleteList_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "newsfeed.deleteList", expectedJSON), "")
	resp, apiErr, err := vk.Newsfeed_DeleteList(context.Background(), Newsfeed_DeleteList_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Newsfeed_DeleteList_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Newsfeed_DeleteList(context.Background(), Newsfeed_DeleteList_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Newsfeed_Get_Request(r *Newsfeed_Get_Request) {
	(*r).Filters = new([]Newsfeed_NewsfeedItemType)
	l0 := randIntn(maxArrayLength + 1)
	*(*r).Filters = make([]Newsfeed_NewsfeedItemType, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomly_Newsfeed_NewsfeedItemType(&(*(*r).Filters)[i0])
	}
	(*r).ReturnBanned = new(bool)
	*(*r).ReturnBanned = randBool()
	(*r).StartTime = new(int)
	*(*r).StartTime = randInt()
	(*r).EndTime = new(int)
	*(*r).EndTime = randInt()
	(*r).MaxPhotos = new(int)
	*(*r).MaxPhotos = randInt()
	(*r).SourceIds = new(string)
	*(*r).SourceIds = randString()
	(*r).StartFrom = new(string)
	*(*r).StartFrom = randString()
	(*r).Count = new(int)
	*(*r).Count = randInt()
	(*r).Fields = new([]Base_UserGroupFields)
	l0 = randIntn(maxArrayLength + 1)
	*(*r).Fields = make([]Base_UserGroupFields, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomly_Base_UserGroupFields(&(*(*r).Fields)[i0])
	}
	(*r).Section = new(string)
	*(*r).Section = randString()
}

func TestVK_Newsfeed_Get_Success(t *testing.T) {
	values := make(url.Values, 12)
	var req Newsfeed_Get_Request
	fillRandomly_Newsfeed_Get_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Newsfeed_Generic_Response
	fillRandomly_Newsfeed_Generic_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "newsfeed.get", values, expectedJSON), token)
	resp, apiErr, err := vk.Newsfeed_Get(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Newsfeed_Get_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "newsfeed.get", expectedJSON), "")
	resp, apiErr, err := vk.Newsfeed_Get(context.Background(), Newsfeed_Get_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Newsfeed_Get_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Newsfeed_Get(context.Background(), Newsfeed_Get_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Newsfeed_GetBanned_NameCase(o *Newsfeed_GetBanned_NameCase) {
	switch randIntn(6) {
	case 0:
		*o = "nom"
	case 1:
		*o = "gen"
	case 2:
		*o = "dat"
	case 3:
		*o = "acc"
	case 4:
		*o = "ins"
	case 5:
		*o = "abl"
	}
}

func fillRandomly_Newsfeed_GetBanned_Request(r *Newsfeed_GetBanned_Request) {
	(*r).Fields = new([]Users_Fields)
	l0 := randIntn(maxArrayLength + 1)
	*(*r).Fields = make([]Users_Fields, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomly_Users_Fields(&(*(*r).Fields)[i0])
	}
	(*r).NameCase = new(Newsfeed_GetBanned_NameCase)
	fillRandomly_Newsfeed_GetBanned_NameCase((*r).NameCase)
}

func TestVK_Newsfeed_GetBanned_Success(t *testing.T) {
	values := make(url.Values, 5)
	var req Newsfeed_GetBanned_Request
	fillRandomly_Newsfeed_GetBanned_Request(&req)
	require.NoError(t, req.fillIn(values))
	setString(values, "extended", "0")
	var expected Newsfeed_GetBanned_Response
	fillRandomly_Newsfeed_GetBanned_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "newsfeed.getBanned", values, expectedJSON), token)
	resp, apiErr, err := vk.Newsfeed_GetBanned(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Newsfeed_GetBanned_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "newsfeed.getBanned", expectedJSON), "")
	resp, apiErr, err := vk.Newsfeed_GetBanned(context.Background(), Newsfeed_GetBanned_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Newsfeed_GetBanned_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Newsfeed_GetBanned(context.Background(), Newsfeed_GetBanned_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func TestVK_Newsfeed_GetBannedExtended_Success(t *testing.T) {
	values := make(url.Values, 5)
	var req Newsfeed_GetBanned_Request
	fillRandomly_Newsfeed_GetBanned_Request(&req)
	require.NoError(t, req.fillIn(values))
	setString(values, "extended", "1")
	var expected Newsfeed_GetBannedExtended_Response
	fillRandomly_Newsfeed_GetBannedExtended_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "newsfeed.getBanned", values, expectedJSON), token)
	resp, apiErr, err := vk.Newsfeed_GetBannedExtended(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Newsfeed_GetBannedExtended_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "newsfeed.getBanned", expectedJSON), "")
	resp, apiErr, err := vk.Newsfeed_GetBannedExtended(context.Background(), Newsfeed_GetBanned_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Newsfeed_GetBannedExtended_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Newsfeed_GetBannedExtended(context.Background(), Newsfeed_GetBanned_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Newsfeed_GetComments_Request(r *Newsfeed_GetComments_Request) {
	(*r).Count = new(int)
	*(*r).Count = randInt()
	(*r).Filters = new([]Newsfeed_CommentsFilters)
	l0 := randIntn(maxArrayLength + 1)
	*(*r).Filters = make([]Newsfeed_CommentsFilters, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomly_Newsfeed_CommentsFilters(&(*(*r).Filters)[i0])
	}
	(*r).Reposts = new(string)
	*(*r).Reposts = randString()
	(*r).StartTime = new(int)
	*(*r).StartTime = randInt()
	(*r).EndTime = new(int)
	*(*r).EndTime = randInt()
	(*r).LastCommentsCount = new(int)
	*(*r).LastCommentsCount = randInt()
	(*r).StartFrom = new(string)
	*(*r).StartFrom = randString()
	(*r).Fields = new([]Base_UserGroupFields)
	l0 = randIntn(maxArrayLength + 1)
	*(*r).Fields = make([]Base_UserGroupFields, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomly_Base_UserGroupFields(&(*(*r).Fields)[i0])
	}
}

func TestVK_Newsfeed_GetComments_Success(t *testing.T) {
	values := make(url.Values, 10)
	var req Newsfeed_GetComments_Request
	fillRandomly_Newsfeed_GetComments_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Newsfeed_GetComments_Response
	fillRandomly_Newsfeed_GetComments_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "newsfeed.getComments", values, expectedJSON), token)
	resp, apiErr, err := vk.Newsfeed_GetComments(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Newsfeed_GetComments_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "newsfeed.getComments", expectedJSON), "")
	resp, apiErr, err := vk.Newsfeed_GetComments(context.Background(), Newsfeed_GetComments_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Newsfeed_GetComments_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Newsfeed_GetComments(context.Background(), Newsfeed_GetComments_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Newsfeed_GetLists_Request(r *Newsfeed_GetLists_Request) {
	(*r).ListIds = new([]int)
	l0 := randIntn(maxArrayLength + 1)
	*(*r).ListIds = make([]int, l0)
	for i0 := 0; i0 < l0; i0++ {
		(*(*r).ListIds)[i0] = randInt()
	}
}

func TestVK_Newsfeed_GetLists_Success(t *testing.T) {
	values := make(url.Values, 4)
	var req Newsfeed_GetLists_Request
	fillRandomly_Newsfeed_GetLists_Request(&req)
	require.NoError(t, req.fillIn(values))
	setString(values, "extended", "0")
	var expected Newsfeed_GetLists_Response
	fillRandomly_Newsfeed_GetLists_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "newsfeed.getLists", values, expectedJSON), token)
	resp, apiErr, err := vk.Newsfeed_GetLists(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Newsfeed_GetLists_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "newsfeed.getLists", expectedJSON), "")
	resp, apiErr, err := vk.Newsfeed_GetLists(context.Background(), Newsfeed_GetLists_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Newsfeed_GetLists_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Newsfeed_GetLists(context.Background(), Newsfeed_GetLists_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func TestVK_Newsfeed_GetListsExtended_Success(t *testing.T) {
	values := make(url.Values, 4)
	var req Newsfeed_GetLists_Request
	fillRandomly_Newsfeed_GetLists_Request(&req)
	require.NoError(t, req.fillIn(values))
	setString(values, "extended", "1")
	var expected Newsfeed_GetListsExtended_Response
	fillRandomly_Newsfeed_GetListsExtended_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "newsfeed.getLists", values, expectedJSON), token)
	resp, apiErr, err := vk.Newsfeed_GetListsExtended(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Newsfeed_GetListsExtended_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "newsfeed.getLists", expectedJSON), "")
	resp, apiErr, err := vk.Newsfeed_GetListsExtended(context.Background(), Newsfeed_GetLists_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Newsfeed_GetListsExtended_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Newsfeed_GetListsExtended(context.Background(), Newsfeed_GetLists_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Newsfeed_GetMentions_Request(r *Newsfeed_GetMentions_Request) {
	(*r).OwnerId = new(int)
	*(*r).OwnerId = randInt()
	(*r).StartTime = new(int)
	*(*r).StartTime = randInt()
	(*r).EndTime = new(int)
	*(*r).EndTime = randInt()
	(*r).Offset = new(int)
	*(*r).Offset = randInt()
	(*r).Count = new(int)
	*(*r).Count = randInt()
}

func TestVK_Newsfeed_GetMentions_Success(t *testing.T) {
	values := make(url.Values, 7)
	var req Newsfeed_GetMentions_Request
	fillRandomly_Newsfeed_GetMentions_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Newsfeed_GetMentions_Response
	fillRandomly_Newsfeed_GetMentions_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "newsfeed.getMentions", values, expectedJSON), token)
	resp, apiErr, err := vk.Newsfeed_GetMentions(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Newsfeed_GetMentions_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "newsfeed.getMentions", expectedJSON), "")
	resp, apiErr, err := vk.Newsfeed_GetMentions(context.Background(), Newsfeed_GetMentions_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Newsfeed_GetMentions_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Newsfeed_GetMentions(context.Background(), Newsfeed_GetMentions_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Newsfeed_GetRecommended_Request(r *Newsfeed_GetRecommended_Request) {
	(*r).StartTime = new(int)
	*(*r).StartTime = randInt()
	(*r).EndTime = new(int)
	*(*r).EndTime = randInt()
	(*r).MaxPhotos = new(int)
	*(*r).MaxPhotos = randInt()
	(*r).StartFrom = new(string)
	*(*r).StartFrom = randString()
	(*r).Count = new(int)
	*(*r).Count = randInt()
	(*r).Fields = new([]Base_UserGroupFields)
	l0 := randIntn(maxArrayLength + 1)
	*(*r).Fields = make([]Base_UserGroupFields, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomly_Base_UserGroupFields(&(*(*r).Fields)[i0])
	}
}

func TestVK_Newsfeed_GetRecommended_Success(t *testing.T) {
	values := make(url.Values, 8)
	var req Newsfeed_GetRecommended_Request
	fillRandomly_Newsfeed_GetRecommended_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Newsfeed_Generic_Response
	fillRandomly_Newsfeed_Generic_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "newsfeed.getRecommended", values, expectedJSON), token)
	resp, apiErr, err := vk.Newsfeed_GetRecommended(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Newsfeed_GetRecommended_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "newsfeed.getRecommended", expectedJSON), "")
	resp, apiErr, err := vk.Newsfeed_GetRecommended(context.Background(), Newsfeed_GetRecommended_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Newsfeed_GetRecommended_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Newsfeed_GetRecommended(context.Background(), Newsfeed_GetRecommended_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Newsfeed_GetSuggestedSources_Request(r *Newsfeed_GetSuggestedSources_Request) {
	(*r).Offset = new(int)
	*(*r).Offset = randInt()
	(*r).Count = new(int)
	*(*r).Count = randInt()
	(*r).Shuffle = new(bool)
	*(*r).Shuffle = randBool()
	(*r).Fields = new([]Base_UserGroupFields)
	l0 := randIntn(maxArrayLength + 1)
	*(*r).Fields = make([]Base_UserGroupFields, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomly_Base_UserGroupFields(&(*(*r).Fields)[i0])
	}
}

func TestVK_Newsfeed_GetSuggestedSources_Success(t *testing.T) {
	values := make(url.Values, 6)
	var req Newsfeed_GetSuggestedSources_Request
	fillRandomly_Newsfeed_GetSuggestedSources_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Newsfeed_GetSuggestedSources_Response
	fillRandomly_Newsfeed_GetSuggestedSources_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "newsfeed.getSuggestedSources", values, expectedJSON), token)
	resp, apiErr, err := vk.Newsfeed_GetSuggestedSources(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Newsfeed_GetSuggestedSources_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "newsfeed.getSuggestedSources", expectedJSON), "")
	resp, apiErr, err := vk.Newsfeed_GetSuggestedSources(context.Background(), Newsfeed_GetSuggestedSources_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Newsfeed_GetSuggestedSources_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Newsfeed_GetSuggestedSources(context.Background(), Newsfeed_GetSuggestedSources_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Newsfeed_IgnoreItem_Request(r *Newsfeed_IgnoreItem_Request) {
	fillRandomly_Newsfeed_IgnoreItemType(&(*r).Type)
	(*r).OwnerId = new(int)
	*(*r).OwnerId = randInt()
	(*r).ItemId = new(int)
	*(*r).ItemId = randInt()
}

func TestVK_Newsfeed_IgnoreItem_Success(t *testing.T) {
	values := make(url.Values, 5)
	var req Newsfeed_IgnoreItem_Request
	fillRandomly_Newsfeed_IgnoreItem_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Base_Ok_Response
	fillRandomly_Base_Ok_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "newsfeed.ignoreItem", values, expectedJSON), token)
	resp, apiErr, err := vk.Newsfeed_IgnoreItem(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Newsfeed_IgnoreItem_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "newsfeed.ignoreItem", expectedJSON), "")
	resp, apiErr, err := vk.Newsfeed_IgnoreItem(context.Background(), Newsfeed_IgnoreItem_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Newsfeed_IgnoreItem_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Newsfeed_IgnoreItem(context.Background(), Newsfeed_IgnoreItem_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Newsfeed_SaveList_Request(r *Newsfeed_SaveList_Request) {
	(*r).ListId = new(int)
	*(*r).ListId = randInt()
	(*r).Title = randString()
	(*r).SourceIds = new([]int)
	l0 := randIntn(maxArrayLength + 1)
	*(*r).SourceIds = make([]int, l0)
	for i0 := 0; i0 < l0; i0++ {
		(*(*r).SourceIds)[i0] = randInt()
	}
	(*r).NoReposts = new(bool)
	*(*r).NoReposts = randBool()
}

func TestVK_Newsfeed_SaveList_Success(t *testing.T) {
	values := make(url.Values, 6)
	var req Newsfeed_SaveList_Request
	fillRandomly_Newsfeed_SaveList_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Newsfeed_SaveList_Response
	fillRandomly_Newsfeed_SaveList_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "newsfeed.saveList", values, expectedJSON), token)
	resp, apiErr, err := vk.Newsfeed_SaveList(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Newsfeed_SaveList_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "newsfeed.saveList", expectedJSON), "")
	resp, apiErr, err := vk.Newsfeed_SaveList(context.Background(), Newsfeed_SaveList_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Newsfeed_SaveList_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Newsfeed_SaveList(context.Background(), Newsfeed_SaveList_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Newsfeed_Search_Request(r *Newsfeed_Search_Request) {
	(*r).Q = new(string)
	*(*r).Q = randString()
	(*r).Count = new(int)
	*(*r).Count = randInt()
	(*r).Latitude = new(float64)
	*(*r).Latitude = randFloat()
	(*r).Longitude = new(float64)
	*(*r).Longitude = randFloat()
	(*r).StartTime = new(int)
	*(*r).StartTime = randInt()
	(*r).EndTime = new(int)
	*(*r).EndTime = randInt()
	(*r).StartFrom = new(string)
	*(*r).StartFrom = randString()
	(*r).Fields = new([]Base_UserGroupFields)
	l0 := randIntn(maxArrayLength + 1)
	*(*r).Fields = make([]Base_UserGroupFields, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomly_Base_UserGroupFields(&(*(*r).Fields)[i0])
	}
}

func TestVK_Newsfeed_Search_Success(t *testing.T) {
	values := make(url.Values, 11)
	var req Newsfeed_Search_Request
	fillRandomly_Newsfeed_Search_Request(&req)
	require.NoError(t, req.fillIn(values))
	setString(values, "extended", "0")
	var expected Newsfeed_Search_Response
	fillRandomly_Newsfeed_Search_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "newsfeed.search", values, expectedJSON), token)
	resp, apiErr, err := vk.Newsfeed_Search(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Newsfeed_Search_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "newsfeed.search", expectedJSON), "")
	resp, apiErr, err := vk.Newsfeed_Search(context.Background(), Newsfeed_Search_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Newsfeed_Search_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Newsfeed_Search(context.Background(), Newsfeed_Search_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func TestVK_Newsfeed_SearchExtended_Success(t *testing.T) {
	values := make(url.Values, 11)
	var req Newsfeed_Search_Request
	fillRandomly_Newsfeed_Search_Request(&req)
	require.NoError(t, req.fillIn(values))
	setString(values, "extended", "1")
	var expected Newsfeed_SearchExtended_Response
	fillRandomly_Newsfeed_SearchExtended_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "newsfeed.search", values, expectedJSON), token)
	resp, apiErr, err := vk.Newsfeed_SearchExtended(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Newsfeed_SearchExtended_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "newsfeed.search", expectedJSON), "")
	resp, apiErr, err := vk.Newsfeed_SearchExtended(context.Background(), Newsfeed_Search_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Newsfeed_SearchExtended_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Newsfeed_SearchExtended(context.Background(), Newsfeed_Search_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Newsfeed_UnignoreItem_Request(r *Newsfeed_UnignoreItem_Request) {
	fillRandomly_Newsfeed_IgnoreItemType(&(*r).Type)
	(*r).OwnerId = randInt()
	(*r).ItemId = randInt()
	(*r).TrackCode = new(string)
	*(*r).TrackCode = randString()
}

func TestVK_Newsfeed_UnignoreItem_Success(t *testing.T) {
	values := make(url.Values, 6)
	var req Newsfeed_UnignoreItem_Request
	fillRandomly_Newsfeed_UnignoreItem_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Base_Ok_Response
	fillRandomly_Base_Ok_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "newsfeed.unignoreItem", values, expectedJSON), token)
	resp, apiErr, err := vk.Newsfeed_UnignoreItem(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Newsfeed_UnignoreItem_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "newsfeed.unignoreItem", expectedJSON), "")
	resp, apiErr, err := vk.Newsfeed_UnignoreItem(context.Background(), Newsfeed_UnignoreItem_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Newsfeed_UnignoreItem_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Newsfeed_UnignoreItem(context.Background(), Newsfeed_UnignoreItem_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Newsfeed_Unsubscribe_Type(o *Newsfeed_Unsubscribe_Type) {
	switch randIntn(5) {
	case 0:
		*o = "note"
	case 1:
		*o = "photo"
	case 2:
		*o = "post"
	case 3:
		*o = "topic"
	case 4:
		*o = "video"
	}
}

func fillRandomly_Newsfeed_Unsubscribe_Request(r *Newsfeed_Unsubscribe_Request) {
	fillRandomly_Newsfeed_Unsubscribe_Type(&(*r).Type)
	(*r).OwnerId = new(int)
	*(*r).OwnerId = randInt()
	(*r).ItemId = randInt()
}

func TestVK_Newsfeed_Unsubscribe_Success(t *testing.T) {
	values := make(url.Values, 5)
	var req Newsfeed_Unsubscribe_Request
	fillRandomly_Newsfeed_Unsubscribe_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Base_Ok_Response
	fillRandomly_Base_Ok_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "newsfeed.unsubscribe", values, expectedJSON), token)
	resp, apiErr, err := vk.Newsfeed_Unsubscribe(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Newsfeed_Unsubscribe_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "newsfeed.unsubscribe", expectedJSON), "")
	resp, apiErr, err := vk.Newsfeed_Unsubscribe(context.Background(), Newsfeed_Unsubscribe_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Newsfeed_Unsubscribe_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Newsfeed_Unsubscribe(context.Background(), Newsfeed_Unsubscribe_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Notes_Add_Request(r *Notes_Add_Request) {
	(*r).Title = randString()
	(*r).Text = randString()
	(*r).PrivacyView = new([]string)
	l0 := randIntn(maxArrayLength + 1)
	*(*r).PrivacyView = make([]string, l0)
	for i0 := 0; i0 < l0; i0++ {
		(*(*r).PrivacyView)[i0] = randString()
	}
	(*r).PrivacyComment = new([]string)
	l0 = randIntn(maxArrayLength + 1)
	*(*r).PrivacyComment = make([]string, l0)
	for i0 := 0; i0 < l0; i0++ {
		(*(*r).PrivacyComment)[i0] = randString()
	}
}

func TestVK_Notes_Add_Success(t *testing.T) {
	values := make(url.Values, 6)
	var req Notes_Add_Request
	fillRandomly_Notes_Add_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Notes_Add_Response
	fillRandomly_Notes_Add_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "notes.add", values, expectedJSON), token)
	resp, apiErr, err := vk.Notes_Add(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Notes_Add_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "notes.add", expectedJSON), "")
	resp, apiErr, err := vk.Notes_Add(context.Background(), Notes_Add_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Notes_Add_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Notes_Add(context.Background(), Notes_Add_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Notes_CreateComment_Request(r *Notes_CreateComment_Request) {
	(*r).NoteId = randInt()
	(*r).OwnerId = new(int)
	*(*r).OwnerId = randInt()
	(*r).ReplyTo = new(int)
	*(*r).ReplyTo = randInt()
	(*r).Message = randString()
	(*r).Guid = new(string)
	*(*r).Guid = randString()
}

func TestVK_Notes_CreateComment_Success(t *testing.T) {
	values := make(url.Values, 7)
	var req Notes_CreateComment_Request
	fillRandomly_Notes_CreateComment_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Notes_CreateComment_Response
	fillRandomly_Notes_CreateComment_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "notes.createComment", values, expectedJSON), token)
	resp, apiErr, err := vk.Notes_CreateComment(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Notes_CreateComment_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "notes.createComment", expectedJSON), "")
	resp, apiErr, err := vk.Notes_CreateComment(context.Background(), Notes_CreateComment_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Notes_CreateComment_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Notes_CreateComment(context.Background(), Notes_CreateComment_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Notes_Delete_Request(r *Notes_Delete_Request) {
	(*r).NoteId = randInt()
}

func TestVK_Notes_Delete_Success(t *testing.T) {
	values := make(url.Values, 3)
	var req Notes_Delete_Request
	fillRandomly_Notes_Delete_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Base_Ok_Response
	fillRandomly_Base_Ok_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "notes.delete", values, expectedJSON), token)
	resp, apiErr, err := vk.Notes_Delete(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Notes_Delete_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "notes.delete", expectedJSON), "")
	resp, apiErr, err := vk.Notes_Delete(context.Background(), Notes_Delete_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Notes_Delete_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Notes_Delete(context.Background(), Notes_Delete_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Notes_DeleteComment_Request(r *Notes_DeleteComment_Request) {
	(*r).CommentId = randInt()
	(*r).OwnerId = new(int)
	*(*r).OwnerId = randInt()
}

func TestVK_Notes_DeleteComment_Success(t *testing.T) {
	values := make(url.Values, 4)
	var req Notes_DeleteComment_Request
	fillRandomly_Notes_DeleteComment_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Base_Ok_Response
	fillRandomly_Base_Ok_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "notes.deleteComment", values, expectedJSON), token)
	resp, apiErr, err := vk.Notes_DeleteComment(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Notes_DeleteComment_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "notes.deleteComment", expectedJSON), "")
	resp, apiErr, err := vk.Notes_DeleteComment(context.Background(), Notes_DeleteComment_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Notes_DeleteComment_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Notes_DeleteComment(context.Background(), Notes_DeleteComment_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Notes_Edit_Request(r *Notes_Edit_Request) {
	(*r).NoteId = randInt()
	(*r).Title = randString()
	(*r).Text = randString()
	(*r).PrivacyView = new([]string)
	l0 := randIntn(maxArrayLength + 1)
	*(*r).PrivacyView = make([]string, l0)
	for i0 := 0; i0 < l0; i0++ {
		(*(*r).PrivacyView)[i0] = randString()
	}
	(*r).PrivacyComment = new([]string)
	l0 = randIntn(maxArrayLength + 1)
	*(*r).PrivacyComment = make([]string, l0)
	for i0 := 0; i0 < l0; i0++ {
		(*(*r).PrivacyComment)[i0] = randString()
	}
}

func TestVK_Notes_Edit_Success(t *testing.T) {
	values := make(url.Values, 7)
	var req Notes_Edit_Request
	fillRandomly_Notes_Edit_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Base_Ok_Response
	fillRandomly_Base_Ok_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "notes.edit", values, expectedJSON), token)
	resp, apiErr, err := vk.Notes_Edit(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Notes_Edit_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "notes.edit", expectedJSON), "")
	resp, apiErr, err := vk.Notes_Edit(context.Background(), Notes_Edit_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Notes_Edit_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Notes_Edit(context.Background(), Notes_Edit_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Notes_EditComment_Request(r *Notes_EditComment_Request) {
	(*r).CommentId = randInt()
	(*r).OwnerId = new(int)
	*(*r).OwnerId = randInt()
	(*r).Message = randString()
}

func TestVK_Notes_EditComment_Success(t *testing.T) {
	values := make(url.Values, 5)
	var req Notes_EditComment_Request
	fillRandomly_Notes_EditComment_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Base_Ok_Response
	fillRandomly_Base_Ok_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "notes.editComment", values, expectedJSON), token)
	resp, apiErr, err := vk.Notes_EditComment(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Notes_EditComment_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "notes.editComment", expectedJSON), "")
	resp, apiErr, err := vk.Notes_EditComment(context.Background(), Notes_EditComment_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Notes_EditComment_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Notes_EditComment(context.Background(), Notes_EditComment_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Notes_Get_Sort(o *Notes_Get_Sort) {
	switch randIntn(2) {
	case 0:
		*o = 0
	case 1:
		*o = 1
	}
}

func fillRandomly_Notes_Get_Request(r *Notes_Get_Request) {
	(*r).NoteIds = new([]int)
	l0 := randIntn(maxArrayLength + 1)
	*(*r).NoteIds = make([]int, l0)
	for i0 := 0; i0 < l0; i0++ {
		(*(*r).NoteIds)[i0] = randInt()
	}
	(*r).UserId = new(int)
	*(*r).UserId = randInt()
	(*r).Offset = new(int)
	*(*r).Offset = randInt()
	(*r).Count = new(int)
	*(*r).Count = randInt()
	(*r).Sort = new(Notes_Get_Sort)
	fillRandomly_Notes_Get_Sort((*r).Sort)
}

func TestVK_Notes_Get_Success(t *testing.T) {
	values := make(url.Values, 7)
	var req Notes_Get_Request
	fillRandomly_Notes_Get_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Notes_Get_Response
	fillRandomly_Notes_Get_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "notes.get", values, expectedJSON), token)
	resp, apiErr, err := vk.Notes_Get(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Notes_Get_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "notes.get", expectedJSON), "")
	resp, apiErr, err := vk.Notes_Get(context.Background(), Notes_Get_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Notes_Get_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Notes_Get(context.Background(), Notes_Get_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Notes_GetById_Request(r *Notes_GetById_Request) {
	(*r).NoteId = randInt()
	(*r).OwnerId = new(int)
	*(*r).OwnerId = randInt()
	(*r).NeedWiki = new(bool)
	*(*r).NeedWiki = randBool()
}

func TestVK_Notes_GetById_Success(t *testing.T) {
	values := make(url.Values, 5)
	var req Notes_GetById_Request
	fillRandomly_Notes_GetById_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Notes_GetById_Response
	fillRandomly_Notes_GetById_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "notes.getById", values, expectedJSON), token)
	resp, apiErr, err := vk.Notes_GetById(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Notes_GetById_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "notes.getById", expectedJSON), "")
	resp, apiErr, err := vk.Notes_GetById(context.Background(), Notes_GetById_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Notes_GetById_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Notes_GetById(context.Background(), Notes_GetById_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Notes_GetComments_Sort(o *Notes_GetComments_Sort) {
	switch randIntn(2) {
	case 0:
		*o = 0
	case 1:
		*o = 1
	}
}

func fillRandomly_Notes_GetComments_Request(r *Notes_GetComments_Request) {
	(*r).NoteId = randInt()
	(*r).OwnerId = new(int)
	*(*r).OwnerId = randInt()
	(*r).Sort = new(Notes_GetComments_Sort)
	fillRandomly_Notes_GetComments_Sort((*r).Sort)
	(*r).Offset = new(int)
	*(*r).Offset = randInt()
	(*r).Count = new(int)
	*(*r).Count = randInt()
}

func TestVK_Notes_GetComments_Success(t *testing.T) {
	values := make(url.Values, 7)
	var req Notes_GetComments_Request
	fillRandomly_Notes_GetComments_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Notes_GetComments_Response
	fillRandomly_Notes_GetComments_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "notes.getComments", values, expectedJSON), token)
	resp, apiErr, err := vk.Notes_GetComments(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Notes_GetComments_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "notes.getComments", expectedJSON), "")
	resp, apiErr, err := vk.Notes_GetComments(context.Background(), Notes_GetComments_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Notes_GetComments_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Notes_GetComments(context.Background(), Notes_GetComments_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Notes_RestoreComment_Request(r *Notes_RestoreComment_Request) {
	(*r).CommentId = randInt()
	(*r).OwnerId = new(int)
	*(*r).OwnerId = randInt()
}

func TestVK_Notes_RestoreComment_Success(t *testing.T) {
	values := make(url.Values, 4)
	var req Notes_RestoreComment_Request
	fillRandomly_Notes_RestoreComment_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Base_Ok_Response
	fillRandomly_Base_Ok_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "notes.restoreComment", values, expectedJSON), token)
	resp, apiErr, err := vk.Notes_RestoreComment(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Notes_RestoreComment_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "notes.restoreComment", expectedJSON), "")
	resp, apiErr, err := vk.Notes_RestoreComment(context.Background(), Notes_RestoreComment_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Notes_RestoreComment_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Notes_RestoreComment(context.Background(), Notes_RestoreComment_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Notifications_Get_Filters(o *Notifications_Get_Filters) {
	switch randIntn(7) {
	case 0:
		*o = "wall"
	case 1:
		*o = "mentions"
	case 2:
		*o = "comments"
	case 3:
		*o = "likes"
	case 4:
		*o = "reposted"
	case 5:
		*o = "followers"
	case 6:
		*o = "friends"
	}
}

func fillRandomly_Notifications_Get_Request(r *Notifications_Get_Request) {
	(*r).Count = new(int)
	*(*r).Count = randInt()
	(*r).StartFrom = new(string)
	*(*r).StartFrom = randString()
	(*r).Filters = new([]Notifications_Get_Filters)
	l0 := randIntn(maxArrayLength + 1)
	*(*r).Filters = make([]Notifications_Get_Filters, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomly_Notifications_Get_Filters(&(*(*r).Filters)[i0])
	}
	(*r).StartTime = new(int)
	*(*r).StartTime = randInt()
	(*r).EndTime = new(int)
	*(*r).EndTime = randInt()
}

func TestVK_Notifications_Get_Success(t *testing.T) {
	values := make(url.Values, 7)
	var req Notifications_Get_Request
	fillRandomly_Notifications_Get_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Notifications_Get_Response
	fillRandomly_Notifications_Get_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "notifications.get", values, expectedJSON), token)
	resp, apiErr, err := vk.Notifications_Get(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Notifications_Get_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "notifications.get", expectedJSON), "")
	resp, apiErr, err := vk.Notifications_Get(context.Background(), Notifications_Get_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Notifications_Get_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Notifications_Get(context.Background(), Notifications_Get_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func TestVK_Notifications_MarkAsViewed_Success(t *testing.T) {
	values := make(url.Values, 2)
	var expected Notifications_MarkAsViewed_Response
	fillRandomly_Notifications_MarkAsViewed_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "notifications.markAsViewed", values, expectedJSON), token)
	resp, apiErr, err := vk.Notifications_MarkAsViewed(context.Background())
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Notifications_MarkAsViewed_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "notifications.markAsViewed", expectedJSON), "")
	resp, apiErr, err := vk.Notifications_MarkAsViewed(context.Background())
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Notifications_MarkAsViewed_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Notifications_MarkAsViewed(context.Background())
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Notifications_SendMessage_SendingMode(o *Notifications_SendMessage_SendingMode) {
	switch randIntn(3) {
	case 0:
		*o = "delayed"
	case 1:
		*o = "delayed_push"
	case 2:
		*o = "immediately"
	}
}

func fillRandomly_Notifications_SendMessage_Request(r *Notifications_SendMessage_Request) {
	(*r).UserIds = new([]int)
	l0 := randIntn(maxArrayLength + 1)
	*(*r).UserIds = make([]int, l0)
	for i0 := 0; i0 < l0; i0++ {
		(*(*r).UserIds)[i0] = randInt()
	}
	(*r).Message = randString()
	(*r).Fragment = new(string)
	*(*r).Fragment = randString()
	(*r).GroupId = new(int)
	*(*r).GroupId = randInt()
	(*r).RandomId = new(int)
	*(*r).RandomId = randInt()
	(*r).SendingMode = new(Notifications_SendMessage_SendingMode)
	fillRandomly_Notifications_SendMessage_SendingMode((*r).SendingMode)
}

func TestVK_Notifications_SendMessage_Success(t *testing.T) {
	values := make(url.Values, 8)
	var req Notifications_SendMessage_Request
	fillRandomly_Notifications_SendMessage_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Notifications_SendMessage_Response
	fillRandomly_Notifications_SendMessage_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "notifications.sendMessage", values, expectedJSON), token)
	resp, apiErr, err := vk.Notifications_SendMessage(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Notifications_SendMessage_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "notifications.sendMessage", expectedJSON), "")
	resp, apiErr, err := vk.Notifications_SendMessage(context.Background(), Notifications_SendMessage_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Notifications_SendMessage_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Notifications_SendMessage(context.Background(), Notifications_SendMessage_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Orders_CancelSubscription_Request(r *Orders_CancelSubscription_Request) {
	(*r).UserId = randInt()
	(*r).SubscriptionId = randInt()
	(*r).PendingCancel = new(bool)
	*(*r).PendingCancel = randBool()
}

func TestVK_Orders_CancelSubscription_Success(t *testing.T) {
	values := make(url.Values, 5)
	var req Orders_CancelSubscription_Request
	fillRandomly_Orders_CancelSubscription_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Orders_CancelSubscription_Response
	fillRandomly_Orders_CancelSubscription_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "orders.cancelSubscription", values, expectedJSON), token)
	resp, apiErr, err := vk.Orders_CancelSubscription(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Orders_CancelSubscription_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "orders.cancelSubscription", expectedJSON), "")
	resp, apiErr, err := vk.Orders_CancelSubscription(context.Background(), Orders_CancelSubscription_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Orders_CancelSubscription_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Orders_CancelSubscription(context.Background(), Orders_CancelSubscription_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Orders_ChangeState_Action(o *Orders_ChangeState_Action) {
	switch randIntn(3) {
	case 0:
		*o = "cancel"
	case 1:
		*o = "charge"
	case 2:
		*o = "refund"
	}
}

func fillRandomly_Orders_ChangeState_Request(r *Orders_ChangeState_Request) {
	(*r).OrderId = randInt()
	fillRandomly_Orders_ChangeState_Action(&(*r).Action)
	(*r).AppOrderId = new(int)
	*(*r).AppOrderId = randInt()
	(*r).TestMode = new(bool)
	*(*r).TestMode = randBool()
}

func TestVK_Orders_ChangeState_Success(t *testing.T) {
	values := make(url.Values, 6)
	var req Orders_ChangeState_Request
	fillRandomly_Orders_ChangeState_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Orders_ChangeState_Response
	fillRandomly_Orders_ChangeState_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "orders.changeState", values, expectedJSON), token)
	resp, apiErr, err := vk.Orders_ChangeState(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Orders_ChangeState_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "orders.changeState", expectedJSON), "")
	resp, apiErr, err := vk.Orders_ChangeState(context.Background(), Orders_ChangeState_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Orders_ChangeState_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Orders_ChangeState(context.Background(), Orders_ChangeState_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Orders_Get_Request(r *Orders_Get_Request) {
	(*r).Offset = new(int)
	*(*r).Offset = randInt()
	(*r).Count = new(int)
	*(*r).Count = randInt()
	(*r).TestMode = new(bool)
	*(*r).TestMode = randBool()
}

func TestVK_Orders_Get_Success(t *testing.T) {
	values := make(url.Values, 5)
	var req Orders_Get_Request
	fillRandomly_Orders_Get_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Orders_Get_Response
	fillRandomly_Orders_Get_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "orders.get", values, expectedJSON), token)
	resp, apiErr, err := vk.Orders_Get(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Orders_Get_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "orders.get", expectedJSON), "")
	resp, apiErr, err := vk.Orders_Get(context.Background(), Orders_Get_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Orders_Get_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Orders_Get(context.Background(), Orders_Get_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Orders_GetAmount_Request(r *Orders_GetAmount_Request) {
	(*r).UserId = randInt()
	(*r).Votes = new([]string)
	l0 := randIntn(maxArrayLength + 1)
	*(*r).Votes = make([]string, l0)
	for i0 := 0; i0 < l0; i0++ {
		(*(*r).Votes)[i0] = randString()
	}
}

func TestVK_Orders_GetAmount_Success(t *testing.T) {
	values := make(url.Values, 4)
	var req Orders_GetAmount_Request
	fillRandomly_Orders_GetAmount_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Orders_GetAmount_Response
	fillRandomly_Orders_GetAmount_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "orders.getAmount", values, expectedJSON), token)
	resp, apiErr, err := vk.Orders_GetAmount(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Orders_GetAmount_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "orders.getAmount", expectedJSON), "")
	resp, apiErr, err := vk.Orders_GetAmount(context.Background(), Orders_GetAmount_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Orders_GetAmount_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Orders_GetAmount(context.Background(), Orders_GetAmount_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Orders_GetById_Request(r *Orders_GetById_Request) {
	(*r).OrderId = new(int)
	*(*r).OrderId = randInt()
	(*r).OrderIds = new([]int)
	l0 := randIntn(maxArrayLength + 1)
	*(*r).OrderIds = make([]int, l0)
	for i0 := 0; i0 < l0; i0++ {
		(*(*r).OrderIds)[i0] = randInt()
	}
	(*r).TestMode = new(bool)
	*(*r).TestMode = randBool()
}

func TestVK_Orders_GetById_Success(t *testing.T) {
	values := make(url.Values, 5)
	var req Orders_GetById_Request
	fillRandomly_Orders_GetById_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Orders_GetById_Response
	fillRandomly_Orders_GetById_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "orders.getById", values, expectedJSON), token)
	resp, apiErr, err := vk.Orders_GetById(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Orders_GetById_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "orders.getById", expectedJSON), "")
	resp, apiErr, err := vk.Orders_GetById(context.Background(), Orders_GetById_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Orders_GetById_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Orders_GetById(context.Background(), Orders_GetById_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Orders_GetUserSubscriptionById_Request(r *Orders_GetUserSubscriptionById_Request) {
	(*r).UserId = randInt()
	(*r).SubscriptionId = randInt()
}

func TestVK_Orders_GetUserSubscriptionById_Success(t *testing.T) {
	values := make(url.Values, 4)
	var req Orders_GetUserSubscriptionById_Request
	fillRandomly_Orders_GetUserSubscriptionById_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Orders_GetUserSubscriptionById_Response
	fillRandomly_Orders_GetUserSubscriptionById_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "orders.getUserSubscriptionById", values, expectedJSON), token)
	resp, apiErr, err := vk.Orders_GetUserSubscriptionById(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Orders_GetUserSubscriptionById_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "orders.getUserSubscriptionById", expectedJSON), "")
	resp, apiErr, err := vk.Orders_GetUserSubscriptionById(context.Background(), Orders_GetUserSubscriptionById_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Orders_GetUserSubscriptionById_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Orders_GetUserSubscriptionById(context.Background(), Orders_GetUserSubscriptionById_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Orders_GetUserSubscriptions_Request(r *Orders_GetUserSubscriptions_Request) {
	(*r).UserId = randInt()
}

func TestVK_Orders_GetUserSubscriptions_Success(t *testing.T) {
	values := make(url.Values, 3)
	var req Orders_GetUserSubscriptions_Request
	fillRandomly_Orders_GetUserSubscriptions_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Orders_GetUserSubscriptions_Response
	fillRandomly_Orders_GetUserSubscriptions_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "orders.getUserSubscriptions", values, expectedJSON), token)
	resp, apiErr, err := vk.Orders_GetUserSubscriptions(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Orders_GetUserSubscriptions_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "orders.getUserSubscriptions", expectedJSON), "")
	resp, apiErr, err := vk.Orders_GetUserSubscriptions(context.Background(), Orders_GetUserSubscriptions_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Orders_GetUserSubscriptions_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Orders_GetUserSubscriptions(context.Background(), Orders_GetUserSubscriptions_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Orders_UpdateSubscription_Request(r *Orders_UpdateSubscription_Request) {
	(*r).UserId = randInt()
	(*r).SubscriptionId = randInt()
	(*r).Price = randInt()
}

func TestVK_Orders_UpdateSubscription_Success(t *testing.T) {
	values := make(url.Values, 5)
	var req Orders_UpdateSubscription_Request
	fillRandomly_Orders_UpdateSubscription_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Orders_UpdateSubscription_Response
	fillRandomly_Orders_UpdateSubscription_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "orders.updateSubscription", values, expectedJSON), token)
	resp, apiErr, err := vk.Orders_UpdateSubscription(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Orders_UpdateSubscription_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "orders.updateSubscription", expectedJSON), "")
	resp, apiErr, err := vk.Orders_UpdateSubscription(context.Background(), Orders_UpdateSubscription_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Orders_UpdateSubscription_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Orders_UpdateSubscription(context.Background(), Orders_UpdateSubscription_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Pages_ClearCache_Request(r *Pages_ClearCache_Request) {
	(*r).Url = randString()
}

func TestVK_Pages_ClearCache_Success(t *testing.T) {
	values := make(url.Values, 3)
	var req Pages_ClearCache_Request
	fillRandomly_Pages_ClearCache_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Base_Ok_Response
	fillRandomly_Base_Ok_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "pages.clearCache", values, expectedJSON), token)
	resp, apiErr, err := vk.Pages_ClearCache(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Pages_ClearCache_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "pages.clearCache", expectedJSON), "")
	resp, apiErr, err := vk.Pages_ClearCache(context.Background(), Pages_ClearCache_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Pages_ClearCache_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Pages_ClearCache(context.Background(), Pages_ClearCache_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Pages_Get_Request(r *Pages_Get_Request) {
	(*r).OwnerId = new(int)
	*(*r).OwnerId = randInt()
	(*r).PageId = new(int)
	*(*r).PageId = randInt()
	(*r).Global = new(bool)
	*(*r).Global = randBool()
	(*r).SitePreview = new(bool)
	*(*r).SitePreview = randBool()
	(*r).Title = new(string)
	*(*r).Title = randString()
	(*r).NeedSource = new(bool)
	*(*r).NeedSource = randBool()
	(*r).NeedHtml = new(bool)
	*(*r).NeedHtml = randBool()
}

func TestVK_Pages_Get_Success(t *testing.T) {
	values := make(url.Values, 9)
	var req Pages_Get_Request
	fillRandomly_Pages_Get_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Pages_Get_Response
	fillRandomly_Pages_Get_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "pages.get", values, expectedJSON), token)
	resp, apiErr, err := vk.Pages_Get(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Pages_Get_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "pages.get", expectedJSON), "")
	resp, apiErr, err := vk.Pages_Get(context.Background(), Pages_Get_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Pages_Get_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Pages_Get(context.Background(), Pages_Get_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Pages_GetHistory_Request(r *Pages_GetHistory_Request) {
	(*r).PageId = randInt()
	(*r).GroupId = new(int)
	*(*r).GroupId = randInt()
	(*r).UserId = new(int)
	*(*r).UserId = randInt()
}

func TestVK_Pages_GetHistory_Success(t *testing.T) {
	values := make(url.Values, 5)
	var req Pages_GetHistory_Request
	fillRandomly_Pages_GetHistory_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Pages_GetHistory_Response
	fillRandomly_Pages_GetHistory_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "pages.getHistory", values, expectedJSON), token)
	resp, apiErr, err := vk.Pages_GetHistory(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Pages_GetHistory_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "pages.getHistory", expectedJSON), "")
	resp, apiErr, err := vk.Pages_GetHistory(context.Background(), Pages_GetHistory_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Pages_GetHistory_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Pages_GetHistory(context.Background(), Pages_GetHistory_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Pages_GetTitles_Request(r *Pages_GetTitles_Request) {
	(*r).GroupId = new(int)
	*(*r).GroupId = randInt()
}

func TestVK_Pages_GetTitles_Success(t *testing.T) {
	values := make(url.Values, 3)
	var req Pages_GetTitles_Request
	fillRandomly_Pages_GetTitles_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Pages_GetTitles_Response
	fillRandomly_Pages_GetTitles_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "pages.getTitles", values, expectedJSON), token)
	resp, apiErr, err := vk.Pages_GetTitles(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Pages_GetTitles_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "pages.getTitles", expectedJSON), "")
	resp, apiErr, err := vk.Pages_GetTitles(context.Background(), Pages_GetTitles_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Pages_GetTitles_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Pages_GetTitles(context.Background(), Pages_GetTitles_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Pages_GetVersion_Request(r *Pages_GetVersion_Request) {
	(*r).VersionId = randInt()
	(*r).GroupId = new(int)
	*(*r).GroupId = randInt()
	(*r).UserId = new(int)
	*(*r).UserId = randInt()
	(*r).NeedHtml = new(bool)
	*(*r).NeedHtml = randBool()
}

func TestVK_Pages_GetVersion_Success(t *testing.T) {
	values := make(url.Values, 6)
	var req Pages_GetVersion_Request
	fillRandomly_Pages_GetVersion_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Pages_GetVersion_Response
	fillRandomly_Pages_GetVersion_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "pages.getVersion", values, expectedJSON), token)
	resp, apiErr, err := vk.Pages_GetVersion(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Pages_GetVersion_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "pages.getVersion", expectedJSON), "")
	resp, apiErr, err := vk.Pages_GetVersion(context.Background(), Pages_GetVersion_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Pages_GetVersion_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Pages_GetVersion(context.Background(), Pages_GetVersion_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Pages_ParseWiki_Request(r *Pages_ParseWiki_Request) {
	(*r).Text = randString()
	(*r).GroupId = new(int)
	*(*r).GroupId = randInt()
}

func TestVK_Pages_ParseWiki_Success(t *testing.T) {
	values := make(url.Values, 4)
	var req Pages_ParseWiki_Request
	fillRandomly_Pages_ParseWiki_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Pages_ParseWiki_Response
	fillRandomly_Pages_ParseWiki_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "pages.parseWiki", values, expectedJSON), token)
	resp, apiErr, err := vk.Pages_ParseWiki(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Pages_ParseWiki_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "pages.parseWiki", expectedJSON), "")
	resp, apiErr, err := vk.Pages_ParseWiki(context.Background(), Pages_ParseWiki_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Pages_ParseWiki_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Pages_ParseWiki(context.Background(), Pages_ParseWiki_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Pages_Save_Request(r *Pages_Save_Request) {
	(*r).Text = new(string)
	*(*r).Text = randString()
	(*r).PageId = new(int)
	*(*r).PageId = randInt()
	(*r).GroupId = new(int)
	*(*r).GroupId = randInt()
	(*r).UserId = new(int)
	*(*r).UserId = randInt()
	(*r).Title = new(string)
	*(*r).Title = randString()
}

func TestVK_Pages_Save_Success(t *testing.T) {
	values := make(url.Values, 7)
	var req Pages_Save_Request
	fillRandomly_Pages_Save_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Pages_Save_Response
	fillRandomly_Pages_Save_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "pages.save", values, expectedJSON), token)
	resp, apiErr, err := vk.Pages_Save(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Pages_Save_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "pages.save", expectedJSON), "")
	resp, apiErr, err := vk.Pages_Save(context.Background(), Pages_Save_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Pages_Save_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Pages_Save(context.Background(), Pages_Save_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Pages_SaveAccess_View(o *Pages_SaveAccess_View) {
	switch randIntn(3) {
	case 0:
		*o = 0
	case 1:
		*o = 1
	case 2:
		*o = 2
	}
}

func fillRandomly_Pages_SaveAccess_Edit(o *Pages_SaveAccess_Edit) {
	switch randIntn(3) {
	case 0:
		*o = 0
	case 1:
		*o = 1
	case 2:
		*o = 2
	}
}

func fillRandomly_Pages_SaveAccess_Request(r *Pages_SaveAccess_Request) {
	(*r).PageId = randInt()
	(*r).GroupId = new(int)
	*(*r).GroupId = randInt()
	(*r).UserId = new(int)
	*(*r).UserId = randInt()
	(*r).View = new(Pages_SaveAccess_View)
	fillRandomly_Pages_SaveAccess_View((*r).View)
	(*r).Edit = new(Pages_SaveAccess_Edit)
	fillRandomly_Pages_SaveAccess_Edit((*r).Edit)
}

func TestVK_Pages_SaveAccess_Success(t *testing.T) {
	values := make(url.Values, 7)
	var req Pages_SaveAccess_Request
	fillRandomly_Pages_SaveAccess_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Pages_SaveAccess_Response
	fillRandomly_Pages_SaveAccess_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "pages.saveAccess", values, expectedJSON), token)
	resp, apiErr, err := vk.Pages_SaveAccess(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Pages_SaveAccess_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "pages.saveAccess", expectedJSON), "")
	resp, apiErr, err := vk.Pages_SaveAccess(context.Background(), Pages_SaveAccess_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Pages_SaveAccess_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Pages_SaveAccess(context.Background(), Pages_SaveAccess_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Photos_ConfirmTag_Request(r *Photos_ConfirmTag_Request) {
	(*r).OwnerId = new(int)
	*(*r).OwnerId = randInt()
	(*r).PhotoId = randString()
	(*r).TagId = randInt()
}

func TestVK_Photos_ConfirmTag_Success(t *testing.T) {
	values := make(url.Values, 5)
	var req Photos_ConfirmTag_Request
	fillRandomly_Photos_ConfirmTag_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Base_Ok_Response
	fillRandomly_Base_Ok_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "photos.confirmTag", values, expectedJSON), token)
	resp, apiErr, err := vk.Photos_ConfirmTag(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Photos_ConfirmTag_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "photos.confirmTag", expectedJSON), "")
	resp, apiErr, err := vk.Photos_ConfirmTag(context.Background(), Photos_ConfirmTag_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Photos_ConfirmTag_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Photos_ConfirmTag(context.Background(), Photos_ConfirmTag_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Photos_Copy_Request(r *Photos_Copy_Request) {
	(*r).OwnerId = randInt()
	(*r).PhotoId = randInt()
	(*r).AccessKey = new(string)
	*(*r).AccessKey = randString()
}

func TestVK_Photos_Copy_Success(t *testing.T) {
	values := make(url.Values, 5)
	var req Photos_Copy_Request
	fillRandomly_Photos_Copy_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Photos_Copy_Response
	fillRandomly_Photos_Copy_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "photos.copy", values, expectedJSON), token)
	resp, apiErr, err := vk.Photos_Copy(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Photos_Copy_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "photos.copy", expectedJSON), "")
	resp, apiErr, err := vk.Photos_Copy(context.Background(), Photos_Copy_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Photos_Copy_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Photos_Copy(context.Background(), Photos_Copy_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Photos_CreateAlbum_Request(r *Photos_CreateAlbum_Request) {
	(*r).Title = randString()
	(*r).GroupId = new(int)
	*(*r).GroupId = randInt()
	(*r).Description = new(string)
	*(*r).Description = randString()
	(*r).PrivacyView = new([]string)
	l0 := randIntn(maxArrayLength + 1)
	*(*r).PrivacyView = make([]string, l0)
	for i0 := 0; i0 < l0; i0++ {
		(*(*r).PrivacyView)[i0] = randString()
	}
	(*r).PrivacyComment = new([]string)
	l0 = randIntn(maxArrayLength + 1)
	*(*r).PrivacyComment = make([]string, l0)
	for i0 := 0; i0 < l0; i0++ {
		(*(*r).PrivacyComment)[i0] = randString()
	}
	(*r).UploadByAdminsOnly = new(bool)
	*(*r).UploadByAdminsOnly = randBool()
	(*r).CommentsDisabled = new(bool)
	*(*r).CommentsDisabled = randBool()
}

func TestVK_Photos_CreateAlbum_Success(t *testing.T) {
	values := make(url.Values, 9)
	var req Photos_CreateAlbum_Request
	fillRandomly_Photos_CreateAlbum_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Photos_CreateAlbum_Response
	fillRandomly_Photos_CreateAlbum_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "photos.createAlbum", values, expectedJSON), token)
	resp, apiErr, err := vk.Photos_CreateAlbum(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Photos_CreateAlbum_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "photos.createAlbum", expectedJSON), "")
	resp, apiErr, err := vk.Photos_CreateAlbum(context.Background(), Photos_CreateAlbum_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Photos_CreateAlbum_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Photos_CreateAlbum(context.Background(), Photos_CreateAlbum_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Photos_CreateComment_Request(r *Photos_CreateComment_Request) {
	(*r).OwnerId = new(int)
	*(*r).OwnerId = randInt()
	(*r).PhotoId = randInt()
	(*r).Message = new(string)
	*(*r).Message = randString()
	(*r).Attachments = new([]string)
	l0 := randIntn(maxArrayLength + 1)
	*(*r).Attachments = make([]string, l0)
	for i0 := 0; i0 < l0; i0++ {
		(*(*r).Attachments)[i0] = randString()
	}
	(*r).FromGroup = new(bool)
	*(*r).FromGroup = randBool()
	(*r).ReplyToComment = new(int)
	*(*r).ReplyToComment = randInt()
	(*r).StickerId = new(int)
	*(*r).StickerId = randInt()
	(*r).AccessKey = new(string)
	*(*r).AccessKey = randString()
	(*r).Guid = new(string)
	*(*r).Guid = randString()
}

func TestVK_Photos_CreateComment_Success(t *testing.T) {
	values := make(url.Values, 11)
	var req Photos_CreateComment_Request
	fillRandomly_Photos_CreateComment_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Photos_CreateComment_Response
	fillRandomly_Photos_CreateComment_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "photos.createComment", values, expectedJSON), token)
	resp, apiErr, err := vk.Photos_CreateComment(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Photos_CreateComment_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "photos.createComment", expectedJSON), "")
	resp, apiErr, err := vk.Photos_CreateComment(context.Background(), Photos_CreateComment_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Photos_CreateComment_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Photos_CreateComment(context.Background(), Photos_CreateComment_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Photos_Delete_Request(r *Photos_Delete_Request) {
	(*r).OwnerId = new(int)
	*(*r).OwnerId = randInt()
	(*r).PhotoId = randInt()
}

func TestVK_Photos_Delete_Success(t *testing.T) {
	values := make(url.Values, 4)
	var req Photos_Delete_Request
	fillRandomly_Photos_Delete_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Base_Ok_Response
	fillRandomly_Base_Ok_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "photos.delete", values, expectedJSON), token)
	resp, apiErr, err := vk.Photos_Delete(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Photos_Delete_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "photos.delete", expectedJSON), "")
	resp, apiErr, err := vk.Photos_Delete(context.Background(), Photos_Delete_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Photos_Delete_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Photos_Delete(context.Background(), Photos_Delete_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Photos_DeleteAlbum_Request(r *Photos_DeleteAlbum_Request) {
	(*r).AlbumId = randInt()
	(*r).GroupId = new(int)
	*(*r).GroupId = randInt()
}

func TestVK_Photos_DeleteAlbum_Success(t *testing.T) {
	values := make(url.Values, 4)
	var req Photos_DeleteAlbum_Request
	fillRandomly_Photos_DeleteAlbum_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Base_Ok_Response
	fillRandomly_Base_Ok_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "photos.deleteAlbum", values, expectedJSON), token)
	resp, apiErr, err := vk.Photos_DeleteAlbum(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Photos_DeleteAlbum_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "photos.deleteAlbum", expectedJSON), "")
	resp, apiErr, err := vk.Photos_DeleteAlbum(context.Background(), Photos_DeleteAlbum_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Photos_DeleteAlbum_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Photos_DeleteAlbum(context.Background(), Photos_DeleteAlbum_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Photos_DeleteComment_Request(r *Photos_DeleteComment_Request) {
	(*r).OwnerId = new(int)
	*(*r).OwnerId = randInt()
	(*r).CommentId = randInt()
}

func TestVK_Photos_DeleteComment_Success(t *testing.T) {
	values := make(url.Values, 4)
	var req Photos_DeleteComment_Request
	fillRandomly_Photos_DeleteComment_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Photos_DeleteComment_Response
	fillRandomly_Photos_DeleteComment_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "photos.deleteComment", values, expectedJSON), token)
	resp, apiErr, err := vk.Photos_DeleteComment(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Photos_DeleteComment_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "photos.deleteComment", expectedJSON), "")
	resp, apiErr, err := vk.Photos_DeleteComment(context.Background(), Photos_DeleteComment_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Photos_DeleteComment_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Photos_DeleteComment(context.Background(), Photos_DeleteComment_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Photos_Edit_Request(r *Photos_Edit_Request) {
	(*r).OwnerId = new(int)
	*(*r).OwnerId = randInt()
	(*r).PhotoId = randInt()
	(*r).Caption = new(string)
	*(*r).Caption = randString()
	(*r).Latitude = new(float64)
	*(*r).Latitude = randFloat()
	(*r).Longitude = new(float64)
	*(*r).Longitude = randFloat()
	(*r).PlaceStr = new(string)
	*(*r).PlaceStr = randString()
	(*r).FoursquareId = new(string)
	*(*r).FoursquareId = randString()
	(*r).DeletePlace = new(bool)
	*(*r).DeletePlace = randBool()
}

func TestVK_Photos_Edit_Success(t *testing.T) {
	values := make(url.Values, 10)
	var req Photos_Edit_Request
	fillRandomly_Photos_Edit_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Base_Ok_Response
	fillRandomly_Base_Ok_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "photos.edit", values, expectedJSON), token)
	resp, apiErr, err := vk.Photos_Edit(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Photos_Edit_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "photos.edit", expectedJSON), "")
	resp, apiErr, err := vk.Photos_Edit(context.Background(), Photos_Edit_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Photos_Edit_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Photos_Edit(context.Background(), Photos_Edit_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Photos_EditAlbum_Request(r *Photos_EditAlbum_Request) {
	(*r).AlbumId = randInt()
	(*r).Title = new(string)
	*(*r).Title = randString()
	(*r).Description = new(string)
	*(*r).Description = randString()
	(*r).OwnerId = new(int)
	*(*r).OwnerId = randInt()
	(*r).PrivacyView = new([]string)
	l0 := randIntn(maxArrayLength + 1)
	*(*r).PrivacyView = make([]string, l0)
	for i0 := 0; i0 < l0; i0++ {
		(*(*r).PrivacyView)[i0] = randString()
	}
	(*r).PrivacyComment = new([]string)
	l0 = randIntn(maxArrayLength + 1)
	*(*r).PrivacyComment = make([]string, l0)
	for i0 := 0; i0 < l0; i0++ {
		(*(*r).PrivacyComment)[i0] = randString()
	}
	(*r).UploadByAdminsOnly = new(bool)
	*(*r).UploadByAdminsOnly = randBool()
	(*r).CommentsDisabled = new(bool)
	*(*r).CommentsDisabled = randBool()
}

func TestVK_Photos_EditAlbum_Success(t *testing.T) {
	values := make(url.Values, 10)
	var req Photos_EditAlbum_Request
	fillRandomly_Photos_EditAlbum_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Base_Ok_Response
	fillRandomly_Base_Ok_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "photos.editAlbum", values, expectedJSON), token)
	resp, apiErr, err := vk.Photos_EditAlbum(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Photos_EditAlbum_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "photos.editAlbum", expectedJSON), "")
	resp, apiErr, err := vk.Photos_EditAlbum(context.Background(), Photos_EditAlbum_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Photos_EditAlbum_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Photos_EditAlbum(context.Background(), Photos_EditAlbum_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Photos_EditComment_Request(r *Photos_EditComment_Request) {
	(*r).OwnerId = new(int)
	*(*r).OwnerId = randInt()
	(*r).CommentId = randInt()
	(*r).Message = new(string)
	*(*r).Message = randString()
	(*r).Attachments = new([]string)
	l0 := randIntn(maxArrayLength + 1)
	*(*r).Attachments = make([]string, l0)
	for i0 := 0; i0 < l0; i0++ {
		(*(*r).Attachments)[i0] = randString()
	}
}

func TestVK_Photos_EditComment_Success(t *testing.T) {
	values := make(url.Values, 6)
	var req Photos_EditComment_Request
	fillRandomly_Photos_EditComment_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Base_Ok_Response
	fillRandomly_Base_Ok_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "photos.editComment", values, expectedJSON), token)
	resp, apiErr, err := vk.Photos_EditComment(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Photos_EditComment_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "photos.editComment", expectedJSON), "")
	resp, apiErr, err := vk.Photos_EditComment(context.Background(), Photos_EditComment_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Photos_EditComment_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Photos_EditComment(context.Background(), Photos_EditComment_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Photos_Get_Request(r *Photos_Get_Request) {
	(*r).OwnerId = new(int)
	*(*r).OwnerId = randInt()
	(*r).AlbumId = new(string)
	*(*r).AlbumId = randString()
	(*r).PhotoIds = new([]string)
	l0 := randIntn(maxArrayLength + 1)
	*(*r).PhotoIds = make([]string, l0)
	for i0 := 0; i0 < l0; i0++ {
		(*(*r).PhotoIds)[i0] = randString()
	}
	(*r).Rev = new(bool)
	*(*r).Rev = randBool()
	(*r).Extended = new(bool)
	*(*r).Extended = randBool()
	(*r).FeedType = new(string)
	*(*r).FeedType = randString()
	(*r).Feed = new(int)
	*(*r).Feed = randInt()
	(*r).PhotoSizes = new(bool)
	*(*r).PhotoSizes = randBool()
	(*r).Offset = new(int)
	*(*r).Offset = randInt()
	(*r).Count = new(int)
	*(*r).Count = randInt()
}

func TestVK_Photos_Get_Success(t *testing.T) {
	values := make(url.Values, 12)
	var req Photos_Get_Request
	fillRandomly_Photos_Get_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Photos_Get_Response
	fillRandomly_Photos_Get_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "photos.get", values, expectedJSON), token)
	resp, apiErr, err := vk.Photos_Get(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Photos_Get_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "photos.get", expectedJSON), "")
	resp, apiErr, err := vk.Photos_Get(context.Background(), Photos_Get_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Photos_Get_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Photos_Get(context.Background(), Photos_Get_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Photos_GetAlbums_Request(r *Photos_GetAlbums_Request) {
	(*r).OwnerId = new(int)
	*(*r).OwnerId = randInt()
	(*r).AlbumIds = new([]int)
	l0 := randIntn(maxArrayLength + 1)
	*(*r).AlbumIds = make([]int, l0)
	for i0 := 0; i0 < l0; i0++ {
		(*(*r).AlbumIds)[i0] = randInt()
	}
	(*r).Offset = new(int)
	*(*r).Offset = randInt()
	(*r).Count = new(int)
	*(*r).Count = randInt()
	(*r).NeedSystem = new(bool)
	*(*r).NeedSystem = randBool()
	(*r).NeedCovers = new(bool)
	*(*r).NeedCovers = randBool()
	(*r).PhotoSizes = new(bool)
	*(*r).PhotoSizes = randBool()
}

func TestVK_Photos_GetAlbums_Success(t *testing.T) {
	values := make(url.Values, 9)
	var req Photos_GetAlbums_Request
	fillRandomly_Photos_GetAlbums_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Photos_GetAlbums_Response
	fillRandomly_Photos_GetAlbums_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "photos.getAlbums", values, expectedJSON), token)
	resp, apiErr, err := vk.Photos_GetAlbums(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Photos_GetAlbums_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "photos.getAlbums", expectedJSON), "")
	resp, apiErr, err := vk.Photos_GetAlbums(context.Background(), Photos_GetAlbums_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Photos_GetAlbums_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Photos_GetAlbums(context.Background(), Photos_GetAlbums_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Photos_GetAlbumsCount_Request(r *Photos_GetAlbumsCount_Request) {
	(*r).UserId = new(int)
	*(*r).UserId = randInt()
	(*r).GroupId = new(int)
	*(*r).GroupId = randInt()
}

func TestVK_Photos_GetAlbumsCount_Success(t *testing.T) {
	values := make(url.Values, 4)
	var req Photos_GetAlbumsCount_Request
	fillRandomly_Photos_GetAlbumsCount_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Photos_GetAlbumsCount_Response
	fillRandomly_Photos_GetAlbumsCount_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "photos.getAlbumsCount", values, expectedJSON), token)
	resp, apiErr, err := vk.Photos_GetAlbumsCount(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Photos_GetAlbumsCount_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "photos.getAlbumsCount", expectedJSON), "")
	resp, apiErr, err := vk.Photos_GetAlbumsCount(context.Background(), Photos_GetAlbumsCount_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Photos_GetAlbumsCount_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Photos_GetAlbumsCount(context.Background(), Photos_GetAlbumsCount_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Photos_GetAll_Request(r *Photos_GetAll_Request) {
	(*r).OwnerId = new(int)
	*(*r).OwnerId = randInt()
	(*r).Offset = new(int)
	*(*r).Offset = randInt()
	(*r).Count = new(int)
	*(*r).Count = randInt()
	(*r).PhotoSizes = new(bool)
	*(*r).PhotoSizes = randBool()
	(*r).NoServiceAlbums = new(bool)
	*(*r).NoServiceAlbums = randBool()
	(*r).NeedHidden = new(bool)
	*(*r).NeedHidden = randBool()
	(*r).SkipHidden = new(bool)
	*(*r).SkipHidden = randBool()
}

func TestVK_Photos_GetAll_Success(t *testing.T) {
	values := make(url.Values, 10)
	var req Photos_GetAll_Request
	fillRandomly_Photos_GetAll_Request(&req)
	require.NoError(t, req.fillIn(values))
	setString(values, "extended", "0")
	var expected Photos_GetAll_Response
	fillRandomly_Photos_GetAll_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "photos.getAll", values, expectedJSON), token)
	resp, apiErr, err := vk.Photos_GetAll(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Photos_GetAll_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "photos.getAll", expectedJSON), "")
	resp, apiErr, err := vk.Photos_GetAll(context.Background(), Photos_GetAll_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Photos_GetAll_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Photos_GetAll(context.Background(), Photos_GetAll_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func TestVK_Photos_GetAllExtended_Success(t *testing.T) {
	values := make(url.Values, 10)
	var req Photos_GetAll_Request
	fillRandomly_Photos_GetAll_Request(&req)
	require.NoError(t, req.fillIn(values))
	setString(values, "extended", "1")
	var expected Photos_GetAllExtended_Response
	fillRandomly_Photos_GetAllExtended_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "photos.getAll", values, expectedJSON), token)
	resp, apiErr, err := vk.Photos_GetAllExtended(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Photos_GetAllExtended_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "photos.getAll", expectedJSON), "")
	resp, apiErr, err := vk.Photos_GetAllExtended(context.Background(), Photos_GetAll_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Photos_GetAllExtended_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Photos_GetAllExtended(context.Background(), Photos_GetAll_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Photos_GetAllComments_Request(r *Photos_GetAllComments_Request) {
	(*r).OwnerId = new(int)
	*(*r).OwnerId = randInt()
	(*r).AlbumId = new(int)
	*(*r).AlbumId = randInt()
	(*r).NeedLikes = new(bool)
	*(*r).NeedLikes = randBool()
	(*r).Offset = new(int)
	*(*r).Offset = randInt()
	(*r).Count = new(int)
	*(*r).Count = randInt()
}

func TestVK_Photos_GetAllComments_Success(t *testing.T) {
	values := make(url.Values, 7)
	var req Photos_GetAllComments_Request
	fillRandomly_Photos_GetAllComments_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Photos_GetAllComments_Response
	fillRandomly_Photos_GetAllComments_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "photos.getAllComments", values, expectedJSON), token)
	resp, apiErr, err := vk.Photos_GetAllComments(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Photos_GetAllComments_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "photos.getAllComments", expectedJSON), "")
	resp, apiErr, err := vk.Photos_GetAllComments(context.Background(), Photos_GetAllComments_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Photos_GetAllComments_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Photos_GetAllComments(context.Background(), Photos_GetAllComments_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Photos_GetById_Request(r *Photos_GetById_Request) {
	(*r).Photos = new([]string)
	l0 := randIntn(maxArrayLength + 1)
	*(*r).Photos = make([]string, l0)
	for i0 := 0; i0 < l0; i0++ {
		(*(*r).Photos)[i0] = randString()
	}
	(*r).Extended = new(bool)
	*(*r).Extended = randBool()
	(*r).PhotoSizes = new(bool)
	*(*r).PhotoSizes = randBool()
}

func TestVK_Photos_GetById_Success(t *testing.T) {
	values := make(url.Values, 5)
	var req Photos_GetById_Request
	fillRandomly_Photos_GetById_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Photos_GetById_Response
	fillRandomly_Photos_GetById_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "photos.getById", values, expectedJSON), token)
	resp, apiErr, err := vk.Photos_GetById(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Photos_GetById_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "photos.getById", expectedJSON), "")
	resp, apiErr, err := vk.Photos_GetById(context.Background(), Photos_GetById_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Photos_GetById_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Photos_GetById(context.Background(), Photos_GetById_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Photos_GetChatUploadServer_Request(r *Photos_GetChatUploadServer_Request) {
	(*r).ChatId = randInt()
	(*r).CropX = new(int)
	*(*r).CropX = randInt()
	(*r).CropY = new(int)
	*(*r).CropY = randInt()
	(*r).CropWidth = new(int)
	*(*r).CropWidth = randInt()
}

func TestVK_Photos_GetChatUploadServer_Success(t *testing.T) {
	values := make(url.Values, 6)
	var req Photos_GetChatUploadServer_Request
	fillRandomly_Photos_GetChatUploadServer_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Base_GetUploadServer_Response
	fillRandomly_Base_GetUploadServer_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "photos.getChatUploadServer", values, expectedJSON), token)
	resp, apiErr, err := vk.Photos_GetChatUploadServer(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Photos_GetChatUploadServer_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "photos.getChatUploadServer", expectedJSON), "")
	resp, apiErr, err := vk.Photos_GetChatUploadServer(context.Background(), Photos_GetChatUploadServer_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Photos_GetChatUploadServer_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Photos_GetChatUploadServer(context.Background(), Photos_GetChatUploadServer_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Photos_GetComments_Sort(o *Photos_GetComments_Sort) {
	switch randIntn(2) {
	case 0:
		*o = "asc"
	case 1:
		*o = "desc"
	}
}

func fillRandomly_Photos_GetComments_Request(r *Photos_GetComments_Request) {
	(*r).OwnerId = new(int)
	*(*r).OwnerId = randInt()
	(*r).PhotoId = randInt()
	(*r).NeedLikes = new(bool)
	*(*r).NeedLikes = randBool()
	(*r).StartCommentId = new(int)
	*(*r).StartCommentId = randInt()
	(*r).Offset = new(int)
	*(*r).Offset = randInt()
	(*r).Count = new(int)
	*(*r).Count = randInt()
	(*r).Sort = new(Photos_GetComments_Sort)
	fillRandomly_Photos_GetComments_Sort((*r).Sort)
	(*r).AccessKey = new(string)
	*(*r).AccessKey = randString()
	(*r).Fields = new([]Users_Fields)
	l0 := randIntn(maxArrayLength + 1)
	*(*r).Fields = make([]Users_Fields, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomly_Users_Fields(&(*(*r).Fields)[i0])
	}
}

func TestVK_Photos_GetComments_Success(t *testing.T) {
	values := make(url.Values, 12)
	var req Photos_GetComments_Request
	fillRandomly_Photos_GetComments_Request(&req)
	require.NoError(t, req.fillIn(values))
	setString(values, "extended", "0")
	var expected Photos_GetComments_Response
	fillRandomly_Photos_GetComments_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "photos.getComments", values, expectedJSON), token)
	resp, apiErr, err := vk.Photos_GetComments(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Photos_GetComments_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "photos.getComments", expectedJSON), "")
	resp, apiErr, err := vk.Photos_GetComments(context.Background(), Photos_GetComments_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Photos_GetComments_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Photos_GetComments(context.Background(), Photos_GetComments_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func TestVK_Photos_GetCommentsExtended_Success(t *testing.T) {
	values := make(url.Values, 12)
	var req Photos_GetComments_Request
	fillRandomly_Photos_GetComments_Request(&req)
	require.NoError(t, req.fillIn(values))
	setString(values, "extended", "1")
	var expected Photos_GetCommentsExtended_Response
	fillRandomly_Photos_GetCommentsExtended_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "photos.getComments", values, expectedJSON), token)
	resp, apiErr, err := vk.Photos_GetCommentsExtended(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Photos_GetCommentsExtended_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "photos.getComments", expectedJSON), "")
	resp, apiErr, err := vk.Photos_GetCommentsExtended(context.Background(), Photos_GetComments_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Photos_GetCommentsExtended_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Photos_GetCommentsExtended(context.Background(), Photos_GetComments_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Photos_GetMarketAlbumUploadServer_Request(r *Photos_GetMarketAlbumUploadServer_Request) {
	(*r).GroupId = randInt()
}

func TestVK_Photos_GetMarketAlbumUploadServer_Success(t *testing.T) {
	values := make(url.Values, 3)
	var req Photos_GetMarketAlbumUploadServer_Request
	fillRandomly_Photos_GetMarketAlbumUploadServer_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Base_GetUploadServer_Response
	fillRandomly_Base_GetUploadServer_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "photos.getMarketAlbumUploadServer", values, expectedJSON), token)
	resp, apiErr, err := vk.Photos_GetMarketAlbumUploadServer(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Photos_GetMarketAlbumUploadServer_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "photos.getMarketAlbumUploadServer", expectedJSON), "")
	resp, apiErr, err := vk.Photos_GetMarketAlbumUploadServer(context.Background(), Photos_GetMarketAlbumUploadServer_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Photos_GetMarketAlbumUploadServer_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Photos_GetMarketAlbumUploadServer(context.Background(), Photos_GetMarketAlbumUploadServer_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Photos_GetMarketUploadServer_Request(r *Photos_GetMarketUploadServer_Request) {
	(*r).GroupId = randInt()
	(*r).MainPhoto = new(bool)
	*(*r).MainPhoto = randBool()
	(*r).CropX = new(int)
	*(*r).CropX = randInt()
	(*r).CropY = new(int)
	*(*r).CropY = randInt()
	(*r).CropWidth = new(int)
	*(*r).CropWidth = randInt()
}

func TestVK_Photos_GetMarketUploadServer_Success(t *testing.T) {
	values := make(url.Values, 7)
	var req Photos_GetMarketUploadServer_Request
	fillRandomly_Photos_GetMarketUploadServer_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Photos_GetMarketUploadServer_Response
	fillRandomly_Photos_GetMarketUploadServer_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "photos.getMarketUploadServer", values, expectedJSON), token)
	resp, apiErr, err := vk.Photos_GetMarketUploadServer(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Photos_GetMarketUploadServer_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "photos.getMarketUploadServer", expectedJSON), "")
	resp, apiErr, err := vk.Photos_GetMarketUploadServer(context.Background(), Photos_GetMarketUploadServer_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Photos_GetMarketUploadServer_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Photos_GetMarketUploadServer(context.Background(), Photos_GetMarketUploadServer_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Photos_GetMessagesUploadServer_Request(r *Photos_GetMessagesUploadServer_Request) {
	(*r).PeerId = new(int)
	*(*r).PeerId = randInt()
}

func TestVK_Photos_GetMessagesUploadServer_Success(t *testing.T) {
	values := make(url.Values, 3)
	var req Photos_GetMessagesUploadServer_Request
	fillRandomly_Photos_GetMessagesUploadServer_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Photos_GetMessagesUploadServer_Response
	fillRandomly_Photos_GetMessagesUploadServer_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "photos.getMessagesUploadServer", values, expectedJSON), token)
	resp, apiErr, err := vk.Photos_GetMessagesUploadServer(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Photos_GetMessagesUploadServer_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "photos.getMessagesUploadServer", expectedJSON), "")
	resp, apiErr, err := vk.Photos_GetMessagesUploadServer(context.Background(), Photos_GetMessagesUploadServer_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Photos_GetMessagesUploadServer_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Photos_GetMessagesUploadServer(context.Background(), Photos_GetMessagesUploadServer_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Photos_GetNewTags_Request(r *Photos_GetNewTags_Request) {
	(*r).Offset = new(int)
	*(*r).Offset = randInt()
	(*r).Count = new(int)
	*(*r).Count = randInt()
}

func TestVK_Photos_GetNewTags_Success(t *testing.T) {
	values := make(url.Values, 4)
	var req Photos_GetNewTags_Request
	fillRandomly_Photos_GetNewTags_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Photos_GetNewTags_Response
	fillRandomly_Photos_GetNewTags_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "photos.getNewTags", values, expectedJSON), token)
	resp, apiErr, err := vk.Photos_GetNewTags(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Photos_GetNewTags_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "photos.getNewTags", expectedJSON), "")
	resp, apiErr, err := vk.Photos_GetNewTags(context.Background(), Photos_GetNewTags_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Photos_GetNewTags_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Photos_GetNewTags(context.Background(), Photos_GetNewTags_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Photos_GetOwnerCoverPhotoUploadServer_Request(r *Photos_GetOwnerCoverPhotoUploadServer_Request) {
	(*r).GroupId = randInt()
	(*r).CropX = new(int)
	*(*r).CropX = randInt()
	(*r).CropY = new(int)
	*(*r).CropY = randInt()
	(*r).CropX2 = new(int)
	*(*r).CropX2 = randInt()
	(*r).CropY2 = new(int)
	*(*r).CropY2 = randInt()
}

func TestVK_Photos_GetOwnerCoverPhotoUploadServer_Success(t *testing.T) {
	values := make(url.Values, 7)
	var req Photos_GetOwnerCoverPhotoUploadServer_Request
	fillRandomly_Photos_GetOwnerCoverPhotoUploadServer_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Base_GetUploadServer_Response
	fillRandomly_Base_GetUploadServer_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "photos.getOwnerCoverPhotoUploadServer", values, expectedJSON), token)
	resp, apiErr, err := vk.Photos_GetOwnerCoverPhotoUploadServer(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Photos_GetOwnerCoverPhotoUploadServer_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "photos.getOwnerCoverPhotoUploadServer", expectedJSON), "")
	resp, apiErr, err := vk.Photos_GetOwnerCoverPhotoUploadServer(context.Background(), Photos_GetOwnerCoverPhotoUploadServer_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Photos_GetOwnerCoverPhotoUploadServer_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Photos_GetOwnerCoverPhotoUploadServer(context.Background(), Photos_GetOwnerCoverPhotoUploadServer_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Photos_GetOwnerPhotoUploadServer_Request(r *Photos_GetOwnerPhotoUploadServer_Request) {
	(*r).OwnerId = new(int)
	*(*r).OwnerId = randInt()
}

func TestVK_Photos_GetOwnerPhotoUploadServer_Success(t *testing.T) {
	values := make(url.Values, 3)
	var req Photos_GetOwnerPhotoUploadServer_Request
	fillRandomly_Photos_GetOwnerPhotoUploadServer_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Base_GetUploadServer_Response
	fillRandomly_Base_GetUploadServer_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "photos.getOwnerPhotoUploadServer", values, expectedJSON), token)
	resp, apiErr, err := vk.Photos_GetOwnerPhotoUploadServer(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Photos_GetOwnerPhotoUploadServer_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "photos.getOwnerPhotoUploadServer", expectedJSON), "")
	resp, apiErr, err := vk.Photos_GetOwnerPhotoUploadServer(context.Background(), Photos_GetOwnerPhotoUploadServer_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Photos_GetOwnerPhotoUploadServer_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Photos_GetOwnerPhotoUploadServer(context.Background(), Photos_GetOwnerPhotoUploadServer_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Photos_GetTags_Request(r *Photos_GetTags_Request) {
	(*r).OwnerId = new(int)
	*(*r).OwnerId = randInt()
	(*r).PhotoId = randInt()
	(*r).AccessKey = new(string)
	*(*r).AccessKey = randString()
}

func TestVK_Photos_GetTags_Success(t *testing.T) {
	values := make(url.Values, 5)
	var req Photos_GetTags_Request
	fillRandomly_Photos_GetTags_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Photos_GetTags_Response
	fillRandomly_Photos_GetTags_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "photos.getTags", values, expectedJSON), token)
	resp, apiErr, err := vk.Photos_GetTags(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Photos_GetTags_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "photos.getTags", expectedJSON), "")
	resp, apiErr, err := vk.Photos_GetTags(context.Background(), Photos_GetTags_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Photos_GetTags_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Photos_GetTags(context.Background(), Photos_GetTags_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Photos_GetUploadServer_Request(r *Photos_GetUploadServer_Request) {
	(*r).AlbumId = new(int)
	*(*r).AlbumId = randInt()
	(*r).GroupId = new(int)
	*(*r).GroupId = randInt()
}

func TestVK_Photos_GetUploadServer_Success(t *testing.T) {
	values := make(url.Values, 4)
	var req Photos_GetUploadServer_Request
	fillRandomly_Photos_GetUploadServer_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Photos_GetUploadServer_Response
	fillRandomly_Photos_GetUploadServer_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "photos.getUploadServer", values, expectedJSON), token)
	resp, apiErr, err := vk.Photos_GetUploadServer(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Photos_GetUploadServer_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "photos.getUploadServer", expectedJSON), "")
	resp, apiErr, err := vk.Photos_GetUploadServer(context.Background(), Photos_GetUploadServer_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Photos_GetUploadServer_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Photos_GetUploadServer(context.Background(), Photos_GetUploadServer_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Photos_GetUserPhotos_Request(r *Photos_GetUserPhotos_Request) {
	(*r).UserId = new(int)
	*(*r).UserId = randInt()
	(*r).Offset = new(int)
	*(*r).Offset = randInt()
	(*r).Count = new(int)
	*(*r).Count = randInt()
	(*r).Extended = new(bool)
	*(*r).Extended = randBool()
	(*r).Sort = new(string)
	*(*r).Sort = randString()
}

func TestVK_Photos_GetUserPhotos_Success(t *testing.T) {
	values := make(url.Values, 7)
	var req Photos_GetUserPhotos_Request
	fillRandomly_Photos_GetUserPhotos_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Photos_GetUserPhotos_Response
	fillRandomly_Photos_GetUserPhotos_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "photos.getUserPhotos", values, expectedJSON), token)
	resp, apiErr, err := vk.Photos_GetUserPhotos(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Photos_GetUserPhotos_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "photos.getUserPhotos", expectedJSON), "")
	resp, apiErr, err := vk.Photos_GetUserPhotos(context.Background(), Photos_GetUserPhotos_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Photos_GetUserPhotos_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Photos_GetUserPhotos(context.Background(), Photos_GetUserPhotos_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Photos_GetWallUploadServer_Request(r *Photos_GetWallUploadServer_Request) {
	(*r).GroupId = new(int)
	*(*r).GroupId = randInt()
}

func TestVK_Photos_GetWallUploadServer_Success(t *testing.T) {
	values := make(url.Values, 3)
	var req Photos_GetWallUploadServer_Request
	fillRandomly_Photos_GetWallUploadServer_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Photos_GetWallUploadServer_Response
	fillRandomly_Photos_GetWallUploadServer_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "photos.getWallUploadServer", values, expectedJSON), token)
	resp, apiErr, err := vk.Photos_GetWallUploadServer(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Photos_GetWallUploadServer_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "photos.getWallUploadServer", expectedJSON), "")
	resp, apiErr, err := vk.Photos_GetWallUploadServer(context.Background(), Photos_GetWallUploadServer_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Photos_GetWallUploadServer_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Photos_GetWallUploadServer(context.Background(), Photos_GetWallUploadServer_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Photos_MakeCover_Request(r *Photos_MakeCover_Request) {
	(*r).OwnerId = new(int)
	*(*r).OwnerId = randInt()
	(*r).PhotoId = randInt()
	(*r).AlbumId = new(int)
	*(*r).AlbumId = randInt()
}

func TestVK_Photos_MakeCover_Success(t *testing.T) {
	values := make(url.Values, 5)
	var req Photos_MakeCover_Request
	fillRandomly_Photos_MakeCover_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Base_Ok_Response
	fillRandomly_Base_Ok_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "photos.makeCover", values, expectedJSON), token)
	resp, apiErr, err := vk.Photos_MakeCover(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Photos_MakeCover_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "photos.makeCover", expectedJSON), "")
	resp, apiErr, err := vk.Photos_MakeCover(context.Background(), Photos_MakeCover_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Photos_MakeCover_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Photos_MakeCover(context.Background(), Photos_MakeCover_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Photos_Move_Request(r *Photos_Move_Request) {
	(*r).OwnerId = new(int)
	*(*r).OwnerId = randInt()
	(*r).TargetAlbumId = randInt()
	(*r).PhotoIds = randInt()
}

func TestVK_Photos_Move_Success(t *testing.T) {
	values := make(url.Values, 5)
	var req Photos_Move_Request
	fillRandomly_Photos_Move_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Base_Ok_Response
	fillRandomly_Base_Ok_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "photos.move", values, expectedJSON), token)
	resp, apiErr, err := vk.Photos_Move(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Photos_Move_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "photos.move", expectedJSON), "")
	resp, apiErr, err := vk.Photos_Move(context.Background(), Photos_Move_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Photos_Move_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Photos_Move(context.Background(), Photos_Move_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Photos_PutTag_Request(r *Photos_PutTag_Request) {
	(*r).OwnerId = new(int)
	*(*r).OwnerId = randInt()
	(*r).PhotoId = randInt()
	(*r).UserId = randInt()
	(*r).X = new(float64)
	*(*r).X = randFloat()
	(*r).Y = new(float64)
	*(*r).Y = randFloat()
	(*r).X2 = new(float64)
	*(*r).X2 = randFloat()
	(*r).Y2 = new(float64)
	*(*r).Y2 = randFloat()
}

func TestVK_Photos_PutTag_Success(t *testing.T) {
	values := make(url.Values, 9)
	var req Photos_PutTag_Request
	fillRandomly_Photos_PutTag_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Photos_PutTag_Response
	fillRandomly_Photos_PutTag_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "photos.putTag", values, expectedJSON), token)
	resp, apiErr, err := vk.Photos_PutTag(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Photos_PutTag_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "photos.putTag", expectedJSON), "")
	resp, apiErr, err := vk.Photos_PutTag(context.Background(), Photos_PutTag_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Photos_PutTag_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Photos_PutTag(context.Background(), Photos_PutTag_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Photos_RemoveTag_Request(r *Photos_RemoveTag_Request) {
	(*r).OwnerId = new(int)
	*(*r).OwnerId = randInt()
	(*r).PhotoId = randInt()
	(*r).TagId = randInt()
}

func TestVK_Photos_RemoveTag_Success(t *testing.T) {
	values := make(url.Values, 5)
	var req Photos_RemoveTag_Request
	fillRandomly_Photos_RemoveTag_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Base_Ok_Response
	fillRandomly_Base_Ok_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "photos.removeTag", values, expectedJSON), token)
	resp, apiErr, err := vk.Photos_RemoveTag(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Photos_RemoveTag_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "photos.removeTag", expectedJSON), "")
	resp, apiErr, err := vk.Photos_RemoveTag(context.Background(), Photos_RemoveTag_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Photos_RemoveTag_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Photos_RemoveTag(context.Background(), Photos_RemoveTag_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Photos_ReorderAlbums_Request(r *Photos_ReorderAlbums_Request) {
	(*r).OwnerId = new(int)
	*(*r).OwnerId = randInt()
	(*r).AlbumId = randInt()
	(*r).Before = new(int)
	*(*r).Before = randInt()
	(*r).After = new(int)
	*(*r).After = randInt()
}

func TestVK_Photos_ReorderAlbums_Success(t *testing.T) {
	values := make(url.Values, 6)
	var req Photos_ReorderAlbums_Request
	fillRandomly_Photos_ReorderAlbums_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Base_Ok_Response
	fillRandomly_Base_Ok_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "photos.reorderAlbums", values, expectedJSON), token)
	resp, apiErr, err := vk.Photos_ReorderAlbums(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Photos_ReorderAlbums_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "photos.reorderAlbums", expectedJSON), "")
	resp, apiErr, err := vk.Photos_ReorderAlbums(context.Background(), Photos_ReorderAlbums_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Photos_ReorderAlbums_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Photos_ReorderAlbums(context.Background(), Photos_ReorderAlbums_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Photos_ReorderPhotos_Request(r *Photos_ReorderPhotos_Request) {
	(*r).OwnerId = new(int)
	*(*r).OwnerId = randInt()
	(*r).PhotoId = randInt()
	(*r).Before = new(int)
	*(*r).Before = randInt()
	(*r).After = new(int)
	*(*r).After = randInt()
}

func TestVK_Photos_ReorderPhotos_Success(t *testing.T) {
	values := make(url.Values, 6)
	var req Photos_ReorderPhotos_Request
	fillRandomly_Photos_ReorderPhotos_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Base_Ok_Response
	fillRandomly_Base_Ok_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "photos.reorderPhotos", values, expectedJSON), token)
	resp, apiErr, err := vk.Photos_ReorderPhotos(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Photos_ReorderPhotos_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "photos.reorderPhotos", expectedJSON), "")
	resp, apiErr, err := vk.Photos_ReorderPhotos(context.Background(), Photos_ReorderPhotos_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Photos_ReorderPhotos_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Photos_ReorderPhotos(context.Background(), Photos_ReorderPhotos_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Photos_Report_Reason(o *Photos_Report_Reason) {
	switch randIntn(7) {
	case 0:
		*o = 0
	case 1:
		*o = 1
	case 2:
		*o = 2
	case 3:
		*o = 3
	case 4:
		*o = 4
	case 5:
		*o = 5
	case 6:
		*o = 6
	}
}

func fillRandomly_Photos_Report_Request(r *Photos_Report_Request) {
	(*r).OwnerId = randInt()
	(*r).PhotoId = randInt()
	(*r).Reason = new(Photos_Report_Reason)
	fillRandomly_Photos_Report_Reason((*r).Reason)
}

func TestVK_Photos_Report_Success(t *testing.T) {
	values := make(url.Values, 5)
	var req Photos_Report_Request
	fillRandomly_Photos_Report_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Base_Ok_Response
	fillRandomly_Base_Ok_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "photos.report", values, expectedJSON), token)
	resp, apiErr, err := vk.Photos_Report(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Photos_Report_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "photos.report", expectedJSON), "")
	resp, apiErr, err := vk.Photos_Report(context.Background(), Photos_Report_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Photos_Report_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Photos_Report(context.Background(), Photos_Report_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Photos_ReportComment_Reason(o *Photos_ReportComment_Reason) {
	switch randIntn(7) {
	case 0:
		*o = 0
	case 1:
		*o = 1
	case 2:
		*o = 2
	case 3:
		*o = 3
	case 4:
		*o = 4
	case 5:
		*o = 5
	case 6:
		*o = 6
	}
}

func fillRandomly_Photos_ReportComment_Request(r *Photos_ReportComment_Request) {
	(*r).OwnerId = randInt()
	(*r).CommentId = randInt()
	(*r).Reason = new(Photos_ReportComment_Reason)
	fillRandomly_Photos_ReportComment_Reason((*r).Reason)
}

func TestVK_Photos_ReportComment_Success(t *testing.T) {
	values := make(url.Values, 5)
	var req Photos_ReportComment_Request
	fillRandomly_Photos_ReportComment_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Base_Ok_Response
	fillRandomly_Base_Ok_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "photos.reportComment", values, expectedJSON), token)
	resp, apiErr, err := vk.Photos_ReportComment(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Photos_ReportComment_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "photos.reportComment", expectedJSON), "")
	resp, apiErr, err := vk.Photos_ReportComment(context.Background(), Photos_ReportComment_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Photos_ReportComment_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Photos_ReportComment(context.Background(), Photos_ReportComment_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Photos_Restore_Request(r *Photos_Restore_Request) {
	(*r).OwnerId = new(int)
	*(*r).OwnerId = randInt()
	(*r).PhotoId = randInt()
}

func TestVK_Photos_Restore_Success(t *testing.T) {
	values := make(url.Values, 4)
	var req Photos_Restore_Request
	fillRandomly_Photos_Restore_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Base_Ok_Response
	fillRandomly_Base_Ok_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "photos.restore", values, expectedJSON), token)
	resp, apiErr, err := vk.Photos_Restore(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Photos_Restore_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "photos.restore", expectedJSON), "")
	resp, apiErr, err := vk.Photos_Restore(context.Background(), Photos_Restore_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Photos_Restore_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Photos_Restore(context.Background(), Photos_Restore_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Photos_RestoreComment_Request(r *Photos_RestoreComment_Request) {
	(*r).OwnerId = new(int)
	*(*r).OwnerId = randInt()
	(*r).CommentId = randInt()
}

func TestVK_Photos_RestoreComment_Success(t *testing.T) {
	values := make(url.Values, 4)
	var req Photos_RestoreComment_Request
	fillRandomly_Photos_RestoreComment_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Photos_RestoreComment_Response
	fillRandomly_Photos_RestoreComment_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "photos.restoreComment", values, expectedJSON), token)
	resp, apiErr, err := vk.Photos_RestoreComment(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Photos_RestoreComment_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "photos.restoreComment", expectedJSON), "")
	resp, apiErr, err := vk.Photos_RestoreComment(context.Background(), Photos_RestoreComment_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Photos_RestoreComment_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Photos_RestoreComment(context.Background(), Photos_RestoreComment_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Photos_Save_Request(r *Photos_Save_Request) {
	(*r).AlbumId = new(int)
	*(*r).AlbumId = randInt()
	(*r).GroupId = new(int)
	*(*r).GroupId = randInt()
	(*r).Server = new(int)
	*(*r).Server = randInt()
	(*r).PhotosList = new(string)
	*(*r).PhotosList = randString()
	(*r).Hash = new(string)
	*(*r).Hash = randString()
	(*r).Latitude = new(float64)
	*(*r).Latitude = randFloat()
	(*r).Longitude = new(float64)
	*(*r).Longitude = randFloat()
	(*r).Caption = new(string)
	*(*r).Caption = randString()
}

func TestVK_Photos_Save_Success(t *testing.T) {
	values := make(url.Values, 10)
	var req Photos_Save_Request
	fillRandomly_Photos_Save_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Photos_Save_Response
	fillRandomly_Photos_Save_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "photos.save", values, expectedJSON), token)
	resp, apiErr, err := vk.Photos_Save(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Photos_Save_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "photos.save", expectedJSON), "")
	resp, apiErr, err := vk.Photos_Save(context.Background(), Photos_Save_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Photos_Save_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Photos_Save(context.Background(), Photos_Save_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Photos_SaveMarketAlbumPhoto_Request(r *Photos_SaveMarketAlbumPhoto_Request) {
	(*r).GroupId = randInt()
	(*r).Photo = randString()
	(*r).Server = randInt()
	(*r).Hash = randString()
}

func TestVK_Photos_SaveMarketAlbumPhoto_Success(t *testing.T) {
	values := make(url.Values, 6)
	var req Photos_SaveMarketAlbumPhoto_Request
	fillRandomly_Photos_SaveMarketAlbumPhoto_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Photos_SaveMarketAlbumPhoto_Response
	fillRandomly_Photos_SaveMarketAlbumPhoto_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "photos.saveMarketAlbumPhoto", values, expectedJSON), token)
	resp, apiErr, err := vk.Photos_SaveMarketAlbumPhoto(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Photos_SaveMarketAlbumPhoto_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "photos.saveMarketAlbumPhoto", expectedJSON), "")
	resp, apiErr, err := vk.Photos_SaveMarketAlbumPhoto(context.Background(), Photos_SaveMarketAlbumPhoto_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Photos_SaveMarketAlbumPhoto_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Photos_SaveMarketAlbumPhoto(context.Background(), Photos_SaveMarketAlbumPhoto_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Photos_SaveMarketPhoto_Request(r *Photos_SaveMarketPhoto_Request) {
	(*r).GroupId = new(int)
	*(*r).GroupId = randInt()
	(*r).Photo = randString()
	(*r).Server = randInt()
	(*r).Hash = randString()
	(*r).CropData = new(string)
	*(*r).CropData = randString()
	(*r).CropHash = new(string)
	*(*r).CropHash = randString()
}

func TestVK_Photos_SaveMarketPhoto_Success(t *testing.T) {
	values := make(url.Values, 8)
	var req Photos_SaveMarketPhoto_Request
	fillRandomly_Photos_SaveMarketPhoto_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Photos_SaveMarketPhoto_Response
	fillRandomly_Photos_SaveMarketPhoto_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "photos.saveMarketPhoto", values, expectedJSON), token)
	resp, apiErr, err := vk.Photos_SaveMarketPhoto(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Photos_SaveMarketPhoto_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "photos.saveMarketPhoto", expectedJSON), "")
	resp, apiErr, err := vk.Photos_SaveMarketPhoto(context.Background(), Photos_SaveMarketPhoto_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Photos_SaveMarketPhoto_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Photos_SaveMarketPhoto(context.Background(), Photos_SaveMarketPhoto_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Photos_SaveMessagesPhoto_Request(r *Photos_SaveMessagesPhoto_Request) {
	(*r).Photo = randString()
	(*r).Server = new(int)
	*(*r).Server = randInt()
	(*r).Hash = new(string)
	*(*r).Hash = randString()
}

func TestVK_Photos_SaveMessagesPhoto_Success(t *testing.T) {
	values := make(url.Values, 5)
	var req Photos_SaveMessagesPhoto_Request
	fillRandomly_Photos_SaveMessagesPhoto_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Photos_SaveMessagesPhoto_Response
	fillRandomly_Photos_SaveMessagesPhoto_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "photos.saveMessagesPhoto", values, expectedJSON), token)
	resp, apiErr, err := vk.Photos_SaveMessagesPhoto(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Photos_SaveMessagesPhoto_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "photos.saveMessagesPhoto", expectedJSON), "")
	resp, apiErr, err := vk.Photos_SaveMessagesPhoto(context.Background(), Photos_SaveMessagesPhoto_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Photos_SaveMessagesPhoto_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Photos_SaveMessagesPhoto(context.Background(), Photos_SaveMessagesPhoto_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Photos_SaveOwnerCoverPhoto_Request(r *Photos_SaveOwnerCoverPhoto_Request) {
	(*r).Hash = randString()
	(*r).Photo = randString()
}

func TestVK_Photos_SaveOwnerCoverPhoto_Success(t *testing.T) {
	values := make(url.Values, 4)
	var req Photos_SaveOwnerCoverPhoto_Request
	fillRandomly_Photos_SaveOwnerCoverPhoto_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Photos_SaveOwnerCoverPhoto_Response
	fillRandomly_Photos_SaveOwnerCoverPhoto_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "photos.saveOwnerCoverPhoto", values, expectedJSON), token)
	resp, apiErr, err := vk.Photos_SaveOwnerCoverPhoto(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Photos_SaveOwnerCoverPhoto_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "photos.saveOwnerCoverPhoto", expectedJSON), "")
	resp, apiErr, err := vk.Photos_SaveOwnerCoverPhoto(context.Background(), Photos_SaveOwnerCoverPhoto_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Photos_SaveOwnerCoverPhoto_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Photos_SaveOwnerCoverPhoto(context.Background(), Photos_SaveOwnerCoverPhoto_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Photos_SaveOwnerPhoto_Request(r *Photos_SaveOwnerPhoto_Request) {
	(*r).Server = new(string)
	*(*r).Server = randString()
	(*r).Hash = new(string)
	*(*r).Hash = randString()
	(*r).Photo = new(string)
	*(*r).Photo = randString()
}

func TestVK_Photos_SaveOwnerPhoto_Success(t *testing.T) {
	values := make(url.Values, 5)
	var req Photos_SaveOwnerPhoto_Request
	fillRandomly_Photos_SaveOwnerPhoto_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Photos_SaveOwnerPhoto_Response
	fillRandomly_Photos_SaveOwnerPhoto_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "photos.saveOwnerPhoto", values, expectedJSON), token)
	resp, apiErr, err := vk.Photos_SaveOwnerPhoto(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Photos_SaveOwnerPhoto_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "photos.saveOwnerPhoto", expectedJSON), "")
	resp, apiErr, err := vk.Photos_SaveOwnerPhoto(context.Background(), Photos_SaveOwnerPhoto_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Photos_SaveOwnerPhoto_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Photos_SaveOwnerPhoto(context.Background(), Photos_SaveOwnerPhoto_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Photos_SaveWallPhoto_Request(r *Photos_SaveWallPhoto_Request) {
	(*r).UserId = new(int)
	*(*r).UserId = randInt()
	(*r).GroupId = new(int)
	*(*r).GroupId = randInt()
	(*r).Photo = randString()
	(*r).Server = new(int)
	*(*r).Server = randInt()
	(*r).Hash = new(string)
	*(*r).Hash = randString()
	(*r).Latitude = new(float64)
	*(*r).Latitude = randFloat()
	(*r).Longitude = new(float64)
	*(*r).Longitude = randFloat()
	(*r).Caption = new(string)
	*(*r).Caption = randString()
}

func TestVK_Photos_SaveWallPhoto_Success(t *testing.T) {
	values := make(url.Values, 10)
	var req Photos_SaveWallPhoto_Request
	fillRandomly_Photos_SaveWallPhoto_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Photos_SaveWallPhoto_Response
	fillRandomly_Photos_SaveWallPhoto_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "photos.saveWallPhoto", values, expectedJSON), token)
	resp, apiErr, err := vk.Photos_SaveWallPhoto(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Photos_SaveWallPhoto_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "photos.saveWallPhoto", expectedJSON), "")
	resp, apiErr, err := vk.Photos_SaveWallPhoto(context.Background(), Photos_SaveWallPhoto_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Photos_SaveWallPhoto_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Photos_SaveWallPhoto(context.Background(), Photos_SaveWallPhoto_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Photos_Search_Request(r *Photos_Search_Request) {
	(*r).Q = new(string)
	*(*r).Q = randString()
	(*r).Lat = new(float64)
	*(*r).Lat = randFloat()
	(*r).Long = new(float64)
	*(*r).Long = randFloat()
	(*r).StartTime = new(int)
	*(*r).StartTime = randInt()
	(*r).EndTime = new(int)
	*(*r).EndTime = randInt()
	(*r).Sort = new(int)
	*(*r).Sort = randInt()
	(*r).Offset = new(int)
	*(*r).Offset = randInt()
	(*r).Count = new(int)
	*(*r).Count = randInt()
	(*r).Radius = new(int)
	*(*r).Radius = randInt()
}

func TestVK_Photos_Search_Success(t *testing.T) {
	values := make(url.Values, 11)
	var req Photos_Search_Request
	fillRandomly_Photos_Search_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Photos_Search_Response
	fillRandomly_Photos_Search_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "photos.search", values, expectedJSON), token)
	resp, apiErr, err := vk.Photos_Search(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Photos_Search_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "photos.search", expectedJSON), "")
	resp, apiErr, err := vk.Photos_Search(context.Background(), Photos_Search_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Photos_Search_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Photos_Search(context.Background(), Photos_Search_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Podcasts_SearchPodcast_Request(r *Podcasts_SearchPodcast_Request) {
	(*r).SearchString = randString()
	(*r).Offset = new(int)
	*(*r).Offset = randInt()
	(*r).Count = new(int)
	*(*r).Count = randInt()
}

func TestVK_Podcasts_SearchPodcast_Success(t *testing.T) {
	values := make(url.Values, 5)
	var req Podcasts_SearchPodcast_Request
	fillRandomly_Podcasts_SearchPodcast_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Podcasts_SearchPodcast_Response
	fillRandomly_Podcasts_SearchPodcast_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "podcasts.searchPodcast", values, expectedJSON), token)
	resp, apiErr, err := vk.Podcasts_SearchPodcast(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Podcasts_SearchPodcast_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "podcasts.searchPodcast", expectedJSON), "")
	resp, apiErr, err := vk.Podcasts_SearchPodcast(context.Background(), Podcasts_SearchPodcast_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Podcasts_SearchPodcast_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Podcasts_SearchPodcast(context.Background(), Podcasts_SearchPodcast_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Polls_AddVote_Request(r *Polls_AddVote_Request) {
	(*r).OwnerId = new(int)
	*(*r).OwnerId = randInt()
	(*r).PollId = randInt()
	(*r).AnswerIds = new([]int)
	l0 := randIntn(maxArrayLength + 1)
	*(*r).AnswerIds = make([]int, l0)
	for i0 := 0; i0 < l0; i0++ {
		(*(*r).AnswerIds)[i0] = randInt()
	}
	(*r).IsBoard = new(bool)
	*(*r).IsBoard = randBool()
}

func TestVK_Polls_AddVote_Success(t *testing.T) {
	values := make(url.Values, 6)
	var req Polls_AddVote_Request
	fillRandomly_Polls_AddVote_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Polls_AddVote_Response
	fillRandomly_Polls_AddVote_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "polls.addVote", values, expectedJSON), token)
	resp, apiErr, err := vk.Polls_AddVote(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Polls_AddVote_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "polls.addVote", expectedJSON), "")
	resp, apiErr, err := vk.Polls_AddVote(context.Background(), Polls_AddVote_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Polls_AddVote_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Polls_AddVote(context.Background(), Polls_AddVote_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Polls_Create_BackgroundId(o *Polls_Create_BackgroundId) {
	switch randIntn(7) {
	case 0:
		*o = 1
	case 1:
		*o = 2
	case 2:
		*o = 3
	case 3:
		*o = 4
	case 4:
		*o = 6
	case 5:
		*o = 8
	case 6:
		*o = 9
	}
}

func fillRandomly_Polls_Create_Request(r *Polls_Create_Request) {
	(*r).Question = new(string)
	*(*r).Question = randString()
	(*r).IsAnonymous = new(bool)
	*(*r).IsAnonymous = randBool()
	(*r).IsMultiple = new(bool)
	*(*r).IsMultiple = randBool()
	(*r).EndDate = new(int)
	*(*r).EndDate = randInt()
	(*r).OwnerId = new(int)
	*(*r).OwnerId = randInt()
	(*r).AppId = new(int)
	*(*r).AppId = randInt()
	(*r).AddAnswers = new(string)
	*(*r).AddAnswers = randString()
	(*r).PhotoId = new(int)
	*(*r).PhotoId = randInt()
	(*r).BackgroundId = new(Polls_Create_BackgroundId)
	fillRandomly_Polls_Create_BackgroundId((*r).BackgroundId)
	(*r).DisableUnvote = new(bool)
	*(*r).DisableUnvote = randBool()
}

func TestVK_Polls_Create_Success(t *testing.T) {
	values := make(url.Values, 12)
	var req Polls_Create_Request
	fillRandomly_Polls_Create_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Polls_Create_Response
	fillRandomly_Polls_Create_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "polls.create", values, expectedJSON), token)
	resp, apiErr, err := vk.Polls_Create(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Polls_Create_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "polls.create", expectedJSON), "")
	resp, apiErr, err := vk.Polls_Create(context.Background(), Polls_Create_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Polls_Create_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Polls_Create(context.Background(), Polls_Create_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Polls_DeleteVote_Request(r *Polls_DeleteVote_Request) {
	(*r).OwnerId = new(int)
	*(*r).OwnerId = randInt()
	(*r).PollId = randInt()
	(*r).AnswerId = randInt()
	(*r).IsBoard = new(bool)
	*(*r).IsBoard = randBool()
}

func TestVK_Polls_DeleteVote_Success(t *testing.T) {
	values := make(url.Values, 6)
	var req Polls_DeleteVote_Request
	fillRandomly_Polls_DeleteVote_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Polls_DeleteVote_Response
	fillRandomly_Polls_DeleteVote_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "polls.deleteVote", values, expectedJSON), token)
	resp, apiErr, err := vk.Polls_DeleteVote(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Polls_DeleteVote_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "polls.deleteVote", expectedJSON), "")
	resp, apiErr, err := vk.Polls_DeleteVote(context.Background(), Polls_DeleteVote_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Polls_DeleteVote_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Polls_DeleteVote(context.Background(), Polls_DeleteVote_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Polls_Edit_BackgroundId(o *Polls_Edit_BackgroundId) {
	switch randIntn(8) {
	case 0:
		*o = 0
	case 1:
		*o = 1
	case 2:
		*o = 2
	case 3:
		*o = 3
	case 4:
		*o = 4
	case 5:
		*o = 6
	case 6:
		*o = 8
	case 7:
		*o = 9
	}
}

func fillRandomly_Polls_Edit_Request(r *Polls_Edit_Request) {
	(*r).OwnerId = new(int)
	*(*r).OwnerId = randInt()
	(*r).PollId = randInt()
	(*r).Question = new(string)
	*(*r).Question = randString()
	(*r).AddAnswers = new(string)
	*(*r).AddAnswers = randString()
	(*r).EditAnswers = new(string)
	*(*r).EditAnswers = randString()
	(*r).DeleteAnswers = new(string)
	*(*r).DeleteAnswers = randString()
	(*r).EndDate = new(int)
	*(*r).EndDate = randInt()
	(*r).PhotoId = new(int)
	*(*r).PhotoId = randInt()
	(*r).BackgroundId = new(Polls_Edit_BackgroundId)
	fillRandomly_Polls_Edit_BackgroundId((*r).BackgroundId)
}

func TestVK_Polls_Edit_Success(t *testing.T) {
	values := make(url.Values, 11)
	var req Polls_Edit_Request
	fillRandomly_Polls_Edit_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Base_Ok_Response
	fillRandomly_Base_Ok_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "polls.edit", values, expectedJSON), token)
	resp, apiErr, err := vk.Polls_Edit(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Polls_Edit_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "polls.edit", expectedJSON), "")
	resp, apiErr, err := vk.Polls_Edit(context.Background(), Polls_Edit_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Polls_Edit_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Polls_Edit(context.Background(), Polls_Edit_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func TestVK_Polls_GetBackgrounds_Success(t *testing.T) {
	values := make(url.Values, 2)
	var expected Polls_GetBackgrounds_Response
	fillRandomly_Polls_GetBackgrounds_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "polls.getBackgrounds", values, expectedJSON), token)
	resp, apiErr, err := vk.Polls_GetBackgrounds(context.Background())
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Polls_GetBackgrounds_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "polls.getBackgrounds", expectedJSON), "")
	resp, apiErr, err := vk.Polls_GetBackgrounds(context.Background())
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Polls_GetBackgrounds_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Polls_GetBackgrounds(context.Background())
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Polls_GetById_NameCase(o *Polls_GetById_NameCase) {
	switch randIntn(6) {
	case 0:
		*o = "abl"
	case 1:
		*o = "acc"
	case 2:
		*o = "dat"
	case 3:
		*o = "gen"
	case 4:
		*o = "ins"
	case 5:
		*o = "nom"
	}
}

func fillRandomly_Polls_GetById_Request(r *Polls_GetById_Request) {
	(*r).OwnerId = new(int)
	*(*r).OwnerId = randInt()
	(*r).IsBoard = new(bool)
	*(*r).IsBoard = randBool()
	(*r).PollId = randInt()
	(*r).Extended = new(bool)
	*(*r).Extended = randBool()
	(*r).FriendsCount = new(int)
	*(*r).FriendsCount = randInt()
	(*r).Fields = new([]string)
	l0 := randIntn(maxArrayLength + 1)
	*(*r).Fields = make([]string, l0)
	for i0 := 0; i0 < l0; i0++ {
		(*(*r).Fields)[i0] = randString()
	}
	(*r).NameCase = new(Polls_GetById_NameCase)
	fillRandomly_Polls_GetById_NameCase((*r).NameCase)
}

func TestVK_Polls_GetById_Success(t *testing.T) {
	values := make(url.Values, 9)
	var req Polls_GetById_Request
	fillRandomly_Polls_GetById_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Polls_GetById_Response
	fillRandomly_Polls_GetById_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "polls.getById", values, expectedJSON), token)
	resp, apiErr, err := vk.Polls_GetById(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Polls_GetById_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "polls.getById", expectedJSON), "")
	resp, apiErr, err := vk.Polls_GetById(context.Background(), Polls_GetById_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Polls_GetById_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Polls_GetById(context.Background(), Polls_GetById_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Polls_GetPhotoUploadServer_Request(r *Polls_GetPhotoUploadServer_Request) {
	(*r).OwnerId = new(int)
	*(*r).OwnerId = randInt()
}

func TestVK_Polls_GetPhotoUploadServer_Success(t *testing.T) {
	values := make(url.Values, 3)
	var req Polls_GetPhotoUploadServer_Request
	fillRandomly_Polls_GetPhotoUploadServer_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Base_GetUploadServer_Response
	fillRandomly_Base_GetUploadServer_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "polls.getPhotoUploadServer", values, expectedJSON), token)
	resp, apiErr, err := vk.Polls_GetPhotoUploadServer(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Polls_GetPhotoUploadServer_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "polls.getPhotoUploadServer", expectedJSON), "")
	resp, apiErr, err := vk.Polls_GetPhotoUploadServer(context.Background(), Polls_GetPhotoUploadServer_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Polls_GetPhotoUploadServer_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Polls_GetPhotoUploadServer(context.Background(), Polls_GetPhotoUploadServer_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Polls_GetVoters_NameCase(o *Polls_GetVoters_NameCase) {
	switch randIntn(6) {
	case 0:
		*o = "nom"
	case 1:
		*o = "gen"
	case 2:
		*o = "dat"
	case 3:
		*o = "acc"
	case 4:
		*o = "ins"
	case 5:
		*o = "abl"
	}
}

func fillRandomly_Polls_GetVoters_Request(r *Polls_GetVoters_Request) {
	(*r).OwnerId = new(int)
	*(*r).OwnerId = randInt()
	(*r).PollId = randInt()
	(*r).AnswerIds = new([]int)
	l0 := randIntn(maxArrayLength + 1)
	*(*r).AnswerIds = make([]int, l0)
	for i0 := 0; i0 < l0; i0++ {
		(*(*r).AnswerIds)[i0] = randInt()
	}
	(*r).IsBoard = new(bool)
	*(*r).IsBoard = randBool()
	(*r).FriendsOnly = new(bool)
	*(*r).FriendsOnly = randBool()
	(*r).Offset = new(int)
	*(*r).Offset = randInt()
	(*r).Count = new(int)
	*(*r).Count = randInt()
	(*r).Fields = new([]Users_Fields)
	l0 = randIntn(maxArrayLength + 1)
	*(*r).Fields = make([]Users_Fields, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomly_Users_Fields(&(*(*r).Fields)[i0])
	}
	(*r).NameCase = new(Polls_GetVoters_NameCase)
	fillRandomly_Polls_GetVoters_NameCase((*r).NameCase)
}

func TestVK_Polls_GetVoters_Success(t *testing.T) {
	values := make(url.Values, 11)
	var req Polls_GetVoters_Request
	fillRandomly_Polls_GetVoters_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Polls_GetVoters_Response
	fillRandomly_Polls_GetVoters_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "polls.getVoters", values, expectedJSON), token)
	resp, apiErr, err := vk.Polls_GetVoters(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Polls_GetVoters_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "polls.getVoters", expectedJSON), "")
	resp, apiErr, err := vk.Polls_GetVoters(context.Background(), Polls_GetVoters_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Polls_GetVoters_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Polls_GetVoters(context.Background(), Polls_GetVoters_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Polls_SavePhoto_Request(r *Polls_SavePhoto_Request) {
	(*r).Photo = randString()
	(*r).Hash = randString()
}

func TestVK_Polls_SavePhoto_Success(t *testing.T) {
	values := make(url.Values, 4)
	var req Polls_SavePhoto_Request
	fillRandomly_Polls_SavePhoto_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Polls_SavePhoto_Response
	fillRandomly_Polls_SavePhoto_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "polls.savePhoto", values, expectedJSON), token)
	resp, apiErr, err := vk.Polls_SavePhoto(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Polls_SavePhoto_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "polls.savePhoto", expectedJSON), "")
	resp, apiErr, err := vk.Polls_SavePhoto(context.Background(), Polls_SavePhoto_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Polls_SavePhoto_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Polls_SavePhoto(context.Background(), Polls_SavePhoto_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_PrettyCards_Create_Request(r *PrettyCards_Create_Request) {
	(*r).OwnerId = randInt()
	(*r).Photo = randString()
	(*r).Title = randString()
	(*r).Link = randString()
	(*r).Price = new(string)
	*(*r).Price = randString()
	(*r).PriceOld = new(string)
	*(*r).PriceOld = randString()
	(*r).Button = new(string)
	*(*r).Button = randString()
}

func TestVK_PrettyCards_Create_Success(t *testing.T) {
	values := make(url.Values, 9)
	var req PrettyCards_Create_Request
	fillRandomly_PrettyCards_Create_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected PrettyCards_Create_Response
	fillRandomly_PrettyCards_Create_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "prettyCards.create", values, expectedJSON), token)
	resp, apiErr, err := vk.PrettyCards_Create(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_PrettyCards_Create_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "prettyCards.create", expectedJSON), "")
	resp, apiErr, err := vk.PrettyCards_Create(context.Background(), PrettyCards_Create_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_PrettyCards_Create_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.PrettyCards_Create(context.Background(), PrettyCards_Create_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_PrettyCards_Delete_Request(r *PrettyCards_Delete_Request) {
	(*r).OwnerId = randInt()
	(*r).CardId = randInt()
}

func TestVK_PrettyCards_Delete_Success(t *testing.T) {
	values := make(url.Values, 4)
	var req PrettyCards_Delete_Request
	fillRandomly_PrettyCards_Delete_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected PrettyCards_Delete_Response
	fillRandomly_PrettyCards_Delete_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "prettyCards.delete", values, expectedJSON), token)
	resp, apiErr, err := vk.PrettyCards_Delete(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_PrettyCards_Delete_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "prettyCards.delete", expectedJSON), "")
	resp, apiErr, err := vk.PrettyCards_Delete(context.Background(), PrettyCards_Delete_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_PrettyCards_Delete_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.PrettyCards_Delete(context.Background(), PrettyCards_Delete_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_PrettyCards_Edit_Request(r *PrettyCards_Edit_Request) {
	(*r).OwnerId = randInt()
	(*r).CardId = randInt()
	(*r).Photo = new(string)
	*(*r).Photo = randString()
	(*r).Title = new(string)
	*(*r).Title = randString()
	(*r).Link = new(string)
	*(*r).Link = randString()
	(*r).Price = new(string)
	*(*r).Price = randString()
	(*r).PriceOld = new(string)
	*(*r).PriceOld = randString()
	(*r).Button = new(string)
	*(*r).Button = randString()
}

func TestVK_PrettyCards_Edit_Success(t *testing.T) {
	values := make(url.Values, 10)
	var req PrettyCards_Edit_Request
	fillRandomly_PrettyCards_Edit_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected PrettyCards_Edit_Response
	fillRandomly_PrettyCards_Edit_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "prettyCards.edit", values, expectedJSON), token)
	resp, apiErr, err := vk.PrettyCards_Edit(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_PrettyCards_Edit_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "prettyCards.edit", expectedJSON), "")
	resp, apiErr, err := vk.PrettyCards_Edit(context.Background(), PrettyCards_Edit_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_PrettyCards_Edit_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.PrettyCards_Edit(context.Background(), PrettyCards_Edit_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_PrettyCards_Get_Request(r *PrettyCards_Get_Request) {
	(*r).OwnerId = randInt()
	(*r).Offset = new(int)
	*(*r).Offset = randInt()
	(*r).Count = new(int)
	*(*r).Count = randInt()
}

func TestVK_PrettyCards_Get_Success(t *testing.T) {
	values := make(url.Values, 5)
	var req PrettyCards_Get_Request
	fillRandomly_PrettyCards_Get_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected PrettyCards_Get_Response
	fillRandomly_PrettyCards_Get_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "prettyCards.get", values, expectedJSON), token)
	resp, apiErr, err := vk.PrettyCards_Get(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_PrettyCards_Get_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "prettyCards.get", expectedJSON), "")
	resp, apiErr, err := vk.PrettyCards_Get(context.Background(), PrettyCards_Get_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_PrettyCards_Get_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.PrettyCards_Get(context.Background(), PrettyCards_Get_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_PrettyCards_GetById_Request(r *PrettyCards_GetById_Request) {
	(*r).OwnerId = randInt()
	(*r).CardIds = new([]int)
	l0 := randIntn(maxArrayLength + 1)
	*(*r).CardIds = make([]int, l0)
	for i0 := 0; i0 < l0; i0++ {
		(*(*r).CardIds)[i0] = randInt()
	}
}

func TestVK_PrettyCards_GetById_Success(t *testing.T) {
	values := make(url.Values, 4)
	var req PrettyCards_GetById_Request
	fillRandomly_PrettyCards_GetById_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected PrettyCards_GetById_Response
	fillRandomly_PrettyCards_GetById_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "prettyCards.getById", values, expectedJSON), token)
	resp, apiErr, err := vk.PrettyCards_GetById(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_PrettyCards_GetById_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "prettyCards.getById", expectedJSON), "")
	resp, apiErr, err := vk.PrettyCards_GetById(context.Background(), PrettyCards_GetById_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_PrettyCards_GetById_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.PrettyCards_GetById(context.Background(), PrettyCards_GetById_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func TestVK_PrettyCards_GetUploadURL_Success(t *testing.T) {
	values := make(url.Values, 2)
	var expected PrettyCards_GetUploadURL_Response
	fillRandomly_PrettyCards_GetUploadURL_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "prettyCards.getUploadURL", values, expectedJSON), token)
	resp, apiErr, err := vk.PrettyCards_GetUploadURL(context.Background())
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_PrettyCards_GetUploadURL_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "prettyCards.getUploadURL", expectedJSON), "")
	resp, apiErr, err := vk.PrettyCards_GetUploadURL(context.Background())
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_PrettyCards_GetUploadURL_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.PrettyCards_GetUploadURL(context.Background())
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Search_GetHints_Request(r *Search_GetHints_Request) {
	(*r).Q = new(string)
	*(*r).Q = randString()
	(*r).Offset = new(int)
	*(*r).Offset = randInt()
	(*r).Limit = new(int)
	*(*r).Limit = randInt()
	(*r).Filters = new([]string)
	l0 := randIntn(maxArrayLength + 1)
	*(*r).Filters = make([]string, l0)
	for i0 := 0; i0 < l0; i0++ {
		(*(*r).Filters)[i0] = randString()
	}
	(*r).Fields = new([]string)
	l0 = randIntn(maxArrayLength + 1)
	*(*r).Fields = make([]string, l0)
	for i0 := 0; i0 < l0; i0++ {
		(*(*r).Fields)[i0] = randString()
	}
	(*r).SearchGlobal = new(bool)
	*(*r).SearchGlobal = randBool()
}

func TestVK_Search_GetHints_Success(t *testing.T) {
	values := make(url.Values, 8)
	var req Search_GetHints_Request
	fillRandomly_Search_GetHints_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Search_GetHints_Response
	fillRandomly_Search_GetHints_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "search.getHints", values, expectedJSON), token)
	resp, apiErr, err := vk.Search_GetHints(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Search_GetHints_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "search.getHints", expectedJSON), "")
	resp, apiErr, err := vk.Search_GetHints(context.Background(), Search_GetHints_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Search_GetHints_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Search_GetHints(context.Background(), Search_GetHints_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Secure_AddAppEvent_Request(r *Secure_AddAppEvent_Request) {
	(*r).UserId = randInt()
	(*r).ActivityId = randInt()
	(*r).Value = new(int)
	*(*r).Value = randInt()
}

func TestVK_Secure_AddAppEvent_Success(t *testing.T) {
	values := make(url.Values, 5)
	var req Secure_AddAppEvent_Request
	fillRandomly_Secure_AddAppEvent_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Base_Ok_Response
	fillRandomly_Base_Ok_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "secure.addAppEvent", values, expectedJSON), token)
	resp, apiErr, err := vk.Secure_AddAppEvent(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Secure_AddAppEvent_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "secure.addAppEvent", expectedJSON), "")
	resp, apiErr, err := vk.Secure_AddAppEvent(context.Background(), Secure_AddAppEvent_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Secure_AddAppEvent_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Secure_AddAppEvent(context.Background(), Secure_AddAppEvent_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Secure_CheckToken_Request(r *Secure_CheckToken_Request) {
	(*r).Token = new(string)
	*(*r).Token = randString()
	(*r).Ip = new(string)
	*(*r).Ip = randString()
}

func TestVK_Secure_CheckToken_Success(t *testing.T) {
	values := make(url.Values, 4)
	var req Secure_CheckToken_Request
	fillRandomly_Secure_CheckToken_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Secure_CheckToken_Response
	fillRandomly_Secure_CheckToken_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "secure.checkToken", values, expectedJSON), token)
	resp, apiErr, err := vk.Secure_CheckToken(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Secure_CheckToken_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "secure.checkToken", expectedJSON), "")
	resp, apiErr, err := vk.Secure_CheckToken(context.Background(), Secure_CheckToken_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Secure_CheckToken_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Secure_CheckToken(context.Background(), Secure_CheckToken_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func TestVK_Secure_GetAppBalance_Success(t *testing.T) {
	values := make(url.Values, 2)
	var expected Secure_GetAppBalance_Response
	fillRandomly_Secure_GetAppBalance_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "secure.getAppBalance", values, expectedJSON), token)
	resp, apiErr, err := vk.Secure_GetAppBalance(context.Background())
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Secure_GetAppBalance_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "secure.getAppBalance", expectedJSON), "")
	resp, apiErr, err := vk.Secure_GetAppBalance(context.Background())
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Secure_GetAppBalance_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Secure_GetAppBalance(context.Background())
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Secure_GetSMSHistory_Request(r *Secure_GetSMSHistory_Request) {
	(*r).UserId = new(int)
	*(*r).UserId = randInt()
	(*r).DateFrom = new(int)
	*(*r).DateFrom = randInt()
	(*r).DateTo = new(int)
	*(*r).DateTo = randInt()
	(*r).Limit = new(int)
	*(*r).Limit = randInt()
}

func TestVK_Secure_GetSMSHistory_Success(t *testing.T) {
	values := make(url.Values, 6)
	var req Secure_GetSMSHistory_Request
	fillRandomly_Secure_GetSMSHistory_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Secure_GetSMSHistory_Response
	fillRandomly_Secure_GetSMSHistory_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "secure.getSMSHistory", values, expectedJSON), token)
	resp, apiErr, err := vk.Secure_GetSMSHistory(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Secure_GetSMSHistory_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "secure.getSMSHistory", expectedJSON), "")
	resp, apiErr, err := vk.Secure_GetSMSHistory(context.Background(), Secure_GetSMSHistory_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Secure_GetSMSHistory_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Secure_GetSMSHistory(context.Background(), Secure_GetSMSHistory_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Secure_GetTransactionsHistory_Request(r *Secure_GetTransactionsHistory_Request) {
	(*r).Type = new(int)
	*(*r).Type = randInt()
	(*r).UidFrom = new(int)
	*(*r).UidFrom = randInt()
	(*r).UidTo = new(int)
	*(*r).UidTo = randInt()
	(*r).DateFrom = new(int)
	*(*r).DateFrom = randInt()
	(*r).DateTo = new(int)
	*(*r).DateTo = randInt()
	(*r).Limit = new(int)
	*(*r).Limit = randInt()
}

func TestVK_Secure_GetTransactionsHistory_Success(t *testing.T) {
	values := make(url.Values, 8)
	var req Secure_GetTransactionsHistory_Request
	fillRandomly_Secure_GetTransactionsHistory_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Secure_GetTransactionsHistory_Response
	fillRandomly_Secure_GetTransactionsHistory_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "secure.getTransactionsHistory", values, expectedJSON), token)
	resp, apiErr, err := vk.Secure_GetTransactionsHistory(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Secure_GetTransactionsHistory_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "secure.getTransactionsHistory", expectedJSON), "")
	resp, apiErr, err := vk.Secure_GetTransactionsHistory(context.Background(), Secure_GetTransactionsHistory_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Secure_GetTransactionsHistory_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Secure_GetTransactionsHistory(context.Background(), Secure_GetTransactionsHistory_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Secure_GetUserLevel_Request(r *Secure_GetUserLevel_Request) {
	(*r).UserIds = new([]int)
	l0 := randIntn(maxArrayLength + 1)
	*(*r).UserIds = make([]int, l0)
	for i0 := 0; i0 < l0; i0++ {
		(*(*r).UserIds)[i0] = randInt()
	}
}

func TestVK_Secure_GetUserLevel_Success(t *testing.T) {
	values := make(url.Values, 3)
	var req Secure_GetUserLevel_Request
	fillRandomly_Secure_GetUserLevel_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Secure_GetUserLevel_Response
	fillRandomly_Secure_GetUserLevel_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "secure.getUserLevel", values, expectedJSON), token)
	resp, apiErr, err := vk.Secure_GetUserLevel(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Secure_GetUserLevel_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "secure.getUserLevel", expectedJSON), "")
	resp, apiErr, err := vk.Secure_GetUserLevel(context.Background(), Secure_GetUserLevel_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Secure_GetUserLevel_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Secure_GetUserLevel(context.Background(), Secure_GetUserLevel_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Secure_GiveEventSticker_Request(r *Secure_GiveEventSticker_Request) {
	(*r).UserIds = new([]int)
	l0 := randIntn(maxArrayLength + 1)
	*(*r).UserIds = make([]int, l0)
	for i0 := 0; i0 < l0; i0++ {
		(*(*r).UserIds)[i0] = randInt()
	}
	(*r).AchievementId = randInt()
}

func TestVK_Secure_GiveEventSticker_Success(t *testing.T) {
	values := make(url.Values, 4)
	var req Secure_GiveEventSticker_Request
	fillRandomly_Secure_GiveEventSticker_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Secure_GiveEventSticker_Response
	fillRandomly_Secure_GiveEventSticker_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "secure.giveEventSticker", values, expectedJSON), token)
	resp, apiErr, err := vk.Secure_GiveEventSticker(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Secure_GiveEventSticker_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "secure.giveEventSticker", expectedJSON), "")
	resp, apiErr, err := vk.Secure_GiveEventSticker(context.Background(), Secure_GiveEventSticker_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Secure_GiveEventSticker_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Secure_GiveEventSticker(context.Background(), Secure_GiveEventSticker_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Secure_SendNotification_Request(r *Secure_SendNotification_Request) {
	(*r).UserIds = new([]int)
	l0 := randIntn(maxArrayLength + 1)
	*(*r).UserIds = make([]int, l0)
	for i0 := 0; i0 < l0; i0++ {
		(*(*r).UserIds)[i0] = randInt()
	}
	(*r).UserId = new(int)
	*(*r).UserId = randInt()
	(*r).Message = randString()
}

func TestVK_Secure_SendNotification_Success(t *testing.T) {
	values := make(url.Values, 5)
	var req Secure_SendNotification_Request
	fillRandomly_Secure_SendNotification_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Secure_SendNotification_Response
	fillRandomly_Secure_SendNotification_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "secure.sendNotification", values, expectedJSON), token)
	resp, apiErr, err := vk.Secure_SendNotification(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Secure_SendNotification_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "secure.sendNotification", expectedJSON), "")
	resp, apiErr, err := vk.Secure_SendNotification(context.Background(), Secure_SendNotification_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Secure_SendNotification_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Secure_SendNotification(context.Background(), Secure_SendNotification_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Secure_SendSMSNotification_Request(r *Secure_SendSMSNotification_Request) {
	(*r).UserId = randInt()
	(*r).Message = randString()
}

func TestVK_Secure_SendSMSNotification_Success(t *testing.T) {
	values := make(url.Values, 4)
	var req Secure_SendSMSNotification_Request
	fillRandomly_Secure_SendSMSNotification_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Base_Ok_Response
	fillRandomly_Base_Ok_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "secure.sendSMSNotification", values, expectedJSON), token)
	resp, apiErr, err := vk.Secure_SendSMSNotification(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Secure_SendSMSNotification_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "secure.sendSMSNotification", expectedJSON), "")
	resp, apiErr, err := vk.Secure_SendSMSNotification(context.Background(), Secure_SendSMSNotification_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Secure_SendSMSNotification_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Secure_SendSMSNotification(context.Background(), Secure_SendSMSNotification_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Secure_SetCounter_Request(r *Secure_SetCounter_Request) {
	(*r).UserId = new(int)
	*(*r).UserId = randInt()
	(*r).Counter = new(int)
	*(*r).Counter = randInt()
	(*r).Increment = new(bool)
	*(*r).Increment = randBool()
}

func TestVK_Secure_SetCounter_Success(t *testing.T) {
	values := make(url.Values, 5)
	var req Secure_SetCounter_Request
	fillRandomly_Secure_SetCounter_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Base_Bool_Response
	fillRandomly_Base_Bool_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "secure.setCounter", values, expectedJSON), token)
	resp, apiErr, err := vk.Secure_SetCounter(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Secure_SetCounter_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "secure.setCounter", expectedJSON), "")
	resp, apiErr, err := vk.Secure_SetCounter(context.Background(), Secure_SetCounter_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Secure_SetCounter_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Secure_SetCounter(context.Background(), Secure_SetCounter_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Secure_SetCounterCounters_Request(r *Secure_SetCounterCounters_Request) {
	(*r).Counters = new([]string)
	l0 := randIntn(maxArrayLength + 1)
	*(*r).Counters = make([]string, l0)
	for i0 := 0; i0 < l0; i0++ {
		(*(*r).Counters)[i0] = randString()
	}
}

func TestVK_Secure_SetCounterCounters_Success(t *testing.T) {
	values := make(url.Values, 3)
	var req Secure_SetCounterCounters_Request
	fillRandomly_Secure_SetCounterCounters_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Secure_SetCounterArray_Response
	fillRandomly_Secure_SetCounterArray_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "secure.setCounter", values, expectedJSON), token)
	resp, apiErr, err := vk.Secure_SetCounterCounters(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Secure_SetCounterCounters_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "secure.setCounter", expectedJSON), "")
	resp, apiErr, err := vk.Secure_SetCounterCounters(context.Background(), Secure_SetCounterCounters_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Secure_SetCounterCounters_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Secure_SetCounterCounters(context.Background(), Secure_SetCounterCounters_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Secure_SetCounterNotSecure_Request(r *Secure_SetCounterNotSecure_Request) {
	(*r).Counter = new(int)
	*(*r).Counter = randInt()
	(*r).Increment = new(bool)
	*(*r).Increment = randBool()
}

func TestVK_Secure_SetCounterNotSecure_Success(t *testing.T) {
	values := make(url.Values, 4)
	var req Secure_SetCounterNotSecure_Request
	fillRandomly_Secure_SetCounterNotSecure_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Base_Bool_Response
	fillRandomly_Base_Bool_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "setCounter", values, expectedJSON), token)
	resp, apiErr, err := vk.Secure_SetCounterNotSecure(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Secure_SetCounterNotSecure_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "setCounter", expectedJSON), "")
	resp, apiErr, err := vk.Secure_SetCounterNotSecure(context.Background(), Secure_SetCounterNotSecure_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Secure_SetCounterNotSecure_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Secure_SetCounterNotSecure(context.Background(), Secure_SetCounterNotSecure_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Stats_Get_Interval(o *Stats_Get_Interval) {
	switch randIntn(5) {
	case 0:
		*o = "all"
	case 1:
		*o = "day"
	case 2:
		*o = "month"
	case 3:
		*o = "week"
	case 4:
		*o = "year"
	}
}

func fillRandomly_Stats_Get_Request(r *Stats_Get_Request) {
	(*r).GroupId = new(int)
	*(*r).GroupId = randInt()
	(*r).AppId = new(int)
	*(*r).AppId = randInt()
	(*r).TimestampFrom = new(int)
	*(*r).TimestampFrom = randInt()
	(*r).TimestampTo = new(int)
	*(*r).TimestampTo = randInt()
	(*r).Interval = new(Stats_Get_Interval)
	fillRandomly_Stats_Get_Interval((*r).Interval)
	(*r).IntervalsCount = new(int)
	*(*r).IntervalsCount = randInt()
	(*r).Filters = new([]string)
	l0 := randIntn(maxArrayLength + 1)
	*(*r).Filters = make([]string, l0)
	for i0 := 0; i0 < l0; i0++ {
		(*(*r).Filters)[i0] = randString()
	}
	(*r).StatsGroups = new([]string)
	l0 = randIntn(maxArrayLength + 1)
	*(*r).StatsGroups = make([]string, l0)
	for i0 := 0; i0 < l0; i0++ {
		(*(*r).StatsGroups)[i0] = randString()
	}
	(*r).Extended = new(bool)
	*(*r).Extended = randBool()
}

func TestVK_Stats_Get_Success(t *testing.T) {
	values := make(url.Values, 11)
	var req Stats_Get_Request
	fillRandomly_Stats_Get_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Stats_Get_Response
	fillRandomly_Stats_Get_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "stats.get", values, expectedJSON), token)
	resp, apiErr, err := vk.Stats_Get(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Stats_Get_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "stats.get", expectedJSON), "")
	resp, apiErr, err := vk.Stats_Get(context.Background(), Stats_Get_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Stats_Get_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Stats_Get(context.Background(), Stats_Get_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Stats_GetPostReach_Request(r *Stats_GetPostReach_Request) {
	(*r).OwnerId = randString()
	(*r).PostIds = new([]int)
	l0 := randIntn(maxArrayLength + 1)
	*(*r).PostIds = make([]int, l0)
	for i0 := 0; i0 < l0; i0++ {
		(*(*r).PostIds)[i0] = randInt()
	}
}

func TestVK_Stats_GetPostReach_Success(t *testing.T) {
	values := make(url.Values, 4)
	var req Stats_GetPostReach_Request
	fillRandomly_Stats_GetPostReach_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Stats_GetPostReach_Response
	fillRandomly_Stats_GetPostReach_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "stats.getPostReach", values, expectedJSON), token)
	resp, apiErr, err := vk.Stats_GetPostReach(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Stats_GetPostReach_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "stats.getPostReach", expectedJSON), "")
	resp, apiErr, err := vk.Stats_GetPostReach(context.Background(), Stats_GetPostReach_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Stats_GetPostReach_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Stats_GetPostReach(context.Background(), Stats_GetPostReach_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func TestVK_Stats_TrackVisitor_Success(t *testing.T) {
	values := make(url.Values, 2)
	var expected Base_Ok_Response
	fillRandomly_Base_Ok_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "stats.trackVisitor", values, expectedJSON), token)
	resp, apiErr, err := vk.Stats_TrackVisitor(context.Background())
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Stats_TrackVisitor_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "stats.trackVisitor", expectedJSON), "")
	resp, apiErr, err := vk.Stats_TrackVisitor(context.Background())
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Stats_TrackVisitor_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Stats_TrackVisitor(context.Background())
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Status_Get_Request(r *Status_Get_Request) {
	(*r).UserId = new(int)
	*(*r).UserId = randInt()
	(*r).GroupId = new(int)
	*(*r).GroupId = randInt()
}

func TestVK_Status_Get_Success(t *testing.T) {
	values := make(url.Values, 4)
	var req Status_Get_Request
	fillRandomly_Status_Get_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Status_Get_Response
	fillRandomly_Status_Get_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "status.get", values, expectedJSON), token)
	resp, apiErr, err := vk.Status_Get(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Status_Get_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "status.get", expectedJSON), "")
	resp, apiErr, err := vk.Status_Get(context.Background(), Status_Get_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Status_Get_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Status_Get(context.Background(), Status_Get_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Status_Set_Request(r *Status_Set_Request) {
	(*r).Text = new(string)
	*(*r).Text = randString()
	(*r).GroupId = new(int)
	*(*r).GroupId = randInt()
}

func TestVK_Status_Set_Success(t *testing.T) {
	values := make(url.Values, 4)
	var req Status_Set_Request
	fillRandomly_Status_Set_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Base_Ok_Response
	fillRandomly_Base_Ok_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "status.set", values, expectedJSON), token)
	resp, apiErr, err := vk.Status_Set(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Status_Set_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "status.set", expectedJSON), "")
	resp, apiErr, err := vk.Status_Set(context.Background(), Status_Set_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Status_Set_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Status_Set(context.Background(), Status_Set_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Storage_Get_Request(r *Storage_Get_Request) {
	(*r).Key = new(string)
	*(*r).Key = randString()
	(*r).Keys = new([]string)
	l0 := randIntn(maxArrayLength + 1)
	*(*r).Keys = make([]string, l0)
	for i0 := 0; i0 < l0; i0++ {
		(*(*r).Keys)[i0] = randString()
	}
	(*r).UserId = new(int)
	*(*r).UserId = randInt()
}

func TestVK_Storage_Get_Success(t *testing.T) {
	values := make(url.Values, 5)
	var req Storage_Get_Request
	fillRandomly_Storage_Get_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Storage_Get_Response
	fillRandomly_Storage_Get_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "storage.get", values, expectedJSON), token)
	resp, apiErr, err := vk.Storage_Get(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Storage_Get_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "storage.get", expectedJSON), "")
	resp, apiErr, err := vk.Storage_Get(context.Background(), Storage_Get_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Storage_Get_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Storage_Get(context.Background(), Storage_Get_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Storage_GetKeys_Request(r *Storage_GetKeys_Request) {
	(*r).UserId = new(int)
	*(*r).UserId = randInt()
	(*r).Offset = new(int)
	*(*r).Offset = randInt()
	(*r).Count = new(int)
	*(*r).Count = randInt()
}

func TestVK_Storage_GetKeys_Success(t *testing.T) {
	values := make(url.Values, 5)
	var req Storage_GetKeys_Request
	fillRandomly_Storage_GetKeys_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Storage_GetKeys_Response
	fillRandomly_Storage_GetKeys_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "storage.getKeys", values, expectedJSON), token)
	resp, apiErr, err := vk.Storage_GetKeys(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Storage_GetKeys_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "storage.getKeys", expectedJSON), "")
	resp, apiErr, err := vk.Storage_GetKeys(context.Background(), Storage_GetKeys_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Storage_GetKeys_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Storage_GetKeys(context.Background(), Storage_GetKeys_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Storage_Set_Request(r *Storage_Set_Request) {
	(*r).Key = randString()
	(*r).Value = new(string)
	*(*r).Value = randString()
	(*r).UserId = new(int)
	*(*r).UserId = randInt()
}

func TestVK_Storage_Set_Success(t *testing.T) {
	values := make(url.Values, 5)
	var req Storage_Set_Request
	fillRandomly_Storage_Set_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Base_Ok_Response
	fillRandomly_Base_Ok_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "storage.set", values, expectedJSON), token)
	resp, apiErr, err := vk.Storage_Set(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Storage_Set_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "storage.set", expectedJSON), "")
	resp, apiErr, err := vk.Storage_Set(context.Background(), Storage_Set_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Storage_Set_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Storage_Set(context.Background(), Storage_Set_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Store_AddStickersToFavorite_Request(r *Store_AddStickersToFavorite_Request) {
	(*r).StickerIds = new([]int)
	l0 := randIntn(maxArrayLength + 1)
	*(*r).StickerIds = make([]int, l0)
	for i0 := 0; i0 < l0; i0++ {
		(*(*r).StickerIds)[i0] = randInt()
	}
}

func TestVK_Store_AddStickersToFavorite_Success(t *testing.T) {
	values := make(url.Values, 3)
	var req Store_AddStickersToFavorite_Request
	fillRandomly_Store_AddStickersToFavorite_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Base_Ok_Response
	fillRandomly_Base_Ok_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "store.addStickersToFavorite", values, expectedJSON), token)
	resp, apiErr, err := vk.Store_AddStickersToFavorite(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Store_AddStickersToFavorite_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "store.addStickersToFavorite", expectedJSON), "")
	resp, apiErr, err := vk.Store_AddStickersToFavorite(context.Background(), Store_AddStickersToFavorite_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Store_AddStickersToFavorite_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Store_AddStickersToFavorite(context.Background(), Store_AddStickersToFavorite_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func TestVK_Store_GetFavoriteStickers_Success(t *testing.T) {
	values := make(url.Values, 2)
	var expected Store_GetFavoriteStickers_Response
	fillRandomly_Store_GetFavoriteStickers_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "store.getFavoriteStickers", values, expectedJSON), token)
	resp, apiErr, err := vk.Store_GetFavoriteStickers(context.Background())
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Store_GetFavoriteStickers_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "store.getFavoriteStickers", expectedJSON), "")
	resp, apiErr, err := vk.Store_GetFavoriteStickers(context.Background())
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Store_GetFavoriteStickers_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Store_GetFavoriteStickers(context.Background())
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Store_GetProducts_Request(r *Store_GetProducts_Request) {
	(*r).Type = new(string)
	*(*r).Type = randString()
	(*r).Merchant = new(string)
	*(*r).Merchant = randString()
	(*r).Section = new(string)
	*(*r).Section = randString()
	(*r).ProductIds = new([]int)
	l0 := randIntn(maxArrayLength + 1)
	*(*r).ProductIds = make([]int, l0)
	for i0 := 0; i0 < l0; i0++ {
		(*(*r).ProductIds)[i0] = randInt()
	}
	(*r).Filters = new([]string)
	l0 = randIntn(maxArrayLength + 1)
	*(*r).Filters = make([]string, l0)
	for i0 := 0; i0 < l0; i0++ {
		(*(*r).Filters)[i0] = randString()
	}
	(*r).Extended = new(bool)
	*(*r).Extended = randBool()
}

func TestVK_Store_GetProducts_Success(t *testing.T) {
	values := make(url.Values, 8)
	var req Store_GetProducts_Request
	fillRandomly_Store_GetProducts_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Store_GetProducts_Response
	fillRandomly_Store_GetProducts_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "store.getProducts", values, expectedJSON), token)
	resp, apiErr, err := vk.Store_GetProducts(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Store_GetProducts_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "store.getProducts", expectedJSON), "")
	resp, apiErr, err := vk.Store_GetProducts(context.Background(), Store_GetProducts_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Store_GetProducts_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Store_GetProducts(context.Background(), Store_GetProducts_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Store_GetStickersKeywords_Request(r *Store_GetStickersKeywords_Request) {
	(*r).StickersIds = new([]int)
	l0 := randIntn(maxArrayLength + 1)
	*(*r).StickersIds = make([]int, l0)
	for i0 := 0; i0 < l0; i0++ {
		(*(*r).StickersIds)[i0] = randInt()
	}
	(*r).ProductsIds = new([]int)
	l0 = randIntn(maxArrayLength + 1)
	*(*r).ProductsIds = make([]int, l0)
	for i0 := 0; i0 < l0; i0++ {
		(*(*r).ProductsIds)[i0] = randInt()
	}
	(*r).Aliases = new(bool)
	*(*r).Aliases = randBool()
	(*r).AllProducts = new(bool)
	*(*r).AllProducts = randBool()
	(*r).NeedStickers = new(bool)
	*(*r).NeedStickers = randBool()
}

func TestVK_Store_GetStickersKeywords_Success(t *testing.T) {
	values := make(url.Values, 7)
	var req Store_GetStickersKeywords_Request
	fillRandomly_Store_GetStickersKeywords_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Store_GetStickersKeywords_Response
	fillRandomly_Store_GetStickersKeywords_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "store.getStickersKeywords", values, expectedJSON), token)
	resp, apiErr, err := vk.Store_GetStickersKeywords(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Store_GetStickersKeywords_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "store.getStickersKeywords", expectedJSON), "")
	resp, apiErr, err := vk.Store_GetStickersKeywords(context.Background(), Store_GetStickersKeywords_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Store_GetStickersKeywords_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Store_GetStickersKeywords(context.Background(), Store_GetStickersKeywords_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Store_RemoveStickersFromFavorite_Request(r *Store_RemoveStickersFromFavorite_Request) {
	(*r).StickerIds = new([]int)
	l0 := randIntn(maxArrayLength + 1)
	*(*r).StickerIds = make([]int, l0)
	for i0 := 0; i0 < l0; i0++ {
		(*(*r).StickerIds)[i0] = randInt()
	}
}

func TestVK_Store_RemoveStickersFromFavorite_Success(t *testing.T) {
	values := make(url.Values, 3)
	var req Store_RemoveStickersFromFavorite_Request
	fillRandomly_Store_RemoveStickersFromFavorite_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Base_Ok_Response
	fillRandomly_Base_Ok_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "store.removeStickersFromFavorite", values, expectedJSON), token)
	resp, apiErr, err := vk.Store_RemoveStickersFromFavorite(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Store_RemoveStickersFromFavorite_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "store.removeStickersFromFavorite", expectedJSON), "")
	resp, apiErr, err := vk.Store_RemoveStickersFromFavorite(context.Background(), Store_RemoveStickersFromFavorite_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Store_RemoveStickersFromFavorite_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Store_RemoveStickersFromFavorite(context.Background(), Store_RemoveStickersFromFavorite_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Stories_BanOwner_Request(r *Stories_BanOwner_Request) {
	(*r).OwnersIds = new([]int)
	l0 := randIntn(maxArrayLength + 1)
	*(*r).OwnersIds = make([]int, l0)
	for i0 := 0; i0 < l0; i0++ {
		(*(*r).OwnersIds)[i0] = randInt()
	}
}

func TestVK_Stories_BanOwner_Success(t *testing.T) {
	values := make(url.Values, 3)
	var req Stories_BanOwner_Request
	fillRandomly_Stories_BanOwner_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Base_Ok_Response
	fillRandomly_Base_Ok_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "stories.banOwner", values, expectedJSON), token)
	resp, apiErr, err := vk.Stories_BanOwner(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Stories_BanOwner_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "stories.banOwner", expectedJSON), "")
	resp, apiErr, err := vk.Stories_BanOwner(context.Background(), Stories_BanOwner_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Stories_BanOwner_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Stories_BanOwner(context.Background(), Stories_BanOwner_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Stories_Delete_Request(r *Stories_Delete_Request) {
	(*r).OwnerId = new(int)
	*(*r).OwnerId = randInt()
	(*r).StoryId = new(int)
	*(*r).StoryId = randInt()
	(*r).Stories = new([]string)
	l0 := randIntn(maxArrayLength + 1)
	*(*r).Stories = make([]string, l0)
	for i0 := 0; i0 < l0; i0++ {
		(*(*r).Stories)[i0] = randString()
	}
}

func TestVK_Stories_Delete_Success(t *testing.T) {
	values := make(url.Values, 5)
	var req Stories_Delete_Request
	fillRandomly_Stories_Delete_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Base_Ok_Response
	fillRandomly_Base_Ok_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "stories.delete", values, expectedJSON), token)
	resp, apiErr, err := vk.Stories_Delete(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Stories_Delete_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "stories.delete", expectedJSON), "")
	resp, apiErr, err := vk.Stories_Delete(context.Background(), Stories_Delete_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Stories_Delete_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Stories_Delete(context.Background(), Stories_Delete_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Stories_Get_Request(r *Stories_Get_Request) {
	(*r).OwnerId = new(int)
	*(*r).OwnerId = randInt()
	(*r).Extended = new(bool)
	*(*r).Extended = randBool()
	(*r).Fields = new([]Base_UserGroupFields)
	l0 := randIntn(maxArrayLength + 1)
	*(*r).Fields = make([]Base_UserGroupFields, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomly_Base_UserGroupFields(&(*(*r).Fields)[i0])
	}
}

func TestVK_Stories_Get_Success(t *testing.T) {
	values := make(url.Values, 5)
	var req Stories_Get_Request
	fillRandomly_Stories_Get_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Stories_GetV5113_Response
	fillRandomly_Stories_GetV5113_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "stories.get", values, expectedJSON), token)
	resp, apiErr, err := vk.Stories_Get(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Stories_Get_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "stories.get", expectedJSON), "")
	resp, apiErr, err := vk.Stories_Get(context.Background(), Stories_Get_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Stories_Get_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Stories_Get(context.Background(), Stories_Get_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Stories_GetBanned_Request(r *Stories_GetBanned_Request) {
	(*r).Fields = new([]Base_UserGroupFields)
	l0 := randIntn(maxArrayLength + 1)
	*(*r).Fields = make([]Base_UserGroupFields, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomly_Base_UserGroupFields(&(*(*r).Fields)[i0])
	}
}

func TestVK_Stories_GetBanned_Success(t *testing.T) {
	values := make(url.Values, 4)
	var req Stories_GetBanned_Request
	fillRandomly_Stories_GetBanned_Request(&req)
	require.NoError(t, req.fillIn(values))
	setString(values, "extended", "0")
	var expected Stories_GetBanned_Response
	fillRandomly_Stories_GetBanned_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "stories.getBanned", values, expectedJSON), token)
	resp, apiErr, err := vk.Stories_GetBanned(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Stories_GetBanned_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "stories.getBanned", expectedJSON), "")
	resp, apiErr, err := vk.Stories_GetBanned(context.Background(), Stories_GetBanned_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Stories_GetBanned_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Stories_GetBanned(context.Background(), Stories_GetBanned_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func TestVK_Stories_GetBannedExtended_Success(t *testing.T) {
	values := make(url.Values, 4)
	var req Stories_GetBanned_Request
	fillRandomly_Stories_GetBanned_Request(&req)
	require.NoError(t, req.fillIn(values))
	setString(values, "extended", "1")
	var expected Stories_GetBannedExtended_Response
	fillRandomly_Stories_GetBannedExtended_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "stories.getBanned", values, expectedJSON), token)
	resp, apiErr, err := vk.Stories_GetBannedExtended(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Stories_GetBannedExtended_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "stories.getBanned", expectedJSON), "")
	resp, apiErr, err := vk.Stories_GetBannedExtended(context.Background(), Stories_GetBanned_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Stories_GetBannedExtended_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Stories_GetBannedExtended(context.Background(), Stories_GetBanned_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Stories_GetById_Request(r *Stories_GetById_Request) {
	(*r).Stories = new([]string)
	l0 := randIntn(maxArrayLength + 1)
	*(*r).Stories = make([]string, l0)
	for i0 := 0; i0 < l0; i0++ {
		(*(*r).Stories)[i0] = randString()
	}
	(*r).Extended = new(bool)
	*(*r).Extended = randBool()
	(*r).Fields = new([]Base_UserGroupFields)
	l0 = randIntn(maxArrayLength + 1)
	*(*r).Fields = make([]Base_UserGroupFields, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomly_Base_UserGroupFields(&(*(*r).Fields)[i0])
	}
}

func TestVK_Stories_GetById_Success(t *testing.T) {
	values := make(url.Values, 5)
	var req Stories_GetById_Request
	fillRandomly_Stories_GetById_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Stories_GetByIdExtended_Response
	fillRandomly_Stories_GetByIdExtended_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "stories.getById", values, expectedJSON), token)
	resp, apiErr, err := vk.Stories_GetById(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Stories_GetById_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "stories.getById", expectedJSON), "")
	resp, apiErr, err := vk.Stories_GetById(context.Background(), Stories_GetById_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Stories_GetById_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Stories_GetById(context.Background(), Stories_GetById_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Stories_GetPhotoUploadServer_Request(r *Stories_GetPhotoUploadServer_Request) {
	(*r).AddToNews = new(bool)
	*(*r).AddToNews = randBool()
	(*r).UserIds = new([]int)
	l0 := randIntn(maxArrayLength + 1)
	*(*r).UserIds = make([]int, l0)
	for i0 := 0; i0 < l0; i0++ {
		(*(*r).UserIds)[i0] = randInt()
	}
	(*r).ReplyToStory = new(string)
	*(*r).ReplyToStory = randString()
	(*r).LinkText = new(Stories_UploadLinkText)
	fillRandomly_Stories_UploadLinkText((*r).LinkText)
	(*r).LinkUrl = new(string)
	*(*r).LinkUrl = randString()
	(*r).GroupId = new(int)
	*(*r).GroupId = randInt()
	(*r).ClickableStickers = new(string)
	*(*r).ClickableStickers = randString()
}

func TestVK_Stories_GetPhotoUploadServer_Success(t *testing.T) {
	values := make(url.Values, 9)
	var req Stories_GetPhotoUploadServer_Request
	fillRandomly_Stories_GetPhotoUploadServer_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Stories_GetPhotoUploadServer_Response
	fillRandomly_Stories_GetPhotoUploadServer_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "stories.getPhotoUploadServer", values, expectedJSON), token)
	resp, apiErr, err := vk.Stories_GetPhotoUploadServer(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Stories_GetPhotoUploadServer_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "stories.getPhotoUploadServer", expectedJSON), "")
	resp, apiErr, err := vk.Stories_GetPhotoUploadServer(context.Background(), Stories_GetPhotoUploadServer_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Stories_GetPhotoUploadServer_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Stories_GetPhotoUploadServer(context.Background(), Stories_GetPhotoUploadServer_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Stories_GetReplies_Request(r *Stories_GetReplies_Request) {
	(*r).OwnerId = randInt()
	(*r).StoryId = randInt()
	(*r).AccessKey = new(string)
	*(*r).AccessKey = randString()
	(*r).Extended = new(bool)
	*(*r).Extended = randBool()
	(*r).Fields = new([]Base_UserGroupFields)
	l0 := randIntn(maxArrayLength + 1)
	*(*r).Fields = make([]Base_UserGroupFields, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomly_Base_UserGroupFields(&(*(*r).Fields)[i0])
	}
}

func TestVK_Stories_GetReplies_Success(t *testing.T) {
	values := make(url.Values, 7)
	var req Stories_GetReplies_Request
	fillRandomly_Stories_GetReplies_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Stories_GetV5113_Response
	fillRandomly_Stories_GetV5113_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "stories.getReplies", values, expectedJSON), token)
	resp, apiErr, err := vk.Stories_GetReplies(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Stories_GetReplies_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "stories.getReplies", expectedJSON), "")
	resp, apiErr, err := vk.Stories_GetReplies(context.Background(), Stories_GetReplies_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Stories_GetReplies_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Stories_GetReplies(context.Background(), Stories_GetReplies_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Stories_GetStats_Request(r *Stories_GetStats_Request) {
	(*r).OwnerId = randInt()
	(*r).StoryId = randInt()
}

func TestVK_Stories_GetStats_Success(t *testing.T) {
	values := make(url.Values, 4)
	var req Stories_GetStats_Request
	fillRandomly_Stories_GetStats_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Stories_GetStats_Response
	fillRandomly_Stories_GetStats_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "stories.getStats", values, expectedJSON), token)
	resp, apiErr, err := vk.Stories_GetStats(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Stories_GetStats_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "stories.getStats", expectedJSON), "")
	resp, apiErr, err := vk.Stories_GetStats(context.Background(), Stories_GetStats_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Stories_GetStats_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Stories_GetStats(context.Background(), Stories_GetStats_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Stories_GetVideoUploadServer_Request(r *Stories_GetVideoUploadServer_Request) {
	(*r).AddToNews = new(bool)
	*(*r).AddToNews = randBool()
	(*r).UserIds = new([]int)
	l0 := randIntn(maxArrayLength + 1)
	*(*r).UserIds = make([]int, l0)
	for i0 := 0; i0 < l0; i0++ {
		(*(*r).UserIds)[i0] = randInt()
	}
	(*r).ReplyToStory = new(string)
	*(*r).ReplyToStory = randString()
	(*r).LinkText = new(Stories_UploadLinkText)
	fillRandomly_Stories_UploadLinkText((*r).LinkText)
	(*r).LinkUrl = new(string)
	*(*r).LinkUrl = randString()
	(*r).GroupId = new(int)
	*(*r).GroupId = randInt()
	(*r).ClickableStickers = new(string)
	*(*r).ClickableStickers = randString()
}

func TestVK_Stories_GetVideoUploadServer_Success(t *testing.T) {
	values := make(url.Values, 9)
	var req Stories_GetVideoUploadServer_Request
	fillRandomly_Stories_GetVideoUploadServer_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Stories_GetVideoUploadServer_Response
	fillRandomly_Stories_GetVideoUploadServer_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "stories.getVideoUploadServer", values, expectedJSON), token)
	resp, apiErr, err := vk.Stories_GetVideoUploadServer(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Stories_GetVideoUploadServer_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "stories.getVideoUploadServer", expectedJSON), "")
	resp, apiErr, err := vk.Stories_GetVideoUploadServer(context.Background(), Stories_GetVideoUploadServer_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Stories_GetVideoUploadServer_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Stories_GetVideoUploadServer(context.Background(), Stories_GetVideoUploadServer_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Stories_GetViewers_Request(r *Stories_GetViewers_Request) {
	(*r).OwnerId = randInt()
	(*r).StoryId = randInt()
	(*r).Count = new(int)
	*(*r).Count = randInt()
	(*r).Offset = new(int)
	*(*r).Offset = randInt()
	(*r).Fields = new([]Base_UserGroupFields)
	l0 := randIntn(maxArrayLength + 1)
	*(*r).Fields = make([]Base_UserGroupFields, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomly_Base_UserGroupFields(&(*(*r).Fields)[i0])
	}
}

func TestVK_Stories_GetViewers_Success(t *testing.T) {
	values := make(url.Values, 8)
	var req Stories_GetViewers_Request
	fillRandomly_Stories_GetViewers_Request(&req)
	require.NoError(t, req.fillIn(values))
	setString(values, "extended", "0")
	var expected Stories_GetViewersExtendedV5115_Response
	fillRandomly_Stories_GetViewersExtendedV5115_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "stories.getViewers", values, expectedJSON), token)
	resp, apiErr, err := vk.Stories_GetViewers(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Stories_GetViewers_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "stories.getViewers", expectedJSON), "")
	resp, apiErr, err := vk.Stories_GetViewers(context.Background(), Stories_GetViewers_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Stories_GetViewers_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Stories_GetViewers(context.Background(), Stories_GetViewers_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func TestVK_Stories_GetViewersExtended_Success(t *testing.T) {
	values := make(url.Values, 8)
	var req Stories_GetViewers_Request
	fillRandomly_Stories_GetViewers_Request(&req)
	require.NoError(t, req.fillIn(values))
	setString(values, "extended", "1")
	var expected Stories_GetViewersExtendedV5115_Response
	fillRandomly_Stories_GetViewersExtendedV5115_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "stories.getViewers", values, expectedJSON), token)
	resp, apiErr, err := vk.Stories_GetViewersExtended(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Stories_GetViewersExtended_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "stories.getViewers", expectedJSON), "")
	resp, apiErr, err := vk.Stories_GetViewersExtended(context.Background(), Stories_GetViewers_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Stories_GetViewersExtended_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Stories_GetViewersExtended(context.Background(), Stories_GetViewers_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Stories_HideAllReplies_Request(r *Stories_HideAllReplies_Request) {
	(*r).OwnerId = randInt()
	(*r).GroupId = new(int)
	*(*r).GroupId = randInt()
}

func TestVK_Stories_HideAllReplies_Success(t *testing.T) {
	values := make(url.Values, 4)
	var req Stories_HideAllReplies_Request
	fillRandomly_Stories_HideAllReplies_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Base_Ok_Response
	fillRandomly_Base_Ok_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "stories.hideAllReplies", values, expectedJSON), token)
	resp, apiErr, err := vk.Stories_HideAllReplies(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Stories_HideAllReplies_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "stories.hideAllReplies", expectedJSON), "")
	resp, apiErr, err := vk.Stories_HideAllReplies(context.Background(), Stories_HideAllReplies_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Stories_HideAllReplies_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Stories_HideAllReplies(context.Background(), Stories_HideAllReplies_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Stories_HideReply_Request(r *Stories_HideReply_Request) {
	(*r).OwnerId = randInt()
	(*r).StoryId = randInt()
}

func TestVK_Stories_HideReply_Success(t *testing.T) {
	values := make(url.Values, 4)
	var req Stories_HideReply_Request
	fillRandomly_Stories_HideReply_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Base_Ok_Response
	fillRandomly_Base_Ok_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "stories.hideReply", values, expectedJSON), token)
	resp, apiErr, err := vk.Stories_HideReply(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Stories_HideReply_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "stories.hideReply", expectedJSON), "")
	resp, apiErr, err := vk.Stories_HideReply(context.Background(), Stories_HideReply_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Stories_HideReply_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Stories_HideReply(context.Background(), Stories_HideReply_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Stories_Save_Request(r *Stories_Save_Request) {
	(*r).UploadResults = new([]string)
	l0 := randIntn(maxArrayLength + 1)
	*(*r).UploadResults = make([]string, l0)
	for i0 := 0; i0 < l0; i0++ {
		(*(*r).UploadResults)[i0] = randString()
	}
	(*r).Extended = new(bool)
	*(*r).Extended = randBool()
	(*r).Fields = new([]Base_UserGroupFields)
	l0 = randIntn(maxArrayLength + 1)
	*(*r).Fields = make([]Base_UserGroupFields, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomly_Base_UserGroupFields(&(*(*r).Fields)[i0])
	}
}

func TestVK_Stories_Save_Success(t *testing.T) {
	values := make(url.Values, 5)
	var req Stories_Save_Request
	fillRandomly_Stories_Save_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Stories_Save_Response
	fillRandomly_Stories_Save_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "stories.save", values, expectedJSON), token)
	resp, apiErr, err := vk.Stories_Save(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Stories_Save_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "stories.save", expectedJSON), "")
	resp, apiErr, err := vk.Stories_Save(context.Background(), Stories_Save_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Stories_Save_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Stories_Save(context.Background(), Stories_Save_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Stories_Search_Request(r *Stories_Search_Request) {
	(*r).Q = new(string)
	*(*r).Q = randString()
	(*r).PlaceId = new(int)
	*(*r).PlaceId = randInt()
	(*r).Latitude = new(float64)
	*(*r).Latitude = randFloat()
	(*r).Longitude = new(float64)
	*(*r).Longitude = randFloat()
	(*r).Radius = new(int)
	*(*r).Radius = randInt()
	(*r).MentionedId = new(int)
	*(*r).MentionedId = randInt()
	(*r).Count = new(int)
	*(*r).Count = randInt()
	(*r).Extended = new(bool)
	*(*r).Extended = randBool()
	(*r).Fields = new([]Base_UserGroupFields)
	l0 := randIntn(maxArrayLength + 1)
	*(*r).Fields = make([]Base_UserGroupFields, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomly_Base_UserGroupFields(&(*(*r).Fields)[i0])
	}
}

func TestVK_Stories_Search_Success(t *testing.T) {
	values := make(url.Values, 11)
	var req Stories_Search_Request
	fillRandomly_Stories_Search_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Stories_GetV5113_Response
	fillRandomly_Stories_GetV5113_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "stories.search", values, expectedJSON), token)
	resp, apiErr, err := vk.Stories_Search(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Stories_Search_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "stories.search", expectedJSON), "")
	resp, apiErr, err := vk.Stories_Search(context.Background(), Stories_Search_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Stories_Search_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Stories_Search(context.Background(), Stories_Search_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Stories_SendInteraction_Request(r *Stories_SendInteraction_Request) {
	(*r).AccessKey = randString()
	(*r).Message = new(string)
	*(*r).Message = randString()
	(*r).IsBroadcast = new(bool)
	*(*r).IsBroadcast = randBool()
	(*r).IsAnonymous = new(bool)
	*(*r).IsAnonymous = randBool()
	(*r).UnseenMarker = new(bool)
	*(*r).UnseenMarker = randBool()
}

func TestVK_Stories_SendInteraction_Success(t *testing.T) {
	values := make(url.Values, 7)
	var req Stories_SendInteraction_Request
	fillRandomly_Stories_SendInteraction_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Base_Ok_Response
	fillRandomly_Base_Ok_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "stories.sendInteraction", values, expectedJSON), token)
	resp, apiErr, err := vk.Stories_SendInteraction(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Stories_SendInteraction_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "stories.sendInteraction", expectedJSON), "")
	resp, apiErr, err := vk.Stories_SendInteraction(context.Background(), Stories_SendInteraction_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Stories_SendInteraction_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Stories_SendInteraction(context.Background(), Stories_SendInteraction_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Stories_UnbanOwner_Request(r *Stories_UnbanOwner_Request) {
	(*r).OwnersIds = new([]int)
	l0 := randIntn(maxArrayLength + 1)
	*(*r).OwnersIds = make([]int, l0)
	for i0 := 0; i0 < l0; i0++ {
		(*(*r).OwnersIds)[i0] = randInt()
	}
}

func TestVK_Stories_UnbanOwner_Success(t *testing.T) {
	values := make(url.Values, 3)
	var req Stories_UnbanOwner_Request
	fillRandomly_Stories_UnbanOwner_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Base_Ok_Response
	fillRandomly_Base_Ok_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "stories.unbanOwner", values, expectedJSON), token)
	resp, apiErr, err := vk.Stories_UnbanOwner(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Stories_UnbanOwner_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "stories.unbanOwner", expectedJSON), "")
	resp, apiErr, err := vk.Stories_UnbanOwner(context.Background(), Stories_UnbanOwner_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Stories_UnbanOwner_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Stories_UnbanOwner(context.Background(), Stories_UnbanOwner_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func TestVK_Streaming_GetServerUrl_Success(t *testing.T) {
	values := make(url.Values, 2)
	var expected Streaming_GetServerUrl_Response
	fillRandomly_Streaming_GetServerUrl_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "streaming.getServerUrl", values, expectedJSON), token)
	resp, apiErr, err := vk.Streaming_GetServerUrl(context.Background())
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Streaming_GetServerUrl_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "streaming.getServerUrl", expectedJSON), "")
	resp, apiErr, err := vk.Streaming_GetServerUrl(context.Background())
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Streaming_GetServerUrl_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Streaming_GetServerUrl(context.Background())
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Streaming_SetSettings_MonthlyTier(o *Streaming_SetSettings_MonthlyTier) {
	switch randIntn(7) {
	case 0:
		*o = "tier_1"
	case 1:
		*o = "tier_2"
	case 2:
		*o = "tier_3"
	case 3:
		*o = "tier_4"
	case 4:
		*o = "tier_5"
	case 5:
		*o = "tier_6"
	case 6:
		*o = "unlimited"
	}
}

func fillRandomly_Streaming_SetSettings_Request(r *Streaming_SetSettings_Request) {
	(*r).MonthlyTier = new(Streaming_SetSettings_MonthlyTier)
	fillRandomly_Streaming_SetSettings_MonthlyTier((*r).MonthlyTier)
}

func TestVK_Streaming_SetSettings_Success(t *testing.T) {
	values := make(url.Values, 3)
	var req Streaming_SetSettings_Request
	fillRandomly_Streaming_SetSettings_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Base_Ok_Response
	fillRandomly_Base_Ok_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "streaming.setSettings", values, expectedJSON), token)
	resp, apiErr, err := vk.Streaming_SetSettings(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Streaming_SetSettings_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "streaming.setSettings", expectedJSON), "")
	resp, apiErr, err := vk.Streaming_SetSettings(context.Background(), Streaming_SetSettings_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Streaming_SetSettings_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Streaming_SetSettings(context.Background(), Streaming_SetSettings_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Users_Get_NameCase(o *Users_Get_NameCase) {
	switch randIntn(6) {
	case 0:
		*o = "nom"
	case 1:
		*o = "gen"
	case 2:
		*o = "dat"
	case 3:
		*o = "acc"
	case 4:
		*o = "ins"
	case 5:
		*o = "abl"
	}
}

func fillRandomly_Users_Get_Request(r *Users_Get_Request) {
	(*r).UserIds = new([]string)
	l0 := randIntn(maxArrayLength + 1)
	*(*r).UserIds = make([]string, l0)
	for i0 := 0; i0 < l0; i0++ {
		(*(*r).UserIds)[i0] = randString()
	}
	(*r).Fields = new([]Users_Fields)
	l0 = randIntn(maxArrayLength + 1)
	*(*r).Fields = make([]Users_Fields, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomly_Users_Fields(&(*(*r).Fields)[i0])
	}
	(*r).NameCase = new(Users_Get_NameCase)
	fillRandomly_Users_Get_NameCase((*r).NameCase)
}

func TestVK_Users_Get_Success(t *testing.T) {
	values := make(url.Values, 5)
	var req Users_Get_Request
	fillRandomly_Users_Get_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Users_Get_Response
	fillRandomly_Users_Get_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "users.get", values, expectedJSON), token)
	resp, apiErr, err := vk.Users_Get(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Users_Get_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "users.get", expectedJSON), "")
	resp, apiErr, err := vk.Users_Get(context.Background(), Users_Get_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Users_Get_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Users_Get(context.Background(), Users_Get_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Users_GetFollowers_NameCase(o *Users_GetFollowers_NameCase) {
	switch randIntn(6) {
	case 0:
		*o = "nom"
	case 1:
		*o = "gen"
	case 2:
		*o = "dat"
	case 3:
		*o = "acc"
	case 4:
		*o = "ins"
	case 5:
		*o = "abl"
	}
}

func fillRandomly_Users_GetFollowers_Request(r *Users_GetFollowers_Request) {
	(*r).UserId = new(int)
	*(*r).UserId = randInt()
	(*r).Offset = new(int)
	*(*r).Offset = randInt()
	(*r).Count = new(int)
	*(*r).Count = randInt()
	(*r).Fields = new([]Users_Fields)
	l0 := randIntn(maxArrayLength + 1)
	*(*r).Fields = make([]Users_Fields, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomly_Users_Fields(&(*(*r).Fields)[i0])
	}
	(*r).NameCase = new(Users_GetFollowers_NameCase)
	fillRandomly_Users_GetFollowers_NameCase((*r).NameCase)
}

func TestVK_Users_GetFollowers_Success(t *testing.T) {
	values := make(url.Values, 7)
	var req Users_GetFollowers_Request
	fillRandomly_Users_GetFollowers_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Users_GetFollowers_Response
	fillRandomly_Users_GetFollowers_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "users.getFollowers", values, expectedJSON), token)
	resp, apiErr, err := vk.Users_GetFollowers(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Users_GetFollowers_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "users.getFollowers", expectedJSON), "")
	resp, apiErr, err := vk.Users_GetFollowers(context.Background(), Users_GetFollowers_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Users_GetFollowers_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Users_GetFollowers(context.Background(), Users_GetFollowers_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Users_GetSubscriptions_Request(r *Users_GetSubscriptions_Request) {
	(*r).UserId = new(int)
	*(*r).UserId = randInt()
	(*r).Offset = new(int)
	*(*r).Offset = randInt()
	(*r).Count = new(int)
	*(*r).Count = randInt()
	(*r).Fields = new([]Users_Fields)
	l0 := randIntn(maxArrayLength + 1)
	*(*r).Fields = make([]Users_Fields, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomly_Users_Fields(&(*(*r).Fields)[i0])
	}
}

func TestVK_Users_GetSubscriptions_Success(t *testing.T) {
	values := make(url.Values, 7)
	var req Users_GetSubscriptions_Request
	fillRandomly_Users_GetSubscriptions_Request(&req)
	require.NoError(t, req.fillIn(values))
	setString(values, "extended", "0")
	var expected Users_GetSubscriptions_Response
	fillRandomly_Users_GetSubscriptions_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "users.getSubscriptions", values, expectedJSON), token)
	resp, apiErr, err := vk.Users_GetSubscriptions(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Users_GetSubscriptions_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "users.getSubscriptions", expectedJSON), "")
	resp, apiErr, err := vk.Users_GetSubscriptions(context.Background(), Users_GetSubscriptions_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Users_GetSubscriptions_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Users_GetSubscriptions(context.Background(), Users_GetSubscriptions_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func TestVK_Users_GetSubscriptionsExtended_Success(t *testing.T) {
	values := make(url.Values, 7)
	var req Users_GetSubscriptions_Request
	fillRandomly_Users_GetSubscriptions_Request(&req)
	require.NoError(t, req.fillIn(values))
	setString(values, "extended", "1")
	var expected Users_GetSubscriptionsExtended_Response
	fillRandomly_Users_GetSubscriptionsExtended_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "users.getSubscriptions", values, expectedJSON), token)
	resp, apiErr, err := vk.Users_GetSubscriptionsExtended(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Users_GetSubscriptionsExtended_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "users.getSubscriptions", expectedJSON), "")
	resp, apiErr, err := vk.Users_GetSubscriptionsExtended(context.Background(), Users_GetSubscriptions_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Users_GetSubscriptionsExtended_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Users_GetSubscriptionsExtended(context.Background(), Users_GetSubscriptions_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Users_Report_Type(o *Users_Report_Type) {
	switch randIntn(4) {
	case 0:
		*o = "porn"
	case 1:
		*o = "spam"
	case 2:
		*o = "insult"
	case 3:
		*o = "advertisement"
	}
}

func fillRandomly_Users_Report_Request(r *Users_Report_Request) {
	(*r).UserId = randInt()
	fillRandomly_Users_Report_Type(&(*r).Type)
	(*r).Comment = new(string)
	*(*r).Comment = randString()
}

func TestVK_Users_Report_Success(t *testing.T) {
	values := make(url.Values, 5)
	var req Users_Report_Request
	fillRandomly_Users_Report_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Base_Ok_Response
	fillRandomly_Base_Ok_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "users.report", values, expectedJSON), token)
	resp, apiErr, err := vk.Users_Report(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Users_Report_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "users.report", expectedJSON), "")
	resp, apiErr, err := vk.Users_Report(context.Background(), Users_Report_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Users_Report_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Users_Report(context.Background(), Users_Report_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Users_Search_Sort(o *Users_Search_Sort) {
	switch randIntn(2) {
	case 0:
		*o = 0
	case 1:
		*o = 1
	}
}

func fillRandomly_Users_Search_Sex(o *Users_Search_Sex) {
	switch randIntn(3) {
	case 0:
		*o = 0
	case 1:
		*o = 1
	case 2:
		*o = 2
	}
}

func fillRandomly_Users_Search_Status(o *Users_Search_Status) {
	switch randIntn(8) {
	case 0:
		*o = 0
	case 1:
		*o = 1
	case 2:
		*o = 2
	case 3:
		*o = 3
	case 4:
		*o = 4
	case 5:
		*o = 5
	case 6:
		*o = 6
	case 7:
		*o = 7
	}
}

func fillRandomly_Users_Search_Request(r *Users_Search_Request) {
	(*r).Q = new(string)
	*(*r).Q = randString()
	(*r).Sort = new(Users_Search_Sort)
	fillRandomly_Users_Search_Sort((*r).Sort)
	(*r).Offset = new(int)
	*(*r).Offset = randInt()
	(*r).Count = new(int)
	*(*r).Count = randInt()
	(*r).Fields = new([]Users_Fields)
	l0 := randIntn(maxArrayLength + 1)
	*(*r).Fields = make([]Users_Fields, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomly_Users_Fields(&(*(*r).Fields)[i0])
	}
	(*r).City = new(int)
	*(*r).City = randInt()
	(*r).Country = new(int)
	*(*r).Country = randInt()
	(*r).Hometown = new(string)
	*(*r).Hometown = randString()
	(*r).UniversityCountry = new(int)
	*(*r).UniversityCountry = randInt()
	(*r).University = new(int)
	*(*r).University = randInt()
	(*r).UniversityYear = new(int)
	*(*r).UniversityYear = randInt()
	(*r).UniversityFaculty = new(int)
	*(*r).UniversityFaculty = randInt()
	(*r).UniversityChair = new(int)
	*(*r).UniversityChair = randInt()
	(*r).Sex = new(Users_Search_Sex)
	fillRandomly_Users_Search_Sex((*r).Sex)
	(*r).Status = new(Users_Search_Status)
	fillRandomly_Users_Search_Status((*r).Status)
	(*r).AgeFrom = new(int)
	*(*r).AgeFrom = randInt()
	(*r).AgeTo = new(int)
	*(*r).AgeTo = randInt()
	(*r).BirthDay = new(int)
	*(*r).BirthDay = randInt()
	(*r).BirthMonth = new(int)
	*(*r).BirthMonth = randInt()
	(*r).BirthYear = new(int)
	*(*r).BirthYear = randInt()
	(*r).Online = new(bool)
	*(*r).Online = randBool()
	(*r).HasPhoto = new(bool)
	*(*r).HasPhoto = randBool()
	(*r).SchoolCountry = new(int)
	*(*r).SchoolCountry = randInt()
	(*r).SchoolCity = new(int)
	*(*r).SchoolCity = randInt()
	(*r).SchoolClass = new(int)
	*(*r).SchoolClass = randInt()
	(*r).School = new(int)
	*(*r).School = randInt()
	(*r).SchoolYear = new(int)
	*(*r).SchoolYear = randInt()
	(*r).Religion = new(string)
	*(*r).Religion = randString()
	(*r).Company = new(string)
	*(*r).Company = randString()
	(*r).Position = new(string)
	*(*r).Position = randString()
	(*r).GroupId = new(int)
	*(*r).GroupId = randInt()
	(*r).FromList = new([]string)
	l0 = randIntn(maxArrayLength + 1)
	*(*r).FromList = make([]string, l0)
	for i0 := 0; i0 < l0; i0++ {
		(*(*r).FromList)[i0] = randString()
	}
}

func TestVK_Users_Search_Success(t *testing.T) {
	values := make(url.Values, 34)
	var req Users_Search_Request
	fillRandomly_Users_Search_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Users_Search_Response
	fillRandomly_Users_Search_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "users.search", values, expectedJSON), token)
	resp, apiErr, err := vk.Users_Search(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Users_Search_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "users.search", expectedJSON), "")
	resp, apiErr, err := vk.Users_Search(context.Background(), Users_Search_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Users_Search_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Users_Search(context.Background(), Users_Search_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Utils_CheckLink_Request(r *Utils_CheckLink_Request) {
	(*r).Url = randString()
}

func TestVK_Utils_CheckLink_Success(t *testing.T) {
	values := make(url.Values, 3)
	var req Utils_CheckLink_Request
	fillRandomly_Utils_CheckLink_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Utils_CheckLink_Response
	fillRandomly_Utils_CheckLink_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "utils.checkLink", values, expectedJSON), token)
	resp, apiErr, err := vk.Utils_CheckLink(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Utils_CheckLink_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "utils.checkLink", expectedJSON), "")
	resp, apiErr, err := vk.Utils_CheckLink(context.Background(), Utils_CheckLink_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Utils_CheckLink_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Utils_CheckLink(context.Background(), Utils_CheckLink_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Utils_DeleteFromLastShortened_Request(r *Utils_DeleteFromLastShortened_Request) {
	(*r).Key = randString()
}

func TestVK_Utils_DeleteFromLastShortened_Success(t *testing.T) {
	values := make(url.Values, 3)
	var req Utils_DeleteFromLastShortened_Request
	fillRandomly_Utils_DeleteFromLastShortened_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Base_Ok_Response
	fillRandomly_Base_Ok_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "utils.deleteFromLastShortened", values, expectedJSON), token)
	resp, apiErr, err := vk.Utils_DeleteFromLastShortened(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Utils_DeleteFromLastShortened_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "utils.deleteFromLastShortened", expectedJSON), "")
	resp, apiErr, err := vk.Utils_DeleteFromLastShortened(context.Background(), Utils_DeleteFromLastShortened_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Utils_DeleteFromLastShortened_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Utils_DeleteFromLastShortened(context.Background(), Utils_DeleteFromLastShortened_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Utils_GetLastShortenedLinks_Request(r *Utils_GetLastShortenedLinks_Request) {
	(*r).Count = new(int)
	*(*r).Count = randInt()
	(*r).Offset = new(int)
	*(*r).Offset = randInt()
}

func TestVK_Utils_GetLastShortenedLinks_Success(t *testing.T) {
	values := make(url.Values, 4)
	var req Utils_GetLastShortenedLinks_Request
	fillRandomly_Utils_GetLastShortenedLinks_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Utils_GetLastShortenedLinks_Response
	fillRandomly_Utils_GetLastShortenedLinks_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "utils.getLastShortenedLinks", values, expectedJSON), token)
	resp, apiErr, err := vk.Utils_GetLastShortenedLinks(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Utils_GetLastShortenedLinks_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "utils.getLastShortenedLinks", expectedJSON), "")
	resp, apiErr, err := vk.Utils_GetLastShortenedLinks(context.Background(), Utils_GetLastShortenedLinks_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Utils_GetLastShortenedLinks_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Utils_GetLastShortenedLinks(context.Background(), Utils_GetLastShortenedLinks_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Utils_GetLinkStats_Source(o *Utils_GetLinkStats_Source) {
	switch randIntn(2) {
	case 0:
		*o = "vk_cc"
	case 1:
		*o = "vk_link"
	}
}

func fillRandomly_Utils_GetLinkStats_Interval(o *Utils_GetLinkStats_Interval) {
	switch randIntn(5) {
	case 0:
		*o = "day"
	case 1:
		*o = "forever"
	case 2:
		*o = "hour"
	case 3:
		*o = "month"
	case 4:
		*o = "week"
	}
}

func fillRandomly_Utils_GetLinkStats_Request(r *Utils_GetLinkStats_Request) {
	(*r).Key = randString()
	(*r).Source = new(Utils_GetLinkStats_Source)
	fillRandomly_Utils_GetLinkStats_Source((*r).Source)
	(*r).AccessKey = new(string)
	*(*r).AccessKey = randString()
	(*r).Interval = new(Utils_GetLinkStats_Interval)
	fillRandomly_Utils_GetLinkStats_Interval((*r).Interval)
	(*r).IntervalsCount = new(int)
	*(*r).IntervalsCount = randInt()
}

func TestVK_Utils_GetLinkStats_Success(t *testing.T) {
	values := make(url.Values, 8)
	var req Utils_GetLinkStats_Request
	fillRandomly_Utils_GetLinkStats_Request(&req)
	require.NoError(t, req.fillIn(values))
	setString(values, "extended", "0")
	var expected Utils_GetLinkStats_Response
	fillRandomly_Utils_GetLinkStats_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "utils.getLinkStats", values, expectedJSON), token)
	resp, apiErr, err := vk.Utils_GetLinkStats(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Utils_GetLinkStats_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "utils.getLinkStats", expectedJSON), "")
	resp, apiErr, err := vk.Utils_GetLinkStats(context.Background(), Utils_GetLinkStats_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Utils_GetLinkStats_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Utils_GetLinkStats(context.Background(), Utils_GetLinkStats_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func TestVK_Utils_GetLinkStatsExtended_Success(t *testing.T) {
	values := make(url.Values, 8)
	var req Utils_GetLinkStats_Request
	fillRandomly_Utils_GetLinkStats_Request(&req)
	require.NoError(t, req.fillIn(values))
	setString(values, "extended", "1")
	var expected Utils_GetLinkStatsExtended_Response
	fillRandomly_Utils_GetLinkStatsExtended_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "utils.getLinkStats", values, expectedJSON), token)
	resp, apiErr, err := vk.Utils_GetLinkStatsExtended(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Utils_GetLinkStatsExtended_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "utils.getLinkStats", expectedJSON), "")
	resp, apiErr, err := vk.Utils_GetLinkStatsExtended(context.Background(), Utils_GetLinkStats_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Utils_GetLinkStatsExtended_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Utils_GetLinkStatsExtended(context.Background(), Utils_GetLinkStats_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func TestVK_Utils_GetServerTime_Success(t *testing.T) {
	values := make(url.Values, 2)
	var expected Utils_GetServerTime_Response
	fillRandomly_Utils_GetServerTime_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "utils.getServerTime", values, expectedJSON), token)
	resp, apiErr, err := vk.Utils_GetServerTime(context.Background())
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Utils_GetServerTime_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "utils.getServerTime", expectedJSON), "")
	resp, apiErr, err := vk.Utils_GetServerTime(context.Background())
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Utils_GetServerTime_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Utils_GetServerTime(context.Background())
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Utils_GetShortLink_Request(r *Utils_GetShortLink_Request) {
	(*r).Url = randString()
	(*r).Private = new(bool)
	*(*r).Private = randBool()
}

func TestVK_Utils_GetShortLink_Success(t *testing.T) {
	values := make(url.Values, 4)
	var req Utils_GetShortLink_Request
	fillRandomly_Utils_GetShortLink_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Utils_GetShortLink_Response
	fillRandomly_Utils_GetShortLink_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "utils.getShortLink", values, expectedJSON), token)
	resp, apiErr, err := vk.Utils_GetShortLink(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Utils_GetShortLink_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "utils.getShortLink", expectedJSON), "")
	resp, apiErr, err := vk.Utils_GetShortLink(context.Background(), Utils_GetShortLink_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Utils_GetShortLink_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Utils_GetShortLink(context.Background(), Utils_GetShortLink_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Utils_ResolveScreenName_Request(r *Utils_ResolveScreenName_Request) {
	(*r).ScreenName = randString()
}

func TestVK_Utils_ResolveScreenName_Success(t *testing.T) {
	values := make(url.Values, 3)
	var req Utils_ResolveScreenName_Request
	fillRandomly_Utils_ResolveScreenName_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Utils_ResolveScreenName_Response
	fillRandomly_Utils_ResolveScreenName_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "utils.resolveScreenName", values, expectedJSON), token)
	resp, apiErr, err := vk.Utils_ResolveScreenName(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Utils_ResolveScreenName_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "utils.resolveScreenName", expectedJSON), "")
	resp, apiErr, err := vk.Utils_ResolveScreenName(context.Background(), Utils_ResolveScreenName_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Utils_ResolveScreenName_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Utils_ResolveScreenName(context.Background(), Utils_ResolveScreenName_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Video_Add_Request(r *Video_Add_Request) {
	(*r).TargetId = new(int)
	*(*r).TargetId = randInt()
	(*r).VideoId = randInt()
	(*r).OwnerId = randInt()
}

func TestVK_Video_Add_Success(t *testing.T) {
	values := make(url.Values, 5)
	var req Video_Add_Request
	fillRandomly_Video_Add_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Base_Ok_Response
	fillRandomly_Base_Ok_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "video.add", values, expectedJSON), token)
	resp, apiErr, err := vk.Video_Add(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Video_Add_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "video.add", expectedJSON), "")
	resp, apiErr, err := vk.Video_Add(context.Background(), Video_Add_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Video_Add_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Video_Add(context.Background(), Video_Add_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Video_AddAlbum_Privacy(o *Video_AddAlbum_Privacy) {
	switch randIntn(4) {
	case 0:
		*o = "0"
	case 1:
		*o = "1"
	case 2:
		*o = "2"
	case 3:
		*o = "3"
	}
}

func fillRandomly_Video_AddAlbum_Request(r *Video_AddAlbum_Request) {
	(*r).GroupId = new(int)
	*(*r).GroupId = randInt()
	(*r).Title = new(string)
	*(*r).Title = randString()
	(*r).Privacy = new([]Video_AddAlbum_Privacy)
	l0 := randIntn(maxArrayLength + 1)
	*(*r).Privacy = make([]Video_AddAlbum_Privacy, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomly_Video_AddAlbum_Privacy(&(*(*r).Privacy)[i0])
	}
}

func TestVK_Video_AddAlbum_Success(t *testing.T) {
	values := make(url.Values, 5)
	var req Video_AddAlbum_Request
	fillRandomly_Video_AddAlbum_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Video_AddAlbum_Response
	fillRandomly_Video_AddAlbum_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "video.addAlbum", values, expectedJSON), token)
	resp, apiErr, err := vk.Video_AddAlbum(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Video_AddAlbum_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "video.addAlbum", expectedJSON), "")
	resp, apiErr, err := vk.Video_AddAlbum(context.Background(), Video_AddAlbum_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Video_AddAlbum_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Video_AddAlbum(context.Background(), Video_AddAlbum_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Video_AddToAlbum_Request(r *Video_AddToAlbum_Request) {
	(*r).TargetId = new(int)
	*(*r).TargetId = randInt()
	(*r).AlbumId = new(int)
	*(*r).AlbumId = randInt()
	(*r).AlbumIds = new([]int)
	l0 := randIntn(maxArrayLength + 1)
	*(*r).AlbumIds = make([]int, l0)
	for i0 := 0; i0 < l0; i0++ {
		(*(*r).AlbumIds)[i0] = randInt()
	}
	(*r).OwnerId = randInt()
	(*r).VideoId = randInt()
}

func TestVK_Video_AddToAlbum_Success(t *testing.T) {
	values := make(url.Values, 7)
	var req Video_AddToAlbum_Request
	fillRandomly_Video_AddToAlbum_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Base_Ok_Response
	fillRandomly_Base_Ok_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "video.addToAlbum", values, expectedJSON), token)
	resp, apiErr, err := vk.Video_AddToAlbum(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Video_AddToAlbum_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "video.addToAlbum", expectedJSON), "")
	resp, apiErr, err := vk.Video_AddToAlbum(context.Background(), Video_AddToAlbum_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Video_AddToAlbum_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Video_AddToAlbum(context.Background(), Video_AddToAlbum_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Video_CreateComment_Request(r *Video_CreateComment_Request) {
	(*r).OwnerId = new(int)
	*(*r).OwnerId = randInt()
	(*r).VideoId = randInt()
	(*r).Message = new(string)
	*(*r).Message = randString()
	(*r).Attachments = new([]string)
	l0 := randIntn(maxArrayLength + 1)
	*(*r).Attachments = make([]string, l0)
	for i0 := 0; i0 < l0; i0++ {
		(*(*r).Attachments)[i0] = randString()
	}
	(*r).FromGroup = new(bool)
	*(*r).FromGroup = randBool()
	(*r).ReplyToComment = new(int)
	*(*r).ReplyToComment = randInt()
	(*r).StickerId = new(int)
	*(*r).StickerId = randInt()
	(*r).Guid = new(string)
	*(*r).Guid = randString()
}

func TestVK_Video_CreateComment_Success(t *testing.T) {
	values := make(url.Values, 10)
	var req Video_CreateComment_Request
	fillRandomly_Video_CreateComment_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Video_CreateComment_Response
	fillRandomly_Video_CreateComment_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "video.createComment", values, expectedJSON), token)
	resp, apiErr, err := vk.Video_CreateComment(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Video_CreateComment_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "video.createComment", expectedJSON), "")
	resp, apiErr, err := vk.Video_CreateComment(context.Background(), Video_CreateComment_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Video_CreateComment_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Video_CreateComment(context.Background(), Video_CreateComment_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Video_Delete_Request(r *Video_Delete_Request) {
	(*r).VideoId = randInt()
	(*r).OwnerId = new(int)
	*(*r).OwnerId = randInt()
	(*r).TargetId = new(int)
	*(*r).TargetId = randInt()
}

func TestVK_Video_Delete_Success(t *testing.T) {
	values := make(url.Values, 5)
	var req Video_Delete_Request
	fillRandomly_Video_Delete_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Base_Ok_Response
	fillRandomly_Base_Ok_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "video.delete", values, expectedJSON), token)
	resp, apiErr, err := vk.Video_Delete(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Video_Delete_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "video.delete", expectedJSON), "")
	resp, apiErr, err := vk.Video_Delete(context.Background(), Video_Delete_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Video_Delete_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Video_Delete(context.Background(), Video_Delete_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Video_DeleteAlbum_Request(r *Video_DeleteAlbum_Request) {
	(*r).GroupId = new(int)
	*(*r).GroupId = randInt()
	(*r).AlbumId = randInt()
}

func TestVK_Video_DeleteAlbum_Success(t *testing.T) {
	values := make(url.Values, 4)
	var req Video_DeleteAlbum_Request
	fillRandomly_Video_DeleteAlbum_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Base_Ok_Response
	fillRandomly_Base_Ok_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "video.deleteAlbum", values, expectedJSON), token)
	resp, apiErr, err := vk.Video_DeleteAlbum(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Video_DeleteAlbum_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "video.deleteAlbum", expectedJSON), "")
	resp, apiErr, err := vk.Video_DeleteAlbum(context.Background(), Video_DeleteAlbum_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Video_DeleteAlbum_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Video_DeleteAlbum(context.Background(), Video_DeleteAlbum_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Video_DeleteComment_Request(r *Video_DeleteComment_Request) {
	(*r).OwnerId = new(int)
	*(*r).OwnerId = randInt()
	(*r).CommentId = randInt()
}

func TestVK_Video_DeleteComment_Success(t *testing.T) {
	values := make(url.Values, 4)
	var req Video_DeleteComment_Request
	fillRandomly_Video_DeleteComment_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Base_Ok_Response
	fillRandomly_Base_Ok_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "video.deleteComment", values, expectedJSON), token)
	resp, apiErr, err := vk.Video_DeleteComment(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Video_DeleteComment_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "video.deleteComment", expectedJSON), "")
	resp, apiErr, err := vk.Video_DeleteComment(context.Background(), Video_DeleteComment_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Video_DeleteComment_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Video_DeleteComment(context.Background(), Video_DeleteComment_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Video_Edit_Request(r *Video_Edit_Request) {
	(*r).OwnerId = new(int)
	*(*r).OwnerId = randInt()
	(*r).VideoId = randInt()
	(*r).Name = new(string)
	*(*r).Name = randString()
	(*r).Desc = new(string)
	*(*r).Desc = randString()
	(*r).PrivacyView = new([]string)
	l0 := randIntn(maxArrayLength + 1)
	*(*r).PrivacyView = make([]string, l0)
	for i0 := 0; i0 < l0; i0++ {
		(*(*r).PrivacyView)[i0] = randString()
	}
	(*r).PrivacyComment = new([]string)
	l0 = randIntn(maxArrayLength + 1)
	*(*r).PrivacyComment = make([]string, l0)
	for i0 := 0; i0 < l0; i0++ {
		(*(*r).PrivacyComment)[i0] = randString()
	}
	(*r).NoComments = new(bool)
	*(*r).NoComments = randBool()
	(*r).Repeat = new(bool)
	*(*r).Repeat = randBool()
}

func TestVK_Video_Edit_Success(t *testing.T) {
	values := make(url.Values, 10)
	var req Video_Edit_Request
	fillRandomly_Video_Edit_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Base_Ok_Response
	fillRandomly_Base_Ok_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "video.edit", values, expectedJSON), token)
	resp, apiErr, err := vk.Video_Edit(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Video_Edit_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "video.edit", expectedJSON), "")
	resp, apiErr, err := vk.Video_Edit(context.Background(), Video_Edit_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Video_Edit_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Video_Edit(context.Background(), Video_Edit_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Video_EditAlbum_Privacy(o *Video_EditAlbum_Privacy) {
	switch randIntn(4) {
	case 0:
		*o = "0"
	case 1:
		*o = "1"
	case 2:
		*o = "2"
	case 3:
		*o = "3"
	}
}

func fillRandomly_Video_EditAlbum_Request(r *Video_EditAlbum_Request) {
	(*r).GroupId = new(int)
	*(*r).GroupId = randInt()
	(*r).AlbumId = randInt()
	(*r).Title = randString()
	(*r).Privacy = new([]Video_EditAlbum_Privacy)
	l0 := randIntn(maxArrayLength + 1)
	*(*r).Privacy = make([]Video_EditAlbum_Privacy, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomly_Video_EditAlbum_Privacy(&(*(*r).Privacy)[i0])
	}
}

func TestVK_Video_EditAlbum_Success(t *testing.T) {
	values := make(url.Values, 6)
	var req Video_EditAlbum_Request
	fillRandomly_Video_EditAlbum_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Base_Ok_Response
	fillRandomly_Base_Ok_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "video.editAlbum", values, expectedJSON), token)
	resp, apiErr, err := vk.Video_EditAlbum(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Video_EditAlbum_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "video.editAlbum", expectedJSON), "")
	resp, apiErr, err := vk.Video_EditAlbum(context.Background(), Video_EditAlbum_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Video_EditAlbum_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Video_EditAlbum(context.Background(), Video_EditAlbum_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Video_EditComment_Request(r *Video_EditComment_Request) {
	(*r).OwnerId = new(int)
	*(*r).OwnerId = randInt()
	(*r).CommentId = randInt()
	(*r).Message = new(string)
	*(*r).Message = randString()
	(*r).Attachments = new([]string)
	l0 := randIntn(maxArrayLength + 1)
	*(*r).Attachments = make([]string, l0)
	for i0 := 0; i0 < l0; i0++ {
		(*(*r).Attachments)[i0] = randString()
	}
}

func TestVK_Video_EditComment_Success(t *testing.T) {
	values := make(url.Values, 6)
	var req Video_EditComment_Request
	fillRandomly_Video_EditComment_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Base_Ok_Response
	fillRandomly_Base_Ok_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "video.editComment", values, expectedJSON), token)
	resp, apiErr, err := vk.Video_EditComment(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Video_EditComment_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "video.editComment", expectedJSON), "")
	resp, apiErr, err := vk.Video_EditComment(context.Background(), Video_EditComment_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Video_EditComment_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Video_EditComment(context.Background(), Video_EditComment_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Video_Get_Request(r *Video_Get_Request) {
	(*r).OwnerId = new(int)
	*(*r).OwnerId = randInt()
	(*r).Videos = new([]string)
	l0 := randIntn(maxArrayLength + 1)
	*(*r).Videos = make([]string, l0)
	for i0 := 0; i0 < l0; i0++ {
		(*(*r).Videos)[i0] = randString()
	}
	(*r).AlbumId = new(int)
	*(*r).AlbumId = randInt()
	(*r).Count = new(int)
	*(*r).Count = randInt()
	(*r).Offset = new(int)
	*(*r).Offset = randInt()
	(*r).Extended = new(bool)
	*(*r).Extended = randBool()
	(*r).Fields = new([]string)
	l0 = randIntn(maxArrayLength + 1)
	*(*r).Fields = make([]string, l0)
	for i0 := 0; i0 < l0; i0++ {
		(*(*r).Fields)[i0] = randString()
	}
}

func TestVK_Video_Get_Success(t *testing.T) {
	values := make(url.Values, 9)
	var req Video_Get_Request
	fillRandomly_Video_Get_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Video_Get_Response
	fillRandomly_Video_Get_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "video.get", values, expectedJSON), token)
	resp, apiErr, err := vk.Video_Get(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Video_Get_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "video.get", expectedJSON), "")
	resp, apiErr, err := vk.Video_Get(context.Background(), Video_Get_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Video_Get_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Video_Get(context.Background(), Video_Get_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Video_GetAlbumById_Request(r *Video_GetAlbumById_Request) {
	(*r).OwnerId = new(int)
	*(*r).OwnerId = randInt()
	(*r).AlbumId = randInt()
}

func TestVK_Video_GetAlbumById_Success(t *testing.T) {
	values := make(url.Values, 4)
	var req Video_GetAlbumById_Request
	fillRandomly_Video_GetAlbumById_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Video_GetAlbumById_Response
	fillRandomly_Video_GetAlbumById_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "video.getAlbumById", values, expectedJSON), token)
	resp, apiErr, err := vk.Video_GetAlbumById(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Video_GetAlbumById_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "video.getAlbumById", expectedJSON), "")
	resp, apiErr, err := vk.Video_GetAlbumById(context.Background(), Video_GetAlbumById_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Video_GetAlbumById_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Video_GetAlbumById(context.Background(), Video_GetAlbumById_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Video_GetAlbums_Request(r *Video_GetAlbums_Request) {
	(*r).OwnerId = new(int)
	*(*r).OwnerId = randInt()
	(*r).Offset = new(int)
	*(*r).Offset = randInt()
	(*r).Count = new(int)
	*(*r).Count = randInt()
	(*r).NeedSystem = new(bool)
	*(*r).NeedSystem = randBool()
}

func TestVK_Video_GetAlbums_Success(t *testing.T) {
	values := make(url.Values, 7)
	var req Video_GetAlbums_Request
	fillRandomly_Video_GetAlbums_Request(&req)
	require.NoError(t, req.fillIn(values))
	setString(values, "extended", "0")
	var expected Video_GetAlbums_Response
	fillRandomly_Video_GetAlbums_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "video.getAlbums", values, expectedJSON), token)
	resp, apiErr, err := vk.Video_GetAlbums(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Video_GetAlbums_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "video.getAlbums", expectedJSON), "")
	resp, apiErr, err := vk.Video_GetAlbums(context.Background(), Video_GetAlbums_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Video_GetAlbums_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Video_GetAlbums(context.Background(), Video_GetAlbums_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func TestVK_Video_GetAlbumsExtended_Success(t *testing.T) {
	values := make(url.Values, 7)
	var req Video_GetAlbums_Request
	fillRandomly_Video_GetAlbums_Request(&req)
	require.NoError(t, req.fillIn(values))
	setString(values, "extended", "1")
	var expected Video_GetAlbumsExtended_Response
	fillRandomly_Video_GetAlbumsExtended_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "video.getAlbums", values, expectedJSON), token)
	resp, apiErr, err := vk.Video_GetAlbumsExtended(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Video_GetAlbumsExtended_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "video.getAlbums", expectedJSON), "")
	resp, apiErr, err := vk.Video_GetAlbumsExtended(context.Background(), Video_GetAlbums_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Video_GetAlbumsExtended_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Video_GetAlbumsExtended(context.Background(), Video_GetAlbums_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Video_GetAlbumsByVideo_Request(r *Video_GetAlbumsByVideo_Request) {
	(*r).TargetId = new(int)
	*(*r).TargetId = randInt()
	(*r).OwnerId = randInt()
	(*r).VideoId = randInt()
}

func TestVK_Video_GetAlbumsByVideo_Success(t *testing.T) {
	values := make(url.Values, 6)
	var req Video_GetAlbumsByVideo_Request
	fillRandomly_Video_GetAlbumsByVideo_Request(&req)
	require.NoError(t, req.fillIn(values))
	setString(values, "extended", "0")
	var expected Video_GetAlbumsByVideo_Response
	fillRandomly_Video_GetAlbumsByVideo_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "video.getAlbumsByVideo", values, expectedJSON), token)
	resp, apiErr, err := vk.Video_GetAlbumsByVideo(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Video_GetAlbumsByVideo_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "video.getAlbumsByVideo", expectedJSON), "")
	resp, apiErr, err := vk.Video_GetAlbumsByVideo(context.Background(), Video_GetAlbumsByVideo_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Video_GetAlbumsByVideo_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Video_GetAlbumsByVideo(context.Background(), Video_GetAlbumsByVideo_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func TestVK_Video_GetAlbumsByVideoExtended_Success(t *testing.T) {
	values := make(url.Values, 6)
	var req Video_GetAlbumsByVideo_Request
	fillRandomly_Video_GetAlbumsByVideo_Request(&req)
	require.NoError(t, req.fillIn(values))
	setString(values, "extended", "1")
	var expected Video_GetAlbumsByVideoExtended_Response
	fillRandomly_Video_GetAlbumsByVideoExtended_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "video.getAlbumsByVideo", values, expectedJSON), token)
	resp, apiErr, err := vk.Video_GetAlbumsByVideoExtended(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Video_GetAlbumsByVideoExtended_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "video.getAlbumsByVideo", expectedJSON), "")
	resp, apiErr, err := vk.Video_GetAlbumsByVideoExtended(context.Background(), Video_GetAlbumsByVideo_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Video_GetAlbumsByVideoExtended_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Video_GetAlbumsByVideoExtended(context.Background(), Video_GetAlbumsByVideo_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Video_GetComments_Sort(o *Video_GetComments_Sort) {
	switch randIntn(2) {
	case 0:
		*o = "asc"
	case 1:
		*o = "desc"
	}
}

func fillRandomly_Video_GetComments_Request(r *Video_GetComments_Request) {
	(*r).OwnerId = new(int)
	*(*r).OwnerId = randInt()
	(*r).VideoId = randInt()
	(*r).NeedLikes = new(bool)
	*(*r).NeedLikes = randBool()
	(*r).StartCommentId = new(int)
	*(*r).StartCommentId = randInt()
	(*r).Offset = new(int)
	*(*r).Offset = randInt()
	(*r).Count = new(int)
	*(*r).Count = randInt()
	(*r).Sort = new(Video_GetComments_Sort)
	fillRandomly_Video_GetComments_Sort((*r).Sort)
	(*r).Fields = new([]string)
	l0 := randIntn(maxArrayLength + 1)
	*(*r).Fields = make([]string, l0)
	for i0 := 0; i0 < l0; i0++ {
		(*(*r).Fields)[i0] = randString()
	}
}

func TestVK_Video_GetComments_Success(t *testing.T) {
	values := make(url.Values, 11)
	var req Video_GetComments_Request
	fillRandomly_Video_GetComments_Request(&req)
	require.NoError(t, req.fillIn(values))
	setString(values, "extended", "0")
	var expected Video_GetComments_Response
	fillRandomly_Video_GetComments_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "video.getComments", values, expectedJSON), token)
	resp, apiErr, err := vk.Video_GetComments(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Video_GetComments_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "video.getComments", expectedJSON), "")
	resp, apiErr, err := vk.Video_GetComments(context.Background(), Video_GetComments_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Video_GetComments_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Video_GetComments(context.Background(), Video_GetComments_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func TestVK_Video_GetCommentsExtended_Success(t *testing.T) {
	values := make(url.Values, 11)
	var req Video_GetComments_Request
	fillRandomly_Video_GetComments_Request(&req)
	require.NoError(t, req.fillIn(values))
	setString(values, "extended", "1")
	var expected Video_GetCommentsExtended_Response
	fillRandomly_Video_GetCommentsExtended_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "video.getComments", values, expectedJSON), token)
	resp, apiErr, err := vk.Video_GetCommentsExtended(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Video_GetCommentsExtended_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "video.getComments", expectedJSON), "")
	resp, apiErr, err := vk.Video_GetCommentsExtended(context.Background(), Video_GetComments_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Video_GetCommentsExtended_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Video_GetCommentsExtended(context.Background(), Video_GetComments_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Video_RemoveFromAlbum_Request(r *Video_RemoveFromAlbum_Request) {
	(*r).TargetId = new(int)
	*(*r).TargetId = randInt()
	(*r).AlbumId = new(int)
	*(*r).AlbumId = randInt()
	(*r).AlbumIds = new([]int)
	l0 := randIntn(maxArrayLength + 1)
	*(*r).AlbumIds = make([]int, l0)
	for i0 := 0; i0 < l0; i0++ {
		(*(*r).AlbumIds)[i0] = randInt()
	}
	(*r).OwnerId = randInt()
	(*r).VideoId = randInt()
}

func TestVK_Video_RemoveFromAlbum_Success(t *testing.T) {
	values := make(url.Values, 7)
	var req Video_RemoveFromAlbum_Request
	fillRandomly_Video_RemoveFromAlbum_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Base_Ok_Response
	fillRandomly_Base_Ok_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "video.removeFromAlbum", values, expectedJSON), token)
	resp, apiErr, err := vk.Video_RemoveFromAlbum(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Video_RemoveFromAlbum_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "video.removeFromAlbum", expectedJSON), "")
	resp, apiErr, err := vk.Video_RemoveFromAlbum(context.Background(), Video_RemoveFromAlbum_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Video_RemoveFromAlbum_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Video_RemoveFromAlbum(context.Background(), Video_RemoveFromAlbum_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Video_ReorderAlbums_Request(r *Video_ReorderAlbums_Request) {
	(*r).OwnerId = new(int)
	*(*r).OwnerId = randInt()
	(*r).AlbumId = randInt()
	(*r).Before = new(int)
	*(*r).Before = randInt()
	(*r).After = new(int)
	*(*r).After = randInt()
}

func TestVK_Video_ReorderAlbums_Success(t *testing.T) {
	values := make(url.Values, 6)
	var req Video_ReorderAlbums_Request
	fillRandomly_Video_ReorderAlbums_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Base_Ok_Response
	fillRandomly_Base_Ok_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "video.reorderAlbums", values, expectedJSON), token)
	resp, apiErr, err := vk.Video_ReorderAlbums(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Video_ReorderAlbums_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "video.reorderAlbums", expectedJSON), "")
	resp, apiErr, err := vk.Video_ReorderAlbums(context.Background(), Video_ReorderAlbums_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Video_ReorderAlbums_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Video_ReorderAlbums(context.Background(), Video_ReorderAlbums_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Video_ReorderVideos_Request(r *Video_ReorderVideos_Request) {
	(*r).TargetId = new(int)
	*(*r).TargetId = randInt()
	(*r).AlbumId = new(int)
	*(*r).AlbumId = randInt()
	(*r).OwnerId = randInt()
	(*r).VideoId = randInt()
	(*r).BeforeOwnerId = new(int)
	*(*r).BeforeOwnerId = randInt()
	(*r).BeforeVideoId = new(int)
	*(*r).BeforeVideoId = randInt()
	(*r).AfterOwnerId = new(int)
	*(*r).AfterOwnerId = randInt()
	(*r).AfterVideoId = new(int)
	*(*r).AfterVideoId = randInt()
}

func TestVK_Video_ReorderVideos_Success(t *testing.T) {
	values := make(url.Values, 10)
	var req Video_ReorderVideos_Request
	fillRandomly_Video_ReorderVideos_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Base_Ok_Response
	fillRandomly_Base_Ok_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "video.reorderVideos", values, expectedJSON), token)
	resp, apiErr, err := vk.Video_ReorderVideos(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Video_ReorderVideos_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "video.reorderVideos", expectedJSON), "")
	resp, apiErr, err := vk.Video_ReorderVideos(context.Background(), Video_ReorderVideos_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Video_ReorderVideos_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Video_ReorderVideos(context.Background(), Video_ReorderVideos_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Video_Report_Reason(o *Video_Report_Reason) {
	switch randIntn(7) {
	case 0:
		*o = 0
	case 1:
		*o = 1
	case 2:
		*o = 2
	case 3:
		*o = 3
	case 4:
		*o = 4
	case 5:
		*o = 5
	case 6:
		*o = 6
	}
}

func fillRandomly_Video_Report_Request(r *Video_Report_Request) {
	(*r).OwnerId = randInt()
	(*r).VideoId = randInt()
	(*r).Reason = new(Video_Report_Reason)
	fillRandomly_Video_Report_Reason((*r).Reason)
	(*r).Comment = new(string)
	*(*r).Comment = randString()
	(*r).SearchQuery = new(string)
	*(*r).SearchQuery = randString()
}

func TestVK_Video_Report_Success(t *testing.T) {
	values := make(url.Values, 7)
	var req Video_Report_Request
	fillRandomly_Video_Report_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Base_Ok_Response
	fillRandomly_Base_Ok_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "video.report", values, expectedJSON), token)
	resp, apiErr, err := vk.Video_Report(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Video_Report_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "video.report", expectedJSON), "")
	resp, apiErr, err := vk.Video_Report(context.Background(), Video_Report_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Video_Report_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Video_Report(context.Background(), Video_Report_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Video_ReportComment_Reason(o *Video_ReportComment_Reason) {
	switch randIntn(7) {
	case 0:
		*o = 0
	case 1:
		*o = 1
	case 2:
		*o = 2
	case 3:
		*o = 3
	case 4:
		*o = 4
	case 5:
		*o = 5
	case 6:
		*o = 6
	}
}

func fillRandomly_Video_ReportComment_Request(r *Video_ReportComment_Request) {
	(*r).OwnerId = randInt()
	(*r).CommentId = randInt()
	(*r).Reason = new(Video_ReportComment_Reason)
	fillRandomly_Video_ReportComment_Reason((*r).Reason)
}

func TestVK_Video_ReportComment_Success(t *testing.T) {
	values := make(url.Values, 5)
	var req Video_ReportComment_Request
	fillRandomly_Video_ReportComment_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Base_Ok_Response
	fillRandomly_Base_Ok_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "video.reportComment", values, expectedJSON), token)
	resp, apiErr, err := vk.Video_ReportComment(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Video_ReportComment_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "video.reportComment", expectedJSON), "")
	resp, apiErr, err := vk.Video_ReportComment(context.Background(), Video_ReportComment_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Video_ReportComment_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Video_ReportComment(context.Background(), Video_ReportComment_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Video_Restore_Request(r *Video_Restore_Request) {
	(*r).VideoId = randInt()
	(*r).OwnerId = new(int)
	*(*r).OwnerId = randInt()
}

func TestVK_Video_Restore_Success(t *testing.T) {
	values := make(url.Values, 4)
	var req Video_Restore_Request
	fillRandomly_Video_Restore_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Base_Ok_Response
	fillRandomly_Base_Ok_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "video.restore", values, expectedJSON), token)
	resp, apiErr, err := vk.Video_Restore(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Video_Restore_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "video.restore", expectedJSON), "")
	resp, apiErr, err := vk.Video_Restore(context.Background(), Video_Restore_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Video_Restore_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Video_Restore(context.Background(), Video_Restore_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Video_RestoreComment_Request(r *Video_RestoreComment_Request) {
	(*r).OwnerId = new(int)
	*(*r).OwnerId = randInt()
	(*r).CommentId = randInt()
}

func TestVK_Video_RestoreComment_Success(t *testing.T) {
	values := make(url.Values, 4)
	var req Video_RestoreComment_Request
	fillRandomly_Video_RestoreComment_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Video_RestoreComment_Response
	fillRandomly_Video_RestoreComment_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "video.restoreComment", values, expectedJSON), token)
	resp, apiErr, err := vk.Video_RestoreComment(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Video_RestoreComment_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "video.restoreComment", expectedJSON), "")
	resp, apiErr, err := vk.Video_RestoreComment(context.Background(), Video_RestoreComment_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Video_RestoreComment_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Video_RestoreComment(context.Background(), Video_RestoreComment_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Video_Save_Request(r *Video_Save_Request) {
	(*r).Name = new(string)
	*(*r).Name = randString()
	(*r).Description = new(string)
	*(*r).Description = randString()
	(*r).IsPrivate = new(bool)
	*(*r).IsPrivate = randBool()
	(*r).Wallpost = new(bool)
	*(*r).Wallpost = randBool()
	(*r).Link = new(string)
	*(*r).Link = randString()
	(*r).GroupId = new(int)
	*(*r).GroupId = randInt()
	(*r).AlbumId = new(int)
	*(*r).AlbumId = randInt()
	(*r).PrivacyView = new([]string)
	l0 := randIntn(maxArrayLength + 1)
	*(*r).PrivacyView = make([]string, l0)
	for i0 := 0; i0 < l0; i0++ {
		(*(*r).PrivacyView)[i0] = randString()
	}
	(*r).PrivacyComment = new([]string)
	l0 = randIntn(maxArrayLength + 1)
	*(*r).PrivacyComment = make([]string, l0)
	for i0 := 0; i0 < l0; i0++ {
		(*(*r).PrivacyComment)[i0] = randString()
	}
	(*r).NoComments = new(bool)
	*(*r).NoComments = randBool()
	(*r).Repeat = new(bool)
	*(*r).Repeat = randBool()
	(*r).Compression = new(bool)
	*(*r).Compression = randBool()
}

func TestVK_Video_Save_Success(t *testing.T) {
	values := make(url.Values, 14)
	var req Video_Save_Request
	fillRandomly_Video_Save_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Video_Save_Response
	fillRandomly_Video_Save_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "video.save", values, expectedJSON), token)
	resp, apiErr, err := vk.Video_Save(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Video_Save_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "video.save", expectedJSON), "")
	resp, apiErr, err := vk.Video_Save(context.Background(), Video_Save_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Video_Save_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Video_Save(context.Background(), Video_Save_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Video_Search_Sort(o *Video_Search_Sort) {
	switch randIntn(3) {
	case 0:
		*o = 1
	case 1:
		*o = 2
	case 2:
		*o = 0
	}
}

func fillRandomly_Video_Search_Filters(o *Video_Search_Filters) {
	switch randIntn(4) {
	case 0:
		*o = "youtube"
	case 1:
		*o = "vimeo"
	case 2:
		*o = "short"
	case 3:
		*o = "long"
	}
}

func fillRandomly_Video_Search_Request(r *Video_Search_Request) {
	(*r).Q = new(string)
	*(*r).Q = randString()
	(*r).Sort = new(Video_Search_Sort)
	fillRandomly_Video_Search_Sort((*r).Sort)
	(*r).Hd = new(int)
	*(*r).Hd = randInt()
	(*r).Adult = new(bool)
	*(*r).Adult = randBool()
	(*r).Live = new(bool)
	*(*r).Live = randBool()
	(*r).Filters = new([]Video_Search_Filters)
	l0 := randIntn(maxArrayLength + 1)
	*(*r).Filters = make([]Video_Search_Filters, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomly_Video_Search_Filters(&(*(*r).Filters)[i0])
	}
	(*r).SearchOwn = new(bool)
	*(*r).SearchOwn = randBool()
	(*r).Offset = new(int)
	*(*r).Offset = randInt()
	(*r).Longer = new(int)
	*(*r).Longer = randInt()
	(*r).Shorter = new(int)
	*(*r).Shorter = randInt()
	(*r).Count = new(int)
	*(*r).Count = randInt()
}

func TestVK_Video_Search_Success(t *testing.T) {
	values := make(url.Values, 14)
	var req Video_Search_Request
	fillRandomly_Video_Search_Request(&req)
	require.NoError(t, req.fillIn(values))
	setString(values, "extended", "0")
	var expected Video_Search_Response
	fillRandomly_Video_Search_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "video.search", values, expectedJSON), token)
	resp, apiErr, err := vk.Video_Search(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Video_Search_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "video.search", expectedJSON), "")
	resp, apiErr, err := vk.Video_Search(context.Background(), Video_Search_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Video_Search_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Video_Search(context.Background(), Video_Search_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func TestVK_Video_SearchExtended_Success(t *testing.T) {
	values := make(url.Values, 14)
	var req Video_Search_Request
	fillRandomly_Video_Search_Request(&req)
	require.NoError(t, req.fillIn(values))
	setString(values, "extended", "1")
	var expected Video_SearchExtended_Response
	fillRandomly_Video_SearchExtended_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "video.search", values, expectedJSON), token)
	resp, apiErr, err := vk.Video_SearchExtended(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Video_SearchExtended_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "video.search", expectedJSON), "")
	resp, apiErr, err := vk.Video_SearchExtended(context.Background(), Video_Search_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Video_SearchExtended_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Video_SearchExtended(context.Background(), Video_Search_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Wall_CheckCopyrightLink_Request(r *Wall_CheckCopyrightLink_Request) {
	(*r).Link = randString()
}

func TestVK_Wall_CheckCopyrightLink_Success(t *testing.T) {
	values := make(url.Values, 3)
	var req Wall_CheckCopyrightLink_Request
	fillRandomly_Wall_CheckCopyrightLink_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Base_Bool_Response
	fillRandomly_Base_Bool_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "wall.checkCopyrightLink", values, expectedJSON), token)
	resp, apiErr, err := vk.Wall_CheckCopyrightLink(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Wall_CheckCopyrightLink_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "wall.checkCopyrightLink", expectedJSON), "")
	resp, apiErr, err := vk.Wall_CheckCopyrightLink(context.Background(), Wall_CheckCopyrightLink_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Wall_CheckCopyrightLink_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Wall_CheckCopyrightLink(context.Background(), Wall_CheckCopyrightLink_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Wall_CloseComments_Request(r *Wall_CloseComments_Request) {
	(*r).OwnerId = randInt()
	(*r).PostId = randInt()
}

func TestVK_Wall_CloseComments_Success(t *testing.T) {
	values := make(url.Values, 4)
	var req Wall_CloseComments_Request
	fillRandomly_Wall_CloseComments_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Base_Bool_Response
	fillRandomly_Base_Bool_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "wall.closeComments", values, expectedJSON), token)
	resp, apiErr, err := vk.Wall_CloseComments(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Wall_CloseComments_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "wall.closeComments", expectedJSON), "")
	resp, apiErr, err := vk.Wall_CloseComments(context.Background(), Wall_CloseComments_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Wall_CloseComments_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Wall_CloseComments(context.Background(), Wall_CloseComments_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Wall_CreateComment_Request(r *Wall_CreateComment_Request) {
	(*r).OwnerId = new(int)
	*(*r).OwnerId = randInt()
	(*r).PostId = randInt()
	(*r).FromGroup = new(int)
	*(*r).FromGroup = randInt()
	(*r).Message = new(string)
	*(*r).Message = randString()
	(*r).ReplyToComment = new(int)
	*(*r).ReplyToComment = randInt()
	(*r).Attachments = new([]string)
	l0 := randIntn(maxArrayLength + 1)
	*(*r).Attachments = make([]string, l0)
	for i0 := 0; i0 < l0; i0++ {
		(*(*r).Attachments)[i0] = randString()
	}
	(*r).StickerId = new(int)
	*(*r).StickerId = randInt()
	(*r).Guid = new(string)
	*(*r).Guid = randString()
}

func TestVK_Wall_CreateComment_Success(t *testing.T) {
	values := make(url.Values, 10)
	var req Wall_CreateComment_Request
	fillRandomly_Wall_CreateComment_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Wall_CreateComment_Response
	fillRandomly_Wall_CreateComment_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "wall.createComment", values, expectedJSON), token)
	resp, apiErr, err := vk.Wall_CreateComment(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Wall_CreateComment_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "wall.createComment", expectedJSON), "")
	resp, apiErr, err := vk.Wall_CreateComment(context.Background(), Wall_CreateComment_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Wall_CreateComment_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Wall_CreateComment(context.Background(), Wall_CreateComment_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Wall_Delete_Request(r *Wall_Delete_Request) {
	(*r).OwnerId = new(int)
	*(*r).OwnerId = randInt()
	(*r).PostId = new(int)
	*(*r).PostId = randInt()
}

func TestVK_Wall_Delete_Success(t *testing.T) {
	values := make(url.Values, 4)
	var req Wall_Delete_Request
	fillRandomly_Wall_Delete_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Base_Ok_Response
	fillRandomly_Base_Ok_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "wall.delete", values, expectedJSON), token)
	resp, apiErr, err := vk.Wall_Delete(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Wall_Delete_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "wall.delete", expectedJSON), "")
	resp, apiErr, err := vk.Wall_Delete(context.Background(), Wall_Delete_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Wall_Delete_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Wall_Delete(context.Background(), Wall_Delete_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Wall_DeleteComment_Request(r *Wall_DeleteComment_Request) {
	(*r).OwnerId = new(int)
	*(*r).OwnerId = randInt()
	(*r).CommentId = randInt()
}

func TestVK_Wall_DeleteComment_Success(t *testing.T) {
	values := make(url.Values, 4)
	var req Wall_DeleteComment_Request
	fillRandomly_Wall_DeleteComment_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Base_Ok_Response
	fillRandomly_Base_Ok_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "wall.deleteComment", values, expectedJSON), token)
	resp, apiErr, err := vk.Wall_DeleteComment(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Wall_DeleteComment_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "wall.deleteComment", expectedJSON), "")
	resp, apiErr, err := vk.Wall_DeleteComment(context.Background(), Wall_DeleteComment_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Wall_DeleteComment_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Wall_DeleteComment(context.Background(), Wall_DeleteComment_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Wall_Edit_TopicId(o *Wall_Edit_TopicId) {
	switch randIntn(12) {
	case 0:
		*o = 0
	case 1:
		*o = 1
	case 2:
		*o = 7
	case 3:
		*o = 12
	case 4:
		*o = 16
	case 5:
		*o = 19
	case 6:
		*o = 21
	case 7:
		*o = 23
	case 8:
		*o = 25
	case 9:
		*o = 26
	case 10:
		*o = 32
	case 11:
		*o = 43
	}
}

func fillRandomly_Wall_Edit_Request(r *Wall_Edit_Request) {
	(*r).OwnerId = new(int)
	*(*r).OwnerId = randInt()
	(*r).PostId = randInt()
	(*r).FriendsOnly = new(bool)
	*(*r).FriendsOnly = randBool()
	(*r).Message = new(string)
	*(*r).Message = randString()
	(*r).Attachments = new([]string)
	l0 := randIntn(maxArrayLength + 1)
	*(*r).Attachments = make([]string, l0)
	for i0 := 0; i0 < l0; i0++ {
		(*(*r).Attachments)[i0] = randString()
	}
	(*r).Services = new(string)
	*(*r).Services = randString()
	(*r).Signed = new(bool)
	*(*r).Signed = randBool()
	(*r).PublishDate = new(int)
	*(*r).PublishDate = randInt()
	(*r).Lat = new(float64)
	*(*r).Lat = randFloat()
	(*r).Long = new(float64)
	*(*r).Long = randFloat()
	(*r).PlaceId = new(int)
	*(*r).PlaceId = randInt()
	(*r).MarkAsAds = new(bool)
	*(*r).MarkAsAds = randBool()
	(*r).CloseComments = new(bool)
	*(*r).CloseComments = randBool()
	(*r).DonutPaidDuration = new(int)
	*(*r).DonutPaidDuration = randInt()
	(*r).PosterBkgId = new(int)
	*(*r).PosterBkgId = randInt()
	(*r).PosterBkgOwnerId = new(int)
	*(*r).PosterBkgOwnerId = randInt()
	(*r).PosterBkgAccessHash = new(string)
	*(*r).PosterBkgAccessHash = randString()
	(*r).Copyright = new(string)
	*(*r).Copyright = randString()
	(*r).TopicId = new(Wall_Edit_TopicId)
	fillRandomly_Wall_Edit_TopicId((*r).TopicId)
}

func TestVK_Wall_Edit_Success(t *testing.T) {
	values := make(url.Values, 21)
	var req Wall_Edit_Request
	fillRandomly_Wall_Edit_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Wall_Edit_Response
	fillRandomly_Wall_Edit_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "wall.edit", values, expectedJSON), token)
	resp, apiErr, err := vk.Wall_Edit(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Wall_Edit_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "wall.edit", expectedJSON), "")
	resp, apiErr, err := vk.Wall_Edit(context.Background(), Wall_Edit_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Wall_Edit_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Wall_Edit(context.Background(), Wall_Edit_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Wall_EditAdsStealth_Request(r *Wall_EditAdsStealth_Request) {
	(*r).OwnerId = new(int)
	*(*r).OwnerId = randInt()
	(*r).PostId = randInt()
	(*r).Message = new(string)
	*(*r).Message = randString()
	(*r).Attachments = new([]string)
	l0 := randIntn(maxArrayLength + 1)
	*(*r).Attachments = make([]string, l0)
	for i0 := 0; i0 < l0; i0++ {
		(*(*r).Attachments)[i0] = randString()
	}
	(*r).Signed = new(bool)
	*(*r).Signed = randBool()
	(*r).Lat = new(float64)
	*(*r).Lat = randFloat()
	(*r).Long = new(float64)
	*(*r).Long = randFloat()
	(*r).PlaceId = new(int)
	*(*r).PlaceId = randInt()
	(*r).LinkButton = new(string)
	*(*r).LinkButton = randString()
	(*r).LinkTitle = new(string)
	*(*r).LinkTitle = randString()
	(*r).LinkImage = new(string)
	*(*r).LinkImage = randString()
	(*r).LinkVideo = new(string)
	*(*r).LinkVideo = randString()
}

func TestVK_Wall_EditAdsStealth_Success(t *testing.T) {
	values := make(url.Values, 14)
	var req Wall_EditAdsStealth_Request
	fillRandomly_Wall_EditAdsStealth_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Base_Ok_Response
	fillRandomly_Base_Ok_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "wall.editAdsStealth", values, expectedJSON), token)
	resp, apiErr, err := vk.Wall_EditAdsStealth(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Wall_EditAdsStealth_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "wall.editAdsStealth", expectedJSON), "")
	resp, apiErr, err := vk.Wall_EditAdsStealth(context.Background(), Wall_EditAdsStealth_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Wall_EditAdsStealth_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Wall_EditAdsStealth(context.Background(), Wall_EditAdsStealth_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Wall_EditComment_Request(r *Wall_EditComment_Request) {
	(*r).OwnerId = new(int)
	*(*r).OwnerId = randInt()
	(*r).CommentId = randInt()
	(*r).Message = new(string)
	*(*r).Message = randString()
	(*r).Attachments = new([]string)
	l0 := randIntn(maxArrayLength + 1)
	*(*r).Attachments = make([]string, l0)
	for i0 := 0; i0 < l0; i0++ {
		(*(*r).Attachments)[i0] = randString()
	}
}

func TestVK_Wall_EditComment_Success(t *testing.T) {
	values := make(url.Values, 6)
	var req Wall_EditComment_Request
	fillRandomly_Wall_EditComment_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Base_Ok_Response
	fillRandomly_Base_Ok_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "wall.editComment", values, expectedJSON), token)
	resp, apiErr, err := vk.Wall_EditComment(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Wall_EditComment_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "wall.editComment", expectedJSON), "")
	resp, apiErr, err := vk.Wall_EditComment(context.Background(), Wall_EditComment_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Wall_EditComment_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Wall_EditComment(context.Background(), Wall_EditComment_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Wall_Get_Request(r *Wall_Get_Request) {
	(*r).OwnerId = new(int)
	*(*r).OwnerId = randInt()
	(*r).Domain = new(string)
	*(*r).Domain = randString()
	(*r).Offset = new(int)
	*(*r).Offset = randInt()
	(*r).Count = new(int)
	*(*r).Count = randInt()
	(*r).Filter = new(Wall_GetFilter)
	fillRandomly_Wall_GetFilter((*r).Filter)
	(*r).Fields = new([]Base_UserGroupFields)
	l0 := randIntn(maxArrayLength + 1)
	*(*r).Fields = make([]Base_UserGroupFields, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomly_Base_UserGroupFields(&(*(*r).Fields)[i0])
	}
}

func TestVK_Wall_Get_Success(t *testing.T) {
	values := make(url.Values, 9)
	var req Wall_Get_Request
	fillRandomly_Wall_Get_Request(&req)
	require.NoError(t, req.fillIn(values))
	setString(values, "extended", "0")
	var expected Wall_Get_Response
	fillRandomly_Wall_Get_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "wall.get", values, expectedJSON), token)
	resp, apiErr, err := vk.Wall_Get(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Wall_Get_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "wall.get", expectedJSON), "")
	resp, apiErr, err := vk.Wall_Get(context.Background(), Wall_Get_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Wall_Get_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Wall_Get(context.Background(), Wall_Get_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func TestVK_Wall_GetExtended_Success(t *testing.T) {
	values := make(url.Values, 9)
	var req Wall_Get_Request
	fillRandomly_Wall_Get_Request(&req)
	require.NoError(t, req.fillIn(values))
	setString(values, "extended", "1")
	var expected Wall_GetExtended_Response
	fillRandomly_Wall_GetExtended_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "wall.get", values, expectedJSON), token)
	resp, apiErr, err := vk.Wall_GetExtended(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Wall_GetExtended_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "wall.get", expectedJSON), "")
	resp, apiErr, err := vk.Wall_GetExtended(context.Background(), Wall_Get_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Wall_GetExtended_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Wall_GetExtended(context.Background(), Wall_Get_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Wall_GetById_Request(r *Wall_GetById_Request) {
	(*r).Posts = new([]string)
	l0 := randIntn(maxArrayLength + 1)
	*(*r).Posts = make([]string, l0)
	for i0 := 0; i0 < l0; i0++ {
		(*(*r).Posts)[i0] = randString()
	}
	(*r).CopyHistoryDepth = new(int)
	*(*r).CopyHistoryDepth = randInt()
	(*r).Fields = new([]Base_UserGroupFields)
	l0 = randIntn(maxArrayLength + 1)
	*(*r).Fields = make([]Base_UserGroupFields, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomly_Base_UserGroupFields(&(*(*r).Fields)[i0])
	}
}

func TestVK_Wall_GetById_Success(t *testing.T) {
	values := make(url.Values, 6)
	var req Wall_GetById_Request
	fillRandomly_Wall_GetById_Request(&req)
	require.NoError(t, req.fillIn(values))
	setString(values, "extended", "0")
	var expected Wall_GetByIdLegacy_Response
	fillRandomly_Wall_GetByIdLegacy_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "wall.getById", values, expectedJSON), token)
	resp, apiErr, err := vk.Wall_GetById(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Wall_GetById_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "wall.getById", expectedJSON), "")
	resp, apiErr, err := vk.Wall_GetById(context.Background(), Wall_GetById_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Wall_GetById_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Wall_GetById(context.Background(), Wall_GetById_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func TestVK_Wall_GetByIdExtended_Success(t *testing.T) {
	values := make(url.Values, 6)
	var req Wall_GetById_Request
	fillRandomly_Wall_GetById_Request(&req)
	require.NoError(t, req.fillIn(values))
	setString(values, "extended", "1")
	var expected Wall_GetByIdExtended_Response
	fillRandomly_Wall_GetByIdExtended_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "wall.getById", values, expectedJSON), token)
	resp, apiErr, err := vk.Wall_GetByIdExtended(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Wall_GetByIdExtended_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "wall.getById", expectedJSON), "")
	resp, apiErr, err := vk.Wall_GetByIdExtended(context.Background(), Wall_GetById_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Wall_GetByIdExtended_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Wall_GetByIdExtended(context.Background(), Wall_GetById_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Wall_GetComment_Request(r *Wall_GetComment_Request) {
	(*r).OwnerId = new(int)
	*(*r).OwnerId = randInt()
	(*r).CommentId = randInt()
	(*r).Fields = new([]Base_UserGroupFields)
	l0 := randIntn(maxArrayLength + 1)
	*(*r).Fields = make([]Base_UserGroupFields, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomly_Base_UserGroupFields(&(*(*r).Fields)[i0])
	}
}

func TestVK_Wall_GetComment_Success(t *testing.T) {
	values := make(url.Values, 6)
	var req Wall_GetComment_Request
	fillRandomly_Wall_GetComment_Request(&req)
	require.NoError(t, req.fillIn(values))
	setString(values, "extended", "0")
	var expected Wall_GetComment_Response
	fillRandomly_Wall_GetComment_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "wall.getComment", values, expectedJSON), token)
	resp, apiErr, err := vk.Wall_GetComment(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Wall_GetComment_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "wall.getComment", expectedJSON), "")
	resp, apiErr, err := vk.Wall_GetComment(context.Background(), Wall_GetComment_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Wall_GetComment_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Wall_GetComment(context.Background(), Wall_GetComment_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func TestVK_Wall_GetCommentExtended_Success(t *testing.T) {
	values := make(url.Values, 6)
	var req Wall_GetComment_Request
	fillRandomly_Wall_GetComment_Request(&req)
	require.NoError(t, req.fillIn(values))
	setString(values, "extended", "1")
	var expected Wall_GetCommentExtended_Response
	fillRandomly_Wall_GetCommentExtended_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "wall.getComment", values, expectedJSON), token)
	resp, apiErr, err := vk.Wall_GetCommentExtended(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Wall_GetCommentExtended_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "wall.getComment", expectedJSON), "")
	resp, apiErr, err := vk.Wall_GetCommentExtended(context.Background(), Wall_GetComment_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Wall_GetCommentExtended_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Wall_GetCommentExtended(context.Background(), Wall_GetComment_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Wall_GetComments_Sort(o *Wall_GetComments_Sort) {
	switch randIntn(2) {
	case 0:
		*o = "asc"
	case 1:
		*o = "desc"
	}
}

func fillRandomly_Wall_GetComments_Request(r *Wall_GetComments_Request) {
	(*r).OwnerId = new(int)
	*(*r).OwnerId = randInt()
	(*r).PostId = new(int)
	*(*r).PostId = randInt()
	(*r).NeedLikes = new(bool)
	*(*r).NeedLikes = randBool()
	(*r).StartCommentId = new(int)
	*(*r).StartCommentId = randInt()
	(*r).Offset = new(int)
	*(*r).Offset = randInt()
	(*r).Count = new(int)
	*(*r).Count = randInt()
	(*r).Sort = new(Wall_GetComments_Sort)
	fillRandomly_Wall_GetComments_Sort((*r).Sort)
	(*r).PreviewLength = new(int)
	*(*r).PreviewLength = randInt()
	(*r).Fields = new([]Base_UserGroupFields)
	l0 := randIntn(maxArrayLength + 1)
	*(*r).Fields = make([]Base_UserGroupFields, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomly_Base_UserGroupFields(&(*(*r).Fields)[i0])
	}
	(*r).CommentId = new(int)
	*(*r).CommentId = randInt()
	(*r).ThreadItemsCount = new(int)
	*(*r).ThreadItemsCount = randInt()
}

func TestVK_Wall_GetComments_Success(t *testing.T) {
	values := make(url.Values, 14)
	var req Wall_GetComments_Request
	fillRandomly_Wall_GetComments_Request(&req)
	require.NoError(t, req.fillIn(values))
	setString(values, "extended", "0")
	var expected Wall_GetComments_Response
	fillRandomly_Wall_GetComments_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "wall.getComments", values, expectedJSON), token)
	resp, apiErr, err := vk.Wall_GetComments(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Wall_GetComments_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "wall.getComments", expectedJSON), "")
	resp, apiErr, err := vk.Wall_GetComments(context.Background(), Wall_GetComments_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Wall_GetComments_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Wall_GetComments(context.Background(), Wall_GetComments_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func TestVK_Wall_GetCommentsExtended_Success(t *testing.T) {
	values := make(url.Values, 14)
	var req Wall_GetComments_Request
	fillRandomly_Wall_GetComments_Request(&req)
	require.NoError(t, req.fillIn(values))
	setString(values, "extended", "1")
	var expected Wall_GetCommentsExtended_Response
	fillRandomly_Wall_GetCommentsExtended_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "wall.getComments", values, expectedJSON), token)
	resp, apiErr, err := vk.Wall_GetCommentsExtended(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Wall_GetCommentsExtended_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "wall.getComments", expectedJSON), "")
	resp, apiErr, err := vk.Wall_GetCommentsExtended(context.Background(), Wall_GetComments_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Wall_GetCommentsExtended_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Wall_GetCommentsExtended(context.Background(), Wall_GetComments_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Wall_GetReposts_Request(r *Wall_GetReposts_Request) {
	(*r).OwnerId = new(int)
	*(*r).OwnerId = randInt()
	(*r).PostId = new(int)
	*(*r).PostId = randInt()
	(*r).Offset = new(int)
	*(*r).Offset = randInt()
	(*r).Count = new(int)
	*(*r).Count = randInt()
}

func TestVK_Wall_GetReposts_Success(t *testing.T) {
	values := make(url.Values, 6)
	var req Wall_GetReposts_Request
	fillRandomly_Wall_GetReposts_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Wall_GetReposts_Response
	fillRandomly_Wall_GetReposts_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "wall.getReposts", values, expectedJSON), token)
	resp, apiErr, err := vk.Wall_GetReposts(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Wall_GetReposts_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "wall.getReposts", expectedJSON), "")
	resp, apiErr, err := vk.Wall_GetReposts(context.Background(), Wall_GetReposts_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Wall_GetReposts_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Wall_GetReposts(context.Background(), Wall_GetReposts_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Wall_OpenComments_Request(r *Wall_OpenComments_Request) {
	(*r).OwnerId = randInt()
	(*r).PostId = randInt()
}

func TestVK_Wall_OpenComments_Success(t *testing.T) {
	values := make(url.Values, 4)
	var req Wall_OpenComments_Request
	fillRandomly_Wall_OpenComments_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Base_Bool_Response
	fillRandomly_Base_Bool_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "wall.openComments", values, expectedJSON), token)
	resp, apiErr, err := vk.Wall_OpenComments(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Wall_OpenComments_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "wall.openComments", expectedJSON), "")
	resp, apiErr, err := vk.Wall_OpenComments(context.Background(), Wall_OpenComments_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Wall_OpenComments_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Wall_OpenComments(context.Background(), Wall_OpenComments_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Wall_Pin_Request(r *Wall_Pin_Request) {
	(*r).OwnerId = new(int)
	*(*r).OwnerId = randInt()
	(*r).PostId = randInt()
}

func TestVK_Wall_Pin_Success(t *testing.T) {
	values := make(url.Values, 4)
	var req Wall_Pin_Request
	fillRandomly_Wall_Pin_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Base_Ok_Response
	fillRandomly_Base_Ok_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "wall.pin", values, expectedJSON), token)
	resp, apiErr, err := vk.Wall_Pin(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Wall_Pin_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "wall.pin", expectedJSON), "")
	resp, apiErr, err := vk.Wall_Pin(context.Background(), Wall_Pin_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Wall_Pin_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Wall_Pin(context.Background(), Wall_Pin_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Wall_Post_TopicId(o *Wall_Post_TopicId) {
	switch randIntn(12) {
	case 0:
		*o = 0
	case 1:
		*o = 1
	case 2:
		*o = 7
	case 3:
		*o = 12
	case 4:
		*o = 16
	case 5:
		*o = 19
	case 6:
		*o = 21
	case 7:
		*o = 23
	case 8:
		*o = 25
	case 9:
		*o = 26
	case 10:
		*o = 32
	case 11:
		*o = 43
	}
}

func fillRandomly_Wall_Post_Request(r *Wall_Post_Request) {
	(*r).OwnerId = new(int)
	*(*r).OwnerId = randInt()
	(*r).FriendsOnly = new(bool)
	*(*r).FriendsOnly = randBool()
	(*r).FromGroup = new(bool)
	*(*r).FromGroup = randBool()
	(*r).Message = new(string)
	*(*r).Message = randString()
	(*r).Attachments = new([]string)
	l0 := randIntn(maxArrayLength + 1)
	*(*r).Attachments = make([]string, l0)
	for i0 := 0; i0 < l0; i0++ {
		(*(*r).Attachments)[i0] = randString()
	}
	(*r).Services = new(string)
	*(*r).Services = randString()
	(*r).Signed = new(bool)
	*(*r).Signed = randBool()
	(*r).PublishDate = new(int)
	*(*r).PublishDate = randInt()
	(*r).Lat = new(float64)
	*(*r).Lat = randFloat()
	(*r).Long = new(float64)
	*(*r).Long = randFloat()
	(*r).PlaceId = new(int)
	*(*r).PlaceId = randInt()
	(*r).PostId = new(int)
	*(*r).PostId = randInt()
	(*r).Guid = new(string)
	*(*r).Guid = randString()
	(*r).MarkAsAds = new(bool)
	*(*r).MarkAsAds = randBool()
	(*r).CloseComments = new(bool)
	*(*r).CloseComments = randBool()
	(*r).DonutPaidDuration = new(int)
	*(*r).DonutPaidDuration = randInt()
	(*r).MuteNotifications = new(bool)
	*(*r).MuteNotifications = randBool()
	(*r).Copyright = new(string)
	*(*r).Copyright = randString()
	(*r).TopicId = new(Wall_Post_TopicId)
	fillRandomly_Wall_Post_TopicId((*r).TopicId)
}

func TestVK_Wall_Post_Success(t *testing.T) {
	values := make(url.Values, 21)
	var req Wall_Post_Request
	fillRandomly_Wall_Post_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Wall_Post_Response
	fillRandomly_Wall_Post_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "wall.post", values, expectedJSON), token)
	resp, apiErr, err := vk.Wall_Post(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Wall_Post_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "wall.post", expectedJSON), "")
	resp, apiErr, err := vk.Wall_Post(context.Background(), Wall_Post_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Wall_Post_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Wall_Post(context.Background(), Wall_Post_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Wall_PostAdsStealth_Request(r *Wall_PostAdsStealth_Request) {
	(*r).OwnerId = randInt()
	(*r).Message = new(string)
	*(*r).Message = randString()
	(*r).Attachments = new([]string)
	l0 := randIntn(maxArrayLength + 1)
	*(*r).Attachments = make([]string, l0)
	for i0 := 0; i0 < l0; i0++ {
		(*(*r).Attachments)[i0] = randString()
	}
	(*r).Signed = new(bool)
	*(*r).Signed = randBool()
	(*r).Lat = new(float64)
	*(*r).Lat = randFloat()
	(*r).Long = new(float64)
	*(*r).Long = randFloat()
	(*r).PlaceId = new(int)
	*(*r).PlaceId = randInt()
	(*r).Guid = new(string)
	*(*r).Guid = randString()
	(*r).LinkButton = new(string)
	*(*r).LinkButton = randString()
	(*r).LinkTitle = new(string)
	*(*r).LinkTitle = randString()
	(*r).LinkImage = new(string)
	*(*r).LinkImage = randString()
	(*r).LinkVideo = new(string)
	*(*r).LinkVideo = randString()
}

func TestVK_Wall_PostAdsStealth_Success(t *testing.T) {
	values := make(url.Values, 14)
	var req Wall_PostAdsStealth_Request
	fillRandomly_Wall_PostAdsStealth_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Wall_PostAdsStealth_Response
	fillRandomly_Wall_PostAdsStealth_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "wall.postAdsStealth", values, expectedJSON), token)
	resp, apiErr, err := vk.Wall_PostAdsStealth(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Wall_PostAdsStealth_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "wall.postAdsStealth", expectedJSON), "")
	resp, apiErr, err := vk.Wall_PostAdsStealth(context.Background(), Wall_PostAdsStealth_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Wall_PostAdsStealth_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Wall_PostAdsStealth(context.Background(), Wall_PostAdsStealth_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Wall_ReportComment_Reason(o *Wall_ReportComment_Reason) {
	switch randIntn(7) {
	case 0:
		*o = 0
	case 1:
		*o = 1
	case 2:
		*o = 2
	case 3:
		*o = 3
	case 4:
		*o = 4
	case 5:
		*o = 5
	case 6:
		*o = 6
	}
}

func fillRandomly_Wall_ReportComment_Request(r *Wall_ReportComment_Request) {
	(*r).OwnerId = randInt()
	(*r).CommentId = randInt()
	(*r).Reason = new(Wall_ReportComment_Reason)
	fillRandomly_Wall_ReportComment_Reason((*r).Reason)
}

func TestVK_Wall_ReportComment_Success(t *testing.T) {
	values := make(url.Values, 5)
	var req Wall_ReportComment_Request
	fillRandomly_Wall_ReportComment_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Base_Ok_Response
	fillRandomly_Base_Ok_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "wall.reportComment", values, expectedJSON), token)
	resp, apiErr, err := vk.Wall_ReportComment(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Wall_ReportComment_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "wall.reportComment", expectedJSON), "")
	resp, apiErr, err := vk.Wall_ReportComment(context.Background(), Wall_ReportComment_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Wall_ReportComment_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Wall_ReportComment(context.Background(), Wall_ReportComment_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Wall_ReportPost_Reason(o *Wall_ReportPost_Reason) {
	switch randIntn(7) {
	case 0:
		*o = 0
	case 1:
		*o = 1
	case 2:
		*o = 2
	case 3:
		*o = 3
	case 4:
		*o = 4
	case 5:
		*o = 5
	case 6:
		*o = 6
	}
}

func fillRandomly_Wall_ReportPost_Request(r *Wall_ReportPost_Request) {
	(*r).OwnerId = randInt()
	(*r).PostId = randInt()
	(*r).Reason = new(Wall_ReportPost_Reason)
	fillRandomly_Wall_ReportPost_Reason((*r).Reason)
}

func TestVK_Wall_ReportPost_Success(t *testing.T) {
	values := make(url.Values, 5)
	var req Wall_ReportPost_Request
	fillRandomly_Wall_ReportPost_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Base_Ok_Response
	fillRandomly_Base_Ok_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "wall.reportPost", values, expectedJSON), token)
	resp, apiErr, err := vk.Wall_ReportPost(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Wall_ReportPost_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "wall.reportPost", expectedJSON), "")
	resp, apiErr, err := vk.Wall_ReportPost(context.Background(), Wall_ReportPost_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Wall_ReportPost_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Wall_ReportPost(context.Background(), Wall_ReportPost_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Wall_Repost_Request(r *Wall_Repost_Request) {
	(*r).Object = randString()
	(*r).Message = new(string)
	*(*r).Message = randString()
	(*r).GroupId = new(int)
	*(*r).GroupId = randInt()
	(*r).MarkAsAds = new(bool)
	*(*r).MarkAsAds = randBool()
	(*r).MuteNotifications = new(bool)
	*(*r).MuteNotifications = randBool()
}

func TestVK_Wall_Repost_Success(t *testing.T) {
	values := make(url.Values, 7)
	var req Wall_Repost_Request
	fillRandomly_Wall_Repost_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Wall_Repost_Response
	fillRandomly_Wall_Repost_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "wall.repost", values, expectedJSON), token)
	resp, apiErr, err := vk.Wall_Repost(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Wall_Repost_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "wall.repost", expectedJSON), "")
	resp, apiErr, err := vk.Wall_Repost(context.Background(), Wall_Repost_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Wall_Repost_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Wall_Repost(context.Background(), Wall_Repost_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Wall_Restore_Request(r *Wall_Restore_Request) {
	(*r).OwnerId = new(int)
	*(*r).OwnerId = randInt()
	(*r).PostId = new(int)
	*(*r).PostId = randInt()
}

func TestVK_Wall_Restore_Success(t *testing.T) {
	values := make(url.Values, 4)
	var req Wall_Restore_Request
	fillRandomly_Wall_Restore_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Base_Ok_Response
	fillRandomly_Base_Ok_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "wall.restore", values, expectedJSON), token)
	resp, apiErr, err := vk.Wall_Restore(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Wall_Restore_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "wall.restore", expectedJSON), "")
	resp, apiErr, err := vk.Wall_Restore(context.Background(), Wall_Restore_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Wall_Restore_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Wall_Restore(context.Background(), Wall_Restore_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Wall_RestoreComment_Request(r *Wall_RestoreComment_Request) {
	(*r).OwnerId = new(int)
	*(*r).OwnerId = randInt()
	(*r).CommentId = randInt()
}

func TestVK_Wall_RestoreComment_Success(t *testing.T) {
	values := make(url.Values, 4)
	var req Wall_RestoreComment_Request
	fillRandomly_Wall_RestoreComment_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Base_Ok_Response
	fillRandomly_Base_Ok_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "wall.restoreComment", values, expectedJSON), token)
	resp, apiErr, err := vk.Wall_RestoreComment(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Wall_RestoreComment_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "wall.restoreComment", expectedJSON), "")
	resp, apiErr, err := vk.Wall_RestoreComment(context.Background(), Wall_RestoreComment_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Wall_RestoreComment_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Wall_RestoreComment(context.Background(), Wall_RestoreComment_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Wall_Search_Request(r *Wall_Search_Request) {
	(*r).OwnerId = new(int)
	*(*r).OwnerId = randInt()
	(*r).Domain = new(string)
	*(*r).Domain = randString()
	(*r).Query = new(string)
	*(*r).Query = randString()
	(*r).OwnersOnly = new(bool)
	*(*r).OwnersOnly = randBool()
	(*r).Count = new(int)
	*(*r).Count = randInt()
	(*r).Offset = new(int)
	*(*r).Offset = randInt()
	(*r).Fields = new([]Base_UserGroupFields)
	l0 := randIntn(maxArrayLength + 1)
	*(*r).Fields = make([]Base_UserGroupFields, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomly_Base_UserGroupFields(&(*(*r).Fields)[i0])
	}
}

func TestVK_Wall_Search_Success(t *testing.T) {
	values := make(url.Values, 10)
	var req Wall_Search_Request
	fillRandomly_Wall_Search_Request(&req)
	require.NoError(t, req.fillIn(values))
	setString(values, "extended", "0")
	var expected Wall_Search_Response
	fillRandomly_Wall_Search_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "wall.search", values, expectedJSON), token)
	resp, apiErr, err := vk.Wall_Search(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Wall_Search_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "wall.search", expectedJSON), "")
	resp, apiErr, err := vk.Wall_Search(context.Background(), Wall_Search_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Wall_Search_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Wall_Search(context.Background(), Wall_Search_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func TestVK_Wall_SearchExtended_Success(t *testing.T) {
	values := make(url.Values, 10)
	var req Wall_Search_Request
	fillRandomly_Wall_Search_Request(&req)
	require.NoError(t, req.fillIn(values))
	setString(values, "extended", "1")
	var expected Wall_SearchExtended_Response
	fillRandomly_Wall_SearchExtended_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "wall.search", values, expectedJSON), token)
	resp, apiErr, err := vk.Wall_SearchExtended(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Wall_SearchExtended_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "wall.search", expectedJSON), "")
	resp, apiErr, err := vk.Wall_SearchExtended(context.Background(), Wall_Search_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Wall_SearchExtended_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Wall_SearchExtended(context.Background(), Wall_Search_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Wall_Unpin_Request(r *Wall_Unpin_Request) {
	(*r).OwnerId = new(int)
	*(*r).OwnerId = randInt()
	(*r).PostId = randInt()
}

func TestVK_Wall_Unpin_Success(t *testing.T) {
	values := make(url.Values, 4)
	var req Wall_Unpin_Request
	fillRandomly_Wall_Unpin_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Base_Ok_Response
	fillRandomly_Base_Ok_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "wall.unpin", values, expectedJSON), token)
	resp, apiErr, err := vk.Wall_Unpin(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Wall_Unpin_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "wall.unpin", expectedJSON), "")
	resp, apiErr, err := vk.Wall_Unpin(context.Background(), Wall_Unpin_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Wall_Unpin_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Wall_Unpin(context.Background(), Wall_Unpin_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Widgets_GetComments_Request(r *Widgets_GetComments_Request) {
	(*r).WidgetApiId = new(int)
	*(*r).WidgetApiId = randInt()
	(*r).Url = new(string)
	*(*r).Url = randString()
	(*r).PageId = new(string)
	*(*r).PageId = randString()
	(*r).Order = new(string)
	*(*r).Order = randString()
	(*r).Fields = new([]Users_Fields)
	l0 := randIntn(maxArrayLength + 1)
	*(*r).Fields = make([]Users_Fields, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomly_Users_Fields(&(*(*r).Fields)[i0])
	}
	(*r).Offset = new(int)
	*(*r).Offset = randInt()
	(*r).Count = new(int)
	*(*r).Count = randInt()
}

func TestVK_Widgets_GetComments_Success(t *testing.T) {
	values := make(url.Values, 9)
	var req Widgets_GetComments_Request
	fillRandomly_Widgets_GetComments_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Widgets_GetComments_Response
	fillRandomly_Widgets_GetComments_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "widgets.getComments", values, expectedJSON), token)
	resp, apiErr, err := vk.Widgets_GetComments(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Widgets_GetComments_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "widgets.getComments", expectedJSON), "")
	resp, apiErr, err := vk.Widgets_GetComments(context.Background(), Widgets_GetComments_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Widgets_GetComments_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Widgets_GetComments(context.Background(), Widgets_GetComments_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}

func fillRandomly_Widgets_GetPages_Request(r *Widgets_GetPages_Request) {
	(*r).WidgetApiId = new(int)
	*(*r).WidgetApiId = randInt()
	(*r).Order = new(string)
	*(*r).Order = randString()
	(*r).Period = new(string)
	*(*r).Period = randString()
	(*r).Offset = new(int)
	*(*r).Offset = randInt()
	(*r).Count = new(int)
	*(*r).Count = randInt()
}

func TestVK_Widgets_GetPages_Success(t *testing.T) {
	values := make(url.Values, 7)
	var req Widgets_GetPages_Request
	fillRandomly_Widgets_GetPages_Request(&req)
	require.NoError(t, req.fillIn(values))
	var expected Widgets_GetPages_Response
	fillRandomly_Widgets_GetPages_Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk := NewVK(NewTestClient(t, token, "widgets.getPages", values, expectedJSON), token)
	resp, apiErr, err := vk.Widgets_GetPages(context.Background(), req)
	assert.EqualValues(t, expected, resp)
	assert.Nil(t, apiErr)
	assert.NoError(t, err)
}

func TestVK_Widgets_GetPages_ApiError(t *testing.T) {
	var expected apiError
	expected.fillRandomly()
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	vk := NewVK(NewApiErrorTestClient(t, "widgets.getPages", expectedJSON), "")
	resp, apiErr, err := vk.Widgets_GetPages(context.Background(), Widgets_GetPages_Request{})
	assert.Empty(t, resp)
	assert.Equal(t, &expected, apiErr)
	assert.NoError(t, err)
}

func TestVK_Widgets_GetPages_Error(t *testing.T) {
	expected := errors.New(randString())
	vk := NewVK(NewErrorTestClient(expected))
	resp, apiErr, err := vk.Widgets_GetPages(context.Background(), Widgets_GetPages_Request{})
	assert.Empty(t, resp)
	assert.Nil(t, apiErr)
	assert.ErrorIs(t, err, expected)
}
