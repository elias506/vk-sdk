// Code generated by https://github.com/elias506/vk-sdk. DO NOT EDIT.

package vk_sdk

import (
	"encoding/json"
)

// suppress unused package warning
var _ *json.RawMessage

type Account_AccountCounters struct {
	// New app requests number
	//  Minimum: 1
	AppRequests *int `json:"app_requests,omitempty"`
	// New events number
	//  Minimum: 1
	Events *int `json:"events,omitempty"`
	// New faves number
	//  Minimum: 1
	Faves *int `json:"faves,omitempty"`
	// New friends requests number
	//  Minimum: 1
	Friends *int `json:"friends,omitempty"`
	// New friends recommendations number
	//  Minimum: 1
	FriendsRecommendations *int `json:"friends_recommendations,omitempty"`
	// New friends suggestions number
	//  Minimum: 1
	FriendsSuggestions *int `json:"friends_suggestions,omitempty"`
	// New gifts number
	//  Minimum: 1
	Gifts *int `json:"gifts,omitempty"`
	// New groups number
	//  Minimum: 1
	Groups *int `json:"groups,omitempty"`
	// New memories number
	//  Minimum: 1
	Memories          *int `json:"memories,omitempty"`
	MenuClipsBadge    *int `json:"menu_clips_badge,omitempty"`
	MenuDiscoverBadge *int `json:"menu_discover_badge,omitempty"`
	// New messages number
	//  Minimum: 1
	Messages *int `json:"messages,omitempty"`
	// New notes number
	//  Minimum: 1
	Notes *int `json:"notes,omitempty"`
	// New notifications number
	//  Minimum: 1
	Notifications *int `json:"notifications,omitempty"`
	// New photo tags number
	//  Minimum: 1
	Photos *int `json:"photos,omitempty"`
	// New sdk number
	//  Minimum: 1
	Sdk *int `json:"sdk,omitempty"`
}

type Account_Info struct {
	// Two factor authentication is enabled
	TwoFaRequired *Base_BoolInt `json:"2fa_required,omitempty"`
	// Country code
	Country *string `json:"country,omitempty"`
	// Information whether HTTPS-only is enabled
	HttpsRequired *Base_BoolInt `json:"https_required,omitempty"`
	// Information whether user has been processed intro
	Intro *Base_BoolInt `json:"intro,omitempty"`
	// Language ID
	Lang          *int      `json:"lang,omitempty"`
	LinkRedirects *[]string `json:"link_redirects,omitempty"`
	// Ads slot id for MyTarget
	//  Minimum: 0
	MiniAppsAdsSlotId *int `json:"mini_apps_ads_slot_id,omitempty"`
	// Information whether wall comments should be hidden
	NoWallReplies *Base_BoolInt `json:"no_wall_replies,omitempty"`
	// Information whether only owners posts should be shown
	OwnPostsDefault *Base_BoolInt `json:"own_posts_default,omitempty"`
	//  Minimum: 0
	QrPromotion                *int                   `json:"qr_promotion,omitempty"`
	ShowVkAppsIntro            *bool                  `json:"show_vk_apps_intro,omitempty"`
	Subscriptions              *Account_Subscriptions `json:"subscriptions,omitempty"`
	WishlistsAePromoBannerShow *Base_BoolInt          `json:"wishlists_ae_promo_banner_show,omitempty"`
}

type Account_NameRequest struct {
	// First name in request
	FirstName *string `json:"first_name,omitempty"`
	// Request ID needed to cancel the request
	Id *int `json:"id,omitempty"`
	// Text to display to user
	Lang *string `json:"lang,omitempty"`
	// Last name in request
	LastName *string `json:"last_name,omitempty"`
	// href for link in lang field
	LinkHref *string `json:"link_href,omitempty"`
	// label to display for link in lang field
	LinkLabel *string                    `json:"link_label,omitempty"`
	Status    *Account_NameRequestStatus `json:"status,omitempty"`
}

// Account_NameRequestStatus Request status
type Account_NameRequestStatus string

const (
	Account_NameRequestStatus_Success          Account_NameRequestStatus = "success"
	Account_NameRequestStatus_Processing       Account_NameRequestStatus = "processing"
	Account_NameRequestStatus_Declined         Account_NameRequestStatus = "declined"
	Account_NameRequestStatus_WasAccepted      Account_NameRequestStatus = "was_accepted"
	Account_NameRequestStatus_WasDeclined      Account_NameRequestStatus = "was_declined"
	Account_NameRequestStatus_DeclinedWithLink Account_NameRequestStatus = "declined_with_link"
	Account_NameRequestStatus_Response         Account_NameRequestStatus = "response"
	Account_NameRequestStatus_ResponseWithLink Account_NameRequestStatus = "response_with_link"
)

type Account_Offer_LinkType string

const (
	Account_Offer_LinkType_Profile Account_Offer_LinkType = "profile"
	Account_Offer_LinkType_Group   Account_Offer_LinkType = "group"
	Account_Offer_LinkType_App     Account_Offer_LinkType = "app"
)

type Account_Offer struct {
	// Currency amount
	CurrencyAmount *float64 `json:"currency_amount,omitempty"`
	// Offer description
	Description *string `json:"description,omitempty"`
	// Offer ID
	Id *int `json:"id,omitempty"`
	// URL of the preview image
	//  Format: uri
	Img *string `json:"img,omitempty"`
	// Instruction how to process the offer
	Instruction *string `json:"instruction,omitempty"`
	// Instruction how to process the offer (HTML format)
	InstructionHtml *string `json:"instruction_html,omitempty"`
	// Link id
	LinkId *int `json:"link_id,omitempty"`
	// Link type
	LinkType *Account_Offer_LinkType `json:"link_type,omitempty"`
	// Offer price
	Price *int `json:"price,omitempty"`
	// Offer short description
	ShortDescription *string `json:"short_description,omitempty"`
	// Offer tag
	Tag *string `json:"tag,omitempty"`
	// Offer title
	Title *string `json:"title,omitempty"`
}

type Account_PushConversations struct {
	// Items count
	//  Minimum: 0
	Count *int                             `json:"count,omitempty"`
	Items *[]Account_PushConversationsItem `json:"items,omitempty"`
}

type Account_PushConversationsItem struct {
	// Information whether the mass mentions (like '@all', '@online') are disabled. Can be affected by 'disabled_mentions'
	DisabledMassMentions *Base_BoolInt `json:"disabled_mass_mentions,omitempty"`
	// Information whether the mentions are disabled
	DisabledMentions *Base_BoolInt `json:"disabled_mentions,omitempty"`
	// Time until that notifications are disabled in seconds
	DisabledUntil int `json:"disabled_until"`
	// Peer ID
	PeerId int `json:"peer_id"`
	// Information whether the sound are enabled
	Sound Base_BoolInt `json:"sound"`
}

type Account_PushParams struct {
	AppRequest     *[]Account_PushParamsOnoff    `json:"app_request,omitempty"`
	Birthday       *[]Account_PushParamsOnoff    `json:"birthday,omitempty"`
	Chat           *[]Account_PushParamsMode     `json:"chat,omitempty"`
	Comment        *[]Account_PushParamsSettings `json:"comment,omitempty"`
	EventSoon      *[]Account_PushParamsOnoff    `json:"event_soon,omitempty"`
	Friend         *[]Account_PushParamsOnoff    `json:"friend,omitempty"`
	FriendAccepted *[]Account_PushParamsOnoff    `json:"friend_accepted,omitempty"`
	FriendFound    *[]Account_PushParamsOnoff    `json:"friend_found,omitempty"`
	GroupAccepted  *[]Account_PushParamsOnoff    `json:"group_accepted,omitempty"`
	GroupInvite    *[]Account_PushParamsOnoff    `json:"group_invite,omitempty"`
	Like           *[]Account_PushParamsSettings `json:"like,omitempty"`
	Mention        *[]Account_PushParamsSettings `json:"mention,omitempty"`
	Msg            *[]Account_PushParamsMode     `json:"msg,omitempty"`
	NewPost        *[]Account_PushParamsOnoff    `json:"new_post,omitempty"`
	Reply          *[]Account_PushParamsOnoff    `json:"reply,omitempty"`
	Repost         *[]Account_PushParamsSettings `json:"repost,omitempty"`
	SdkOpen        *[]Account_PushParamsOnoff    `json:"sdk_open,omitempty"`
	WallPost       *[]Account_PushParamsOnoff    `json:"wall_post,omitempty"`
	WallPublish    *[]Account_PushParamsOnoff    `json:"wall_publish,omitempty"`
}

// Account_PushParamsMode Settings parameters
type Account_PushParamsMode string

const (
	Account_PushParamsMode_On      Account_PushParamsMode = "on"
	Account_PushParamsMode_Off     Account_PushParamsMode = "off"
	Account_PushParamsMode_NoSound Account_PushParamsMode = "no_sound"
	Account_PushParamsMode_NoText  Account_PushParamsMode = "no_text"
)

// Account_PushParamsOnoff Settings parameters
type Account_PushParamsOnoff string

const (
	Account_PushParamsOnoff_On  Account_PushParamsOnoff = "on"
	Account_PushParamsOnoff_Off Account_PushParamsOnoff = "off"
)

// Account_PushParamsSettings Settings parameters
type Account_PushParamsSettings string

const (
	Account_PushParamsSettings_On     Account_PushParamsSettings = "on"
	Account_PushParamsSettings_Off    Account_PushParamsSettings = "off"
	Account_PushParamsSettings_FrOfFr Account_PushParamsSettings = "fr_of_fr"
)

type Account_PushSettings struct {
	Conversations *Account_PushConversations `json:"conversations,omitempty"`
	// Information whether notifications are disabled
	Disabled *Base_BoolInt `json:"disabled,omitempty"`
	// Time until that notifications are disabled in Unixtime
	DisabledUntil *int                `json:"disabled_until,omitempty"`
	Settings      *Account_PushParams `json:"settings,omitempty"`
}

type Account_Subscriptions []int

type Account_UserSettings struct {
	Users_UserSettingsXtr
	// flag about service account
	IsServiceAccount *bool `json:"is_service_account,omitempty"`
	// URL of square photo of the user with 200 pixels in width
	//  Format: uri
	Photo200 *string `json:"photo_200,omitempty"`
}

type Account_UserSettingsInterest struct {
	Title string `json:"title"`
	Value string `json:"value"`
}

type Account_UserSettingsInterests struct {
	About      *Account_UserSettingsInterest `json:"about,omitempty"`
	Activities *Account_UserSettingsInterest `json:"activities,omitempty"`
	Books      *Account_UserSettingsInterest `json:"books,omitempty"`
	Games      *Account_UserSettingsInterest `json:"games,omitempty"`
	Interests  *Account_UserSettingsInterest `json:"interests,omitempty"`
	Movies     *Account_UserSettingsInterest `json:"movies,omitempty"`
	Music      *Account_UserSettingsInterest `json:"music,omitempty"`
	Quotes     *Account_UserSettingsInterest `json:"quotes,omitempty"`
	Tv         *Account_UserSettingsInterest `json:"tv,omitempty"`
}

type Addresses_Fields string

const (
	Addresses_Fields_Id                Addresses_Fields = "id"
	Addresses_Fields_Title             Addresses_Fields = "title"
	Addresses_Fields_Address           Addresses_Fields = "address"
	Addresses_Fields_AdditionalAddress Addresses_Fields = "additional_address"
	Addresses_Fields_CountryId         Addresses_Fields = "country_id"
	Addresses_Fields_CityId            Addresses_Fields = "city_id"
	Addresses_Fields_MetroStationId    Addresses_Fields = "metro_station_id"
	Addresses_Fields_Latitude          Addresses_Fields = "latitude"
	Addresses_Fields_Longitude         Addresses_Fields = "longitude"
	Addresses_Fields_Distance          Addresses_Fields = "distance"
	Addresses_Fields_WorkInfoStatus    Addresses_Fields = "work_info_status"
	Addresses_Fields_Timetable         Addresses_Fields = "timetable"
	Addresses_Fields_Phone             Addresses_Fields = "phone"
	Addresses_Fields_TimeOffset        Addresses_Fields = "time_offset"
)

// Ads_AccessRole Current user's role
type Ads_AccessRole string

const (
	Ads_AccessRole_Admin   Ads_AccessRole = "admin"
	Ads_AccessRole_Manager Ads_AccessRole = "manager"
	Ads_AccessRole_Reports Ads_AccessRole = "reports"
)

// Ads_AccessRolePublic Current user's role
type Ads_AccessRolePublic string

const (
	Ads_AccessRolePublic_Manager Ads_AccessRolePublic = "manager"
	Ads_AccessRolePublic_Reports Ads_AccessRolePublic = "reports"
)

type Ads_Accesses struct {
	// Client ID
	ClientId *string         `json:"client_id,omitempty"`
	Role     *Ads_AccessRole `json:"role,omitempty"`
}

type Ads_Account struct {
	AccessRole Ads_AccessRole `json:"access_role"`
	// Account ID
	AccountId int `json:"account_id"`
	// Account name
	AccountName string `json:"account_name"`
	// Information whether account is active
	AccountStatus Base_BoolInt    `json:"account_status"`
	AccountType   Ads_AccountType `json:"account_type"`
	// Can user view account budget
	CanViewBudget bool `json:"can_view_budget"`
}

// Ads_AccountType Account type
type Ads_AccountType string

const (
	Ads_AccountType_General Ads_AccountType = "general"
	Ads_AccountType_Agency  Ads_AccountType = "agency"
)

type Ads_Ad struct {
	// Ad format
	AdFormat int `json:"ad_format"`
	// Ad platform
	AdPlatform *string `json:"ad_platform,omitempty"`
	// Total limit
	AllLimit int            `json:"all_limit"`
	Approved Ads_AdApproved `json:"approved"`
	// Max cost of target actions for autobidding, kopecks
	AutobiddingMaxCost *int `json:"autobidding_max_cost,omitempty"`
	// Campaign ID
	CampaignId int `json:"campaign_id"`
	// Category ID
	Category1Id *int `json:"category1_id,omitempty"`
	// Additional category ID
	Category2Id *int           `json:"category2_id,omitempty"`
	CostType    Ads_AdCostType `json:"cost_type"`
	// Cost of an action, kopecks
	Cpa *int `json:"cpa,omitempty"`
	// Cost of a click, kopecks
	Cpc *int `json:"cpc,omitempty"`
	// Cost of 1000 impressions, kopecks
	Cpm *int `json:"cpm,omitempty"`
	// Information whether disclaimer is enabled
	DisclaimerMedical *Base_BoolInt `json:"disclaimer_medical,omitempty"`
	// Information whether disclaimer is enabled
	DisclaimerSpecialist *Base_BoolInt `json:"disclaimer_specialist,omitempty"`
	// Information whether disclaimer is enabled
	DisclaimerSupplements *Base_BoolInt `json:"disclaimer_supplements,omitempty"`
	// Ad ID
	Id int `json:"id"`
	// Impressions limit
	ImpressionsLimit *int `json:"impressions_limit,omitempty"`
	// Information whether impressions are limited
	ImpressionsLimited *Base_BoolInt `json:"impressions_limited,omitempty"`
	// Ad title
	Name string `json:"name"`
	// Cost of 1000 impressions optimized, kopecks
	Ocpm   *int         `json:"ocpm,omitempty"`
	Status Ads_AdStatus `json:"status"`
	// Information whether the ad is a video
	Video *Base_BoolInt `json:"video,omitempty"`
}

// Ads_AdApproved Review status
type Ads_AdApproved int

const (
	Ads_AdApproved_NotModerated      Ads_AdApproved = 0
	Ads_AdApproved_PendingModeration Ads_AdApproved = 1
	Ads_AdApproved_Approved          Ads_AdApproved = 2
	Ads_AdApproved_Rejected          Ads_AdApproved = 3
)

// Ads_AdCostType Cost type
type Ads_AdCostType int

const (
	Ads_AdCostType_PerClicks               Ads_AdCostType = 0
	Ads_AdCostType_PerImpressions          Ads_AdCostType = 1
	Ads_AdCostType_PerActions              Ads_AdCostType = 2
	Ads_AdCostType_PerImpressionsOptimized Ads_AdCostType = 3
)

type Ads_AdLayout struct {
	// Ad format
	AdFormat int `json:"ad_format"`
	// Campaign ID
	CampaignId int            `json:"campaign_id"`
	CostType   Ads_AdCostType `json:"cost_type"`
	// Ad description
	Description string `json:"description"`
	// Ad ID
	Id string `json:"id"`
	// Image URL
	//  Format: uri
	ImageSrc string `json:"image_src"`
	// URL of the preview image in double size
	//  Format: uri
	ImageSrc2x *string `json:"image_src_2x,omitempty"`
	// Domain of advertised object
	LinkDomain *string `json:"link_domain,omitempty"`
	// URL of advertised object
	//  Format: uri
	LinkUrl string `json:"link_url"`
	// link to preview an ad as it is shown on the website
	PreviewLink *string `json:"preview_link,omitempty"`
	// Ad title
	Title string `json:"title"`
	// Information whether the ad is a video
	Video *Base_BoolInt `json:"video,omitempty"`
}

// Ads_AdStatus Ad atatus
type Ads_AdStatus int

const (
	Ads_AdStatus_Stopped Ads_AdStatus = 0
	Ads_AdStatus_Started Ads_AdStatus = 1
	Ads_AdStatus_Deleted Ads_AdStatus = 2
)

type Ads_Campaign struct {
	// Amount of active ads in campaign
	AdsCount *int `json:"ads_count,omitempty"`
	// Campaign's total limit, rubles
	AllLimit string `json:"all_limit"`
	// Campaign create time, as Unixtime
	CreateTime *int `json:"create_time,omitempty"`
	// Campaign's day limit, rubles
	DayLimit string `json:"day_limit"`
	// Campaign goal type
	GoalType *int `json:"goal_type,omitempty"`
	// Campaign ID
	Id int `json:"id"`
	// Shows if Campaign Budget Optimization is on
	IsCboEnabled *bool `json:"is_cbo_enabled,omitempty"`
	// Campaign title
	Name string `json:"name"`
	// Campaign start time, as Unixtime
	StartTime int                `json:"start_time"`
	Status    Ads_CampaignStatus `json:"status"`
	// Campaign stop time, as Unixtime
	StopTime int              `json:"stop_time"`
	Type     Ads_CampaignType `json:"type"`
	// Campaign update time, as Unixtime
	UpdateTime *int `json:"update_time,omitempty"`
	// Campaign user goal type
	UserGoalType *int `json:"user_goal_type,omitempty"`
	// Limit of views per user per campaign
	ViewsLimit *int `json:"views_limit,omitempty"`
}

// Ads_CampaignStatus Campaign status
type Ads_CampaignStatus int

const (
	Ads_CampaignStatus_Stopped Ads_CampaignStatus = 0
	Ads_CampaignStatus_Started Ads_CampaignStatus = 1
	Ads_CampaignStatus_Deleted Ads_CampaignStatus = 2
)

// Ads_CampaignType Campaign type
type Ads_CampaignType string

const (
	Ads_CampaignType_Normal        Ads_CampaignType = "normal"
	Ads_CampaignType_VkAppsManaged Ads_CampaignType = "vk_apps_managed"
	Ads_CampaignType_MobileApps    Ads_CampaignType = "mobile_apps"
	Ads_CampaignType_PromotedPosts Ads_CampaignType = "promoted_posts"
	Ads_CampaignType_AdaptiveAds   Ads_CampaignType = "adaptive_ads"
	Ads_CampaignType_Stories       Ads_CampaignType = "stories"
)

type Ads_Category struct {
	// Category ID
	//  Minimum: 1
	Id int `json:"id"`
	// Category name
	Name          string          `json:"name"`
	Subcategories *[]Ads_Category `json:"subcategories,omitempty"`
}

type Ads_Client struct {
	// Client's total limit, rubles
	AllLimit string `json:"all_limit"`
	// Client's day limit, rubles
	DayLimit string `json:"day_limit"`
	// Client ID
	Id int `json:"id"`
	// Client name
	Name string `json:"name"`
}

type Ads_CreateAdStatus struct {
	// Error code
	//  Minimum: 0
	ErrorCode *int `json:"error_code,omitempty"`
	// Error description
	ErrorDesc *string `json:"error_desc,omitempty"`
	// Ad ID
	//  Minimum: 0
	Id int `json:"id"`
	// Stealth Post ID
	//  Minimum: 0
	PostId *int `json:"post_id,omitempty"`
}

type Ads_CreateCampaignStatus struct {
	// Error code
	//  Minimum: 0
	ErrorCode *int `json:"error_code,omitempty"`
	// Error description
	ErrorDesc *string `json:"error_desc,omitempty"`
	// Campaign ID
	//  Minimum: 0
	Id int `json:"id"`
}

type Ads_Criteria struct {
	// Age from
	//  Minimum: 0
	AgeFrom *int `json:"age_from,omitempty"`
	// Age to
	//  Minimum: 0
	AgeTo *int `json:"age_to,omitempty"`
	// Apps IDs
	Apps *string `json:"apps,omitempty"`
	// Apps IDs to except
	AppsNot *string `json:"apps_not,omitempty"`
	// Days to birthday
	Birthday *int `json:"birthday,omitempty"`
	// Cities IDs
	Cities *string `json:"cities,omitempty"`
	// Cities IDs to except
	CitiesNot *string `json:"cities_not,omitempty"`
	// Country ID
	//  Minimum: 0
	Country *int `json:"country,omitempty"`
	// Districts IDs
	Districts *string `json:"districts,omitempty"`
	// Communities IDs
	Groups *string `json:"groups,omitempty"`
	// Interests categories IDs
	InterestCategories *string `json:"interest_categories,omitempty"`
	// Interests
	Interests *string `json:"interests,omitempty"`
	// Information whether the user has proceeded VK payments before
	Paying *Base_BoolInt `json:"paying,omitempty"`
	// Positions IDs
	Positions *string `json:"positions,omitempty"`
	// Religions IDs
	Religions *string `json:"religions,omitempty"`
	// Retargeting groups IDs
	RetargetingGroups *string `json:"retargeting_groups,omitempty"`
	// Retargeting groups IDs to except
	RetargetingGroupsNot *string `json:"retargeting_groups_not,omitempty"`
	// School graduation year from
	SchoolFrom *int `json:"school_from,omitempty"`
	// School graduation year to
	SchoolTo *int `json:"school_to,omitempty"`
	// Schools IDs
	Schools *string          `json:"schools,omitempty"`
	Sex     *Ads_CriteriaSex `json:"sex,omitempty"`
	// Stations IDs
	Stations *string `json:"stations,omitempty"`
	// Relationship statuses
	Statuses *string `json:"statuses,omitempty"`
	// Streets IDs
	Streets *string `json:"streets,omitempty"`
	// Travellers only
	Travellers *Base_PropertyExists `json:"travellers,omitempty"`
	// University graduation year from
	UniFrom *int `json:"uni_from,omitempty"`
	// University graduation year to
	UniTo *int `json:"uni_to,omitempty"`
	// Browsers
	UserBrowsers *string `json:"user_browsers,omitempty"`
	// Devices
	UserDevices *string `json:"user_devices,omitempty"`
	// Operating systems
	UserOs *string `json:"user_os,omitempty"`
}

// Ads_CriteriaSex Sex
type Ads_CriteriaSex int

const (
	Ads_CriteriaSex_Any    Ads_CriteriaSex = 0
	Ads_CriteriaSex_Male   Ads_CriteriaSex = 1
	Ads_CriteriaSex_Female Ads_CriteriaSex = 2
)

type Ads_DemoStats struct {
	// Object ID
	Id    *int                 `json:"id,omitempty"`
	Stats *Ads_DemostatsFormat `json:"stats,omitempty"`
	Type  *Ads_ObjectType      `json:"type,omitempty"`
}

type Ads_DemostatsFormat struct {
	Age    *[]Ads_StatsAge    `json:"age,omitempty"`
	Cities *[]Ads_StatsCities `json:"cities,omitempty"`
	// Day as YYYY-MM-DD
	Day *string `json:"day,omitempty"`
	// Month as YYYY-MM
	Month *string `json:"month,omitempty"`
	// 1 if period=overall
	Overall *int               `json:"overall,omitempty"`
	Sex     *[]Ads_StatsSex    `json:"sex,omitempty"`
	SexAge  *[]Ads_StatsSexAge `json:"sex_age,omitempty"`
}

type Ads_FloodStats struct {
	// Requests left
	Left int `json:"left"`
	// Time to refresh in seconds
	Refresh int `json:"refresh"`
}

type Ads_LinkStatus struct {
	// Reject reason
	Description string `json:"description"`
	// URL
	//  Format: uri
	RedirectUrl string `json:"redirect_url"`
	// Link status
	Status string `json:"status"`
}

type Ads_LookalikeRequest_SourceType string

const (
	Ads_LookalikeRequest_SourceType_RetargetingGroup Ads_LookalikeRequest_SourceType = "retargeting_group"
)

type Ads_LookalikeRequest_Status string

const (
	Ads_LookalikeRequest_Status_SearchInProgress Ads_LookalikeRequest_Status = "search_in_progress"
	Ads_LookalikeRequest_Status_SearchFailed     Ads_LookalikeRequest_Status = "search_failed"
	Ads_LookalikeRequest_Status_SearchDone       Ads_LookalikeRequest_Status = "search_done"
	Ads_LookalikeRequest_Status_SaveInProgress   Ads_LookalikeRequest_Status = "save_in_progress"
	Ads_LookalikeRequest_Status_SaveFailed       Ads_LookalikeRequest_Status = "save_failed"
	Ads_LookalikeRequest_Status_SaveDone         Ads_LookalikeRequest_Status = "save_done"
)

type Ads_LookalikeRequest struct {
	// Lookalike request seed audience size
	//  Minimum: 0
	AudienceCount *int `json:"audience_count,omitempty"`
	// Lookalike request create time, as Unixtime
	CreateTime int `json:"create_time"`
	// Lookalike request ID
	//  Minimum: 1
	Id                 int                                      `json:"id"`
	SaveAudienceLevels *[]Ads_LookalikeRequestSaveAudienceLevel `json:"save_audience_levels,omitempty"`
	// Time by which lookalike request would be deleted, as Unixtime
	ScheduledDeleteTime *int `json:"scheduled_delete_time,omitempty"`
	// Lookalike request seed name (retargeting group name)
	SourceName *string `json:"source_name,omitempty"`
	// Retargeting group id, which was used as lookalike seed
	//  Minimum: 1
	SourceRetargetingGroupId *int `json:"source_retargeting_group_id,omitempty"`
	// Lookalike request source type
	SourceType Ads_LookalikeRequest_SourceType `json:"source_type"`
	// Lookalike request status
	Status Ads_LookalikeRequest_Status `json:"status"`
	// Lookalike request update time, as Unixtime
	UpdateTime int `json:"update_time"`
}

type Ads_LookalikeRequestSaveAudienceLevel struct {
	// Saved audience audience size for according level
	//  Minimum: 0
	AudienceCount *int `json:"audience_count,omitempty"`
	// Save audience level id, which is used in save audience queries
	//  Minimum: 1
	Level *int `json:"level,omitempty"`
}

type Ads_Musician struct {
	// Music artist photo
	Avatar *string `json:"avatar,omitempty"`
	// Targeting music artist ID
	//  Minimum: 1
	Id int `json:"id"`
	// Music artist name
	Name string `json:"name"`
}

// Ads_ObjectType Object type
type Ads_ObjectType string

const (
	Ads_ObjectType_Ad       Ads_ObjectType = "ad"
	Ads_ObjectType_Campaign Ads_ObjectType = "campaign"
	Ads_ObjectType_Client   Ads_ObjectType = "client"
	Ads_ObjectType_Office   Ads_ObjectType = "office"
)

type Ads_Paragraphs struct {
	// Rules paragraph
	Paragraph *string `json:"paragraph,omitempty"`
}

type Ads_PromotedPostReach struct {
	// Hides amount
	Hide int `json:"hide"`
	// Object ID from 'ids' parameter
	Id int `json:"id"`
	// Community joins
	JoinGroup int `json:"join_group"`
	// Link clicks
	Links int `json:"links"`
	// Subscribers reach
	ReachSubscribers int `json:"reach_subscribers"`
	// Total reach
	ReachTotal int `json:"reach_total"`
	// Reports amount
	Report int `json:"report"`
	// Community clicks
	ToGroup int `json:"to_group"`
	// 'Unsubscribe' events amount
	Unsubscribe int `json:"unsubscribe"`
	// Video views for 100 percent
	VideoViews100p *int `json:"video_views_100p,omitempty"`
	// Video views for 25 percent
	VideoViews25p *int `json:"video_views_25p,omitempty"`
	// Video views for 3 seconds
	VideoViews3s *int `json:"video_views_3s,omitempty"`
	// Video views for 50 percent
	VideoViews50p *int `json:"video_views_50p,omitempty"`
	// Video views for 75 percent
	VideoViews75p *int `json:"video_views_75p,omitempty"`
	// Video starts
	VideoViewsStart *int `json:"video_views_start,omitempty"`
}

type Ads_RejectReason struct {
	// Comment text
	Comment *string      `json:"comment,omitempty"`
	Rules   *[]Ads_Rules `json:"rules,omitempty"`
}

type Ads_Rules struct {
	Paragraphs *[]Ads_Paragraphs `json:"paragraphs,omitempty"`
	// Comment
	Title *string `json:"title,omitempty"`
}

type Ads_Stats struct {
	// Object ID
	Id         *int                 `json:"id,omitempty"`
	Stats      *Ads_StatsFormat     `json:"stats,omitempty"`
	Type       *Ads_ObjectType      `json:"type,omitempty"`
	ViewsTimes *Ads_StatsViewsTimes `json:"views_times,omitempty"`
}

type Ads_StatsAge struct {
	// Clicks rate
	ClicksRate *float64 `json:"clicks_rate,omitempty"`
	// Impressions rate
	ImpressionsRate *float64 `json:"impressions_rate,omitempty"`
	// Age interval
	Value *string `json:"value,omitempty"`
}

type Ads_StatsCities struct {
	// Clicks rate
	ClicksRate *float64 `json:"clicks_rate,omitempty"`
	// Impressions rate
	ImpressionsRate *float64 `json:"impressions_rate,omitempty"`
	// City name
	Name *string `json:"name,omitempty"`
	// City ID
	Value *int `json:"value,omitempty"`
}

type Ads_StatsFormat struct {
	// Clicks number
	Clicks *int `json:"clicks,omitempty"`
	// Day as YYYY-MM-DD
	Day *string `json:"day,omitempty"`
	// Impressions number
	Impressions *int `json:"impressions,omitempty"`
	// Events number
	JoinRate *int `json:"join_rate,omitempty"`
	// External clicks number
	LinkExternalClicks *int `json:"link_external_clicks,omitempty"`
	// Month as YYYY-MM
	Month *string `json:"month,omitempty"`
	// 1 if period=overall
	Overall *int `json:"overall,omitempty"`
	// Reach
	Reach *int `json:"reach,omitempty"`
	// Spent funds
	Spent *int `json:"spent,omitempty"`
	// Clickthoughs to the advertised site
	VideoClicksSite *int `json:"video_clicks_site,omitempty"`
	// Video views number
	VideoViews *int `json:"video_views,omitempty"`
	// Video views (full video)
	VideoViewsFull *int `json:"video_views_full,omitempty"`
	// Video views (half of video)
	VideoViewsHalf *int `json:"video_views_half,omitempty"`
}

type Ads_StatsSex struct {
	// Clicks rate
	ClicksRate *float64 `json:"clicks_rate,omitempty"`
	// Impressions rate
	ImpressionsRate *float64           `json:"impressions_rate,omitempty"`
	Value           *Ads_StatsSexValue `json:"value,omitempty"`
}

type Ads_StatsSexAge struct {
	// Clicks rate
	ClicksRate *float64 `json:"clicks_rate,omitempty"`
	// Impressions rate
	ImpressionsRate *float64 `json:"impressions_rate,omitempty"`
	// Sex and age interval
	Value *string `json:"value,omitempty"`
}

// Ads_StatsSexValue Sex
type Ads_StatsSexValue string

const (
	Ads_StatsSexValue_Female Ads_StatsSexValue = "f"
	Ads_StatsSexValue_Male   Ads_StatsSexValue = "m"
)

type Ads_StatsViewsTimes struct {
	ViewsAdsTimes1      *int    `json:"views_ads_times_1,omitempty"`
	ViewsAdsTimes10     *int    `json:"views_ads_times_10,omitempty"`
	ViewsAdsTimes11Plus *int    `json:"views_ads_times_11_plus,omitempty"`
	ViewsAdsTimes2      *int    `json:"views_ads_times_2,omitempty"`
	ViewsAdsTimes3      *int    `json:"views_ads_times_3,omitempty"`
	ViewsAdsTimes4      *int    `json:"views_ads_times_4,omitempty"`
	ViewsAdsTimes5      *string `json:"views_ads_times_5,omitempty"`
	ViewsAdsTimes6      *int    `json:"views_ads_times_6,omitempty"`
	ViewsAdsTimes7      *int    `json:"views_ads_times_7,omitempty"`
	ViewsAdsTimes8      *int    `json:"views_ads_times_8,omitempty"`
	ViewsAdsTimes9      *int    `json:"views_ads_times_9,omitempty"`
}

type Ads_TargSettings struct {
	// Campaign ID
	CampaignId *int `json:"campaign_id,omitempty"`
	// Ad ID
	Id *int `json:"id,omitempty"`
	Ads_Criteria
}

type Ads_TargStats struct {
	// Audience
	AudienceCount int `json:"audience_count"`
	// Recommended CPC value for 50% reach (old format)
	RecommendedCpc *float64 `json:"recommended_cpc,omitempty"`
	// Recommended CPC value for 50% reach
	RecommendedCpc50 *float64 `json:"recommended_cpc_50,omitempty"`
	// Recommended CPC value for 70% reach
	RecommendedCpc70 *float64 `json:"recommended_cpc_70,omitempty"`
	// Recommended CPC value for 90% reach
	RecommendedCpc90 *float64 `json:"recommended_cpc_90,omitempty"`
	// Recommended CPM value for 50% reach (old format)
	RecommendedCpm *float64 `json:"recommended_cpm,omitempty"`
	// Recommended CPM value for 50% reach
	RecommendedCpm50 *float64 `json:"recommended_cpm_50,omitempty"`
	// Recommended CPM value for 70% reach
	RecommendedCpm70 *float64 `json:"recommended_cpm_70,omitempty"`
	// Recommended CPM value for 90% reach
	RecommendedCpm90 *float64 `json:"recommended_cpm_90,omitempty"`
}

type Ads_TargSuggestions struct {
	// Object ID
	Id *int `json:"id,omitempty"`
	// Object name
	Name *string `json:"name,omitempty"`
}

type Ads_TargSuggestionsCities struct {
	// Object ID
	Id *int `json:"id,omitempty"`
	// Object name
	Name *string `json:"name,omitempty"`
	// Parent object
	Parent *string `json:"parent,omitempty"`
}

type Ads_TargSuggestionsRegions struct {
	// Object ID
	Id *int `json:"id,omitempty"`
	// Object name
	Name *string `json:"name,omitempty"`
	// Object type
	Type *string `json:"type,omitempty"`
}

type Ads_TargSuggestionsSchools struct {
	// Full school title
	Desc *string `json:"desc,omitempty"`
	// School ID
	Id *int `json:"id,omitempty"`
	// School title
	Name *string `json:"name,omitempty"`
	// City name
	Parent *string                         `json:"parent,omitempty"`
	Type   *Ads_TargSuggestionsSchoolsType `json:"type,omitempty"`
}

// Ads_TargSuggestionsSchoolsType School type
type Ads_TargSuggestionsSchoolsType string

const (
	Ads_TargSuggestionsSchoolsType_School     Ads_TargSuggestionsSchoolsType = "school"
	Ads_TargSuggestionsSchoolsType_University Ads_TargSuggestionsSchoolsType = "university"
	Ads_TargSuggestionsSchoolsType_Faculty    Ads_TargSuggestionsSchoolsType = "faculty"
	Ads_TargSuggestionsSchoolsType_Chair      Ads_TargSuggestionsSchoolsType = "chair"
)

type Ads_TargetGroup struct {
	// Audience
	AudienceCount *int `json:"audience_count,omitempty"`
	// Site domain
	Domain *string `json:"domain,omitempty"`
	// Group ID
	Id *int `json:"id,omitempty"`
	// Number of days for user to be in group
	Lifetime *int `json:"lifetime,omitempty"`
	// Group name
	Name *string `json:"name,omitempty"`
	// Pixel code
	Pixel *string `json:"pixel,omitempty"`
}

type Ads_UpdateOfficeUsersResult struct {
	Error *Base_Error `json:"error,omitempty"`
	//  Default: true
	IsSuccess bool `json:"is_success"`
	//  Format: int64
	//  Minimum: 0
	UserId int `json:"user_id"`
}

type Ads_UserSpecification struct {
	//  Minimum: 0
	ClientIds *[]int `json:"client_ids,omitempty"`
	//  Default: false
	GrantAccessToAllClients *bool                `json:"grant_access_to_all_clients,omitempty"`
	Role                    Ads_AccessRolePublic `json:"role"`
	//  Format: int64
	//  Minimum: 0
	UserId     int   `json:"user_id"`
	ViewBudget *bool `json:"view_budget,omitempty"`
}

type Ads_UserSpecificationCutted struct {
	//  Minimum: 0
	ClientId *int                 `json:"client_id,omitempty"`
	Role     Ads_AccessRolePublic `json:"role"`
	//  Format: int64
	//  Minimum: 0
	UserId     int   `json:"user_id"`
	ViewBudget *bool `json:"view_budget,omitempty"`
}

type Ads_Users struct {
	Accesses []Ads_Accesses `json:"accesses"`
	// User ID
	//  Format: int64
	UserId int `json:"user_id"`
}

type Adsweb_GetAdCategoriesResponseCategoriesCategory struct {
	Id   int    `json:"id"`
	Name string `json:"name"`
}

type Adsweb_GetAdUnitsResponseAdUnitsAdUnit struct {
	Id     int     `json:"id"`
	Name   *string `json:"name,omitempty"`
	SiteId int     `json:"site_id"`
}

type Adsweb_GetFraudHistoryResponseEntriesEntry struct {
	Day    string `json:"day"`
	SiteId int    `json:"site_id"`
}

type Adsweb_GetSitesResponseSitesSite struct {
	Domains     *string `json:"domains,omitempty"`
	Id          int     `json:"id"`
	StatusModer *string `json:"status_moder,omitempty"`
	StatusUser  *string `json:"status_user,omitempty"`
}

type Adsweb_GetStatisticsResponseItemsItem struct {
	AdUnitId     *int    `json:"ad_unit_id,omitempty"`
	DayMax       *string `json:"day_max,omitempty"`
	DayMin       *string `json:"day_min,omitempty"`
	DaysCount    *int    `json:"days_count,omitempty"`
	HourMax      *string `json:"hour_max,omitempty"`
	HourMin      *string `json:"hour_min,omitempty"`
	HoursCount   *int    `json:"hours_count,omitempty"`
	MonthMax     *string `json:"month_max,omitempty"`
	MonthMin     *string `json:"month_min,omitempty"`
	MonthsCount  *int    `json:"months_count,omitempty"`
	OverallCount *int    `json:"overall_count,omitempty"`
	SiteId       *int    `json:"site_id,omitempty"`
}

type AppWidgets_Photo struct {
	// Image ID
	Id     string       `json:"id"`
	Images []Base_Image `json:"images"`
}

type AppWidgets_Photos struct {
	//  Minimum: 0
	Count *int                `json:"count,omitempty"`
	Items *[]AppWidgets_Photo `json:"items,omitempty"`
}

type Apps_App struct {
	Apps_AppMin
	// Application author's URL
	//  Format: uri
	AuthorUrl *string `json:"author_url,omitempty"`
	// URL of the app banner with 1120 px in width
	//  Format: uri
	Banner1120 *string `json:"banner_1120,omitempty"`
	// URL of the app banner with 560 px in width
	//  Format: uri
	Banner560 *string `json:"banner_560,omitempty"`
	// Catalog position
	CatalogPosition *int `json:"catalog_position,omitempty"`
	// Application description
	Description *string `json:"description,omitempty"`
	//  Minimum: 0
	Friends *[]int `json:"friends,omitempty"`
	// Genre name
	Genre *string `json:"genre,omitempty"`
	// Genre ID
	GenreId *int `json:"genre_id,omitempty"`
	// URL of the app icon with 16 px in width
	//  Format: uri
	Icon16 *string `json:"icon_16,omitempty"`
	// Information whether the application is multilanguage
	International *bool `json:"international,omitempty"`
	// Information whether application is in mobile catalog
	IsInCatalog *int `json:"is_in_catalog,omitempty"`
	// Is new flag
	IsNew           *Base_BoolInt            `json:"is_new,omitempty"`
	LeaderboardType *Apps_AppLeaderboardType `json:"leaderboard_type,omitempty"`
	// Members number
	MembersCount *int `json:"members_count,omitempty"`
	// Application ID in store
	PlatformId *string `json:"platform_id,omitempty"`
	// Date when the application has been published in Unixtime
	PublishedDate *int `json:"published_date,omitempty"`
	// Is push enabled
	PushEnabled *Base_BoolInt `json:"push_enabled,omitempty"`
	// Screen name
	ScreenName *string `json:"screen_name,omitempty"`
	// Screen orientation
	ScreenOrientation *int `json:"screen_orientation,omitempty"`
	// Application section name
	Section *string `json:"section,omitempty"`
}

// Apps_AppLeaderboardType Leaderboard type
type Apps_AppLeaderboardType int

const (
	Apps_AppLeaderboardType_NotSupported Apps_AppLeaderboardType = 0
	Apps_AppLeaderboardType_Levels       Apps_AppLeaderboardType = 1
	Apps_AppLeaderboardType_Points       Apps_AppLeaderboardType = 2
)

type Apps_AppMin struct {
	// Application author's ID
	AuthorOwnerId *int `json:"author_owner_id,omitempty"`
	// Hex color code without hash sign
	BackgroundLoaderColor *string `json:"background_loader_color,omitempty"`
	// URL of the app icon with 139 px in width
	//  Format: uri
	Icon139 *string `json:"icon_139,omitempty"`
	// URL of the app icon with 150 px in width
	//  Format: uri
	Icon150 *string `json:"icon_150,omitempty"`
	// URL of the app icon with 278 px in width
	//  Format: uri
	Icon278 *string `json:"icon_278,omitempty"`
	// URL of the app icon with 576 px in width
	//  Format: uri
	Icon576 *string `json:"icon_576,omitempty"`
	// URL of the app icon with 75 px in width
	//  Format: uri
	Icon75 *string `json:"icon_75,omitempty"`
	// Application ID
	//  Minimum: 0
	Id int `json:"id"`
	// Is application installed
	IsInstalled *bool `json:"is_installed,omitempty"`
	// SVG data
	LoaderIcon *string `json:"loader_icon,omitempty"`
	// Application title
	Title string       `json:"title"`
	Type  Apps_AppType `json:"type"`
}

// Apps_AppType Application type
type Apps_AppType string

const (
	Apps_AppType_App          Apps_AppType = "app"
	Apps_AppType_Game         Apps_AppType = "game"
	Apps_AppType_Site         Apps_AppType = "site"
	Apps_AppType_Standalone   Apps_AppType = "standalone"
	Apps_AppType_VkApp        Apps_AppType = "vk_app"
	Apps_AppType_CommunityApp Apps_AppType = "community_app"
	Apps_AppType_Html5Game    Apps_AppType = "html5_game"
	Apps_AppType_MiniApp      Apps_AppType = "mini_app"
)

type Apps_CatalogList struct {
	// Total number
	//  Minimum: 0
	Count    int              `json:"count"`
	Items    []Apps_App       `json:"items"`
	Profiles *[]Users_UserMin `json:"profiles,omitempty"`
}

type Apps_Leaderboard struct {
	// Level
	Level *int `json:"level,omitempty"`
	// Points number
	Points *int `json:"points,omitempty"`
	// Score number
	Score *int `json:"score,omitempty"`
	// User ID
	//  Format: int64
	UserId int `json:"user_id"`
}

type Apps_Scope_Name string

const (
	Apps_Scope_Name_Friends Apps_Scope_Name = "friends"
	Apps_Scope_Name_Photos  Apps_Scope_Name = "photos"
	Apps_Scope_Name_Video   Apps_Scope_Name = "video"
	Apps_Scope_Name_Pages   Apps_Scope_Name = "pages"
	Apps_Scope_Name_Status  Apps_Scope_Name = "status"
	Apps_Scope_Name_Notes   Apps_Scope_Name = "notes"
	Apps_Scope_Name_Wall    Apps_Scope_Name = "wall"
	Apps_Scope_Name_Docs    Apps_Scope_Name = "docs"
	Apps_Scope_Name_Groups  Apps_Scope_Name = "groups"
	Apps_Scope_Name_Stats   Apps_Scope_Name = "stats"
	Apps_Scope_Name_Market  Apps_Scope_Name = "market"
)

// Apps_Scope Scope description
type Apps_Scope struct {
	// Scope name
	Name Apps_Scope_Name `json:"name"`
	// Scope title
	Title *string `json:"title,omitempty"`
}

type Audio_Audio_GenreId int

const (
	Audio_Audio_GenreId_Rock               Audio_Audio_GenreId = 1
	Audio_Audio_GenreId_Pop                Audio_Audio_GenreId = 2
	Audio_Audio_GenreId_RapAndHipHop       Audio_Audio_GenreId = 3
	Audio_Audio_GenreId_EasyListening      Audio_Audio_GenreId = 4
	Audio_Audio_GenreId_HouseAndDance      Audio_Audio_GenreId = 5
	Audio_Audio_GenreId_Instrumental       Audio_Audio_GenreId = 6
	Audio_Audio_GenreId_Metal              Audio_Audio_GenreId = 7
	Audio_Audio_GenreId_Alternative        Audio_Audio_GenreId = 21
	Audio_Audio_GenreId_Dubstep            Audio_Audio_GenreId = 8
	Audio_Audio_GenreId_JazzAndBlues       Audio_Audio_GenreId = 1001
	Audio_Audio_GenreId_DrumAndBass        Audio_Audio_GenreId = 10
	Audio_Audio_GenreId_Trance             Audio_Audio_GenreId = 11
	Audio_Audio_GenreId_Chanson            Audio_Audio_GenreId = 12
	Audio_Audio_GenreId_Ethnic             Audio_Audio_GenreId = 13
	Audio_Audio_GenreId_AcousticAndVocal   Audio_Audio_GenreId = 14
	Audio_Audio_GenreId_Reggae             Audio_Audio_GenreId = 15
	Audio_Audio_GenreId_Classical          Audio_Audio_GenreId = 16
	Audio_Audio_GenreId_IndiePop           Audio_Audio_GenreId = 17
	Audio_Audio_GenreId_Speech             Audio_Audio_GenreId = 19
	Audio_Audio_GenreId_ElectropopAndDisco Audio_Audio_GenreId = 22
	Audio_Audio_GenreId_Other              Audio_Audio_GenreId = 18
)

type Audio_Audio struct {
	// Access key for the audio
	AccessKey *string `json:"access_key,omitempty"`
	// Album ID
	//  Minimum: 0
	AlbumId *int `json:"album_id,omitempty"`
	// Artist name
	Artist string `json:"artist"`
	// Date when uploaded
	//  Minimum: 0
	Date *int `json:"date,omitempty"`
	// Duration in seconds
	//  Minimum: 0
	Duration int `json:"duration"`
	// Genre ID
	//  Minimum: 0
	GenreId *Audio_Audio_GenreId `json:"genre_id,omitempty"`
	// Audio ID
	//  Minimum: 0
	Id int `json:"id"`
	// Audio owner's ID
	//  Format: int64
	OwnerId int `json:"owner_id"`
	// Performer name
	Performer *string `json:"performer,omitempty"`
	// Title
	Title string `json:"title"`
	// URL of mp3 file
	//  Format: uri
	Url *string `json:"url,omitempty"`
}

type Base_BoolInt int

const (
	Base_BoolInt_No  Base_BoolInt = 0
	Base_BoolInt_Yes Base_BoolInt = 1
)

type Base_City struct {
	// City ID
	//  Minimum: 1
	Id int `json:"id"`
	// City title
	Title string `json:"title"`
}

type Base_CommentsInfo struct {
	CanClose *Base_BoolInt `json:"can_close,omitempty"`
	CanOpen  *Base_BoolInt `json:"can_open,omitempty"`
	// Information whether current user can comment the post
	CanPost *Base_BoolInt `json:"can_post,omitempty"`
	// Comments number
	//  Minimum: 0
	Count *int                        `json:"count,omitempty"`
	Donut *Wall_WallpostCommentsDonut `json:"donut,omitempty"`
	// Information whether groups can comment the post
	GroupsCanPost *bool `json:"groups_can_post,omitempty"`
}

type Base_Country struct {
	// Country ID
	//  Minimum: 1
	Id int `json:"id"`
	// Country title
	Title string `json:"title"`
}

type Base_CropPhoto struct {
	Crop  Base_CropPhotoCrop `json:"crop"`
	Photo Photos_Photo       `json:"photo"`
	Rect  Base_CropPhotoRect `json:"rect"`
}

type Base_CropPhotoCrop struct {
	// Coordinate X of the left upper corner
	X float64 `json:"x"`
	// Coordinate X of the right lower corner
	X2 float64 `json:"x2"`
	// Coordinate Y of the left upper corner
	Y float64 `json:"y"`
	// Coordinate Y of the right lower corner
	Y2 float64 `json:"y2"`
}

type Base_CropPhotoRect struct {
	// Coordinate X of the left upper corner
	X float64 `json:"x"`
	// Coordinate X of the right lower corner
	X2 float64 `json:"x2"`
	// Coordinate Y of the left upper corner
	Y float64 `json:"y"`
	// Coordinate Y of the right lower corner
	Y2 float64 `json:"y2"`
}

type Base_Error struct {
	// Error code
	ErrorCode int `json:"error_code"`
	// Error message
	ErrorMsg *string `json:"error_msg,omitempty"`
	// Error subcode
	ErrorSubcode *int `json:"error_subcode,omitempty"`
	// Localized error message
	ErrorText     *string              `json:"error_text,omitempty"`
	RequestParams *[]Base_RequestParam `json:"request_params,omitempty"`
}

type Base_Geo struct {
	Coordinates *Base_GeoCoordinates `json:"coordinates,omitempty"`
	Place       *Base_Place          `json:"place,omitempty"`
	// Information whether a map is showed
	Showmap *int `json:"showmap,omitempty"`
	// Place type
	Type *string `json:"type,omitempty"`
}

type Base_GeoCoordinates struct {
	Latitude  float64 `json:"latitude"`
	Longitude float64 `json:"longitude"`
}

type Base_GradientPoint struct {
	// Hex color code without #
	Color string `json:"color"`
	// Point position
	//  Minimum: 0
	//  Maximum: 1
	Position float64 `json:"position"`
}

type Base_Image struct {
	// Image height
	//  Minimum: 0
	Height int     `json:"height"`
	Id     *string `json:"id,omitempty"`
	// Image url
	//  Format: uri
	Url string `json:"url"`
	// Image width
	//  Minimum: 0
	Width int `json:"width"`
}

type Base_Likes struct {
	// Likes number
	//  Minimum: 0
	Count *int `json:"count,omitempty"`
	// Information whether current user likes the photo
	UserLikes *Base_BoolInt `json:"user_likes,omitempty"`
}

type Base_LikesInfo struct {
	// Information whether current user can like the post
	CanLike Base_BoolInt `json:"can_like"`
	// Information whether current user can repost
	CanPublish *Base_BoolInt `json:"can_publish,omitempty"`
	// Likes number
	//  Minimum: 0
	Count int `json:"count"`
	// Information whether current uer has liked the post
	UserLikes int `json:"user_likes"`
}

type Base_Link struct {
	Application *Base_LinkApplication `json:"application,omitempty"`
	Button      *Base_LinkButton      `json:"button,omitempty"`
	// Link caption
	Caption *string `json:"caption,omitempty"`
	// Link description
	Description *string `json:"description,omitempty"`
	// Link ID
	Id *string `json:"id,omitempty"`
	// Information whether the current link is external
	IsExternal *bool         `json:"is_external,omitempty"`
	IsFavorite *bool         `json:"is_favorite,omitempty"`
	Photo      *Photos_Photo `json:"photo,omitempty"`
	// String ID of the page with article preview
	PreviewPage *string `json:"preview_page,omitempty"`
	// URL of the page with article preview
	//  Format: uri
	PreviewUrl   *string            `json:"preview_url,omitempty"`
	Product      *Base_LinkProduct  `json:"product,omitempty"`
	Rating       *Base_LinkRating   `json:"rating,omitempty"`
	TargetObject *Link_TargetObject `json:"target_object,omitempty"`
	// Link title
	Title *string `json:"title,omitempty"`
	// Link URL
	Url string `json:"url"`
	// Video from link
	Video *Video_Video `json:"video,omitempty"`
}

type Base_LinkApplication struct {
	// Application Id
	AppId *float64                   `json:"app_id,omitempty"`
	Store *Base_LinkApplicationStore `json:"store,omitempty"`
}

type Base_LinkApplicationStore struct {
	// Store Id
	Id *float64 `json:"id,omitempty"`
	// Store name
	Name *string `json:"name,omitempty"`
}

type Base_LinkButton struct {
	// Button action
	Action *Base_LinkButtonAction `json:"action,omitempty"`
	// Video album id
	//  Minimum: 1
	AlbumId *int `json:"album_id,omitempty"`
	// Target block id
	BlockId *string `json:"block_id,omitempty"`
	// curator id
	CuratorId *int `json:"curator_id,omitempty"`
	// Button icon name, e.g. 'phone' or 'gift'
	Icon *string `json:"icon,omitempty"`
	// Owner id
	//  Format: int64
	OwnerId *int `json:"owner_id,omitempty"`
	// Target section id
	SectionId *string               `json:"section_id,omitempty"`
	Style     *Base_LinkButtonStyle `json:"style,omitempty"`
	// Button title
	Title *string `json:"title,omitempty"`
}

type Base_LinkButtonAction struct {
	ConsumeReason *string                   `json:"consume_reason,omitempty"`
	Type          Base_LinkButtonActionType `json:"type"`
	// Action URL
	//  Format: uri
	Url *string `json:"url,omitempty"`
}

// Base_LinkButtonActionType Action type
type Base_LinkButtonActionType string

const (
	Base_LinkButtonActionType_OpenUrl Base_LinkButtonActionType = "open_url"
)

// Base_LinkButtonStyle Button style
type Base_LinkButtonStyle string

const (
	Base_LinkButtonStyle_Primary   Base_LinkButtonStyle = "primary"
	Base_LinkButtonStyle_Secondary Base_LinkButtonStyle = "secondary"
)

type Base_LinkProduct struct {
	Merchant    *string      `json:"merchant,omitempty"`
	OrdersCount *int         `json:"orders_count,omitempty"`
	Price       Market_Price `json:"price"`
}

type Base_LinkProductCategory string

// Base_LinkProductStatus Status representation
type Base_LinkProductStatus string

const (
	Base_LinkProductStatus_Active   Base_LinkProductStatus = "active"
	Base_LinkProductStatus_Blocked  Base_LinkProductStatus = "blocked"
	Base_LinkProductStatus_Sold     Base_LinkProductStatus = "sold"
	Base_LinkProductStatus_Deleted  Base_LinkProductStatus = "deleted"
	Base_LinkProductStatus_Archived Base_LinkProductStatus = "archived"
)

type Base_LinkRating struct {
	// Count of reviews
	ReviewsCount *int `json:"reviews_count,omitempty"`
	// Count of stars
	Stars *float64 `json:"stars,omitempty"`
}

type Base_MessageError struct {
	// Error code
	Code *int `json:"code,omitempty"`
	// Error message
	Description *string `json:"description,omitempty"`
}

type Base_Object struct {
	// Object ID
	Id int `json:"id"`
	// Object title
	Title string `json:"title"`
}

type Base_ObjectCount struct {
	// Items count
	//  Minimum: 0
	Count *int `json:"count,omitempty"`
}

type Base_ObjectWithName struct {
	// Object ID
	Id int `json:"id"`
	// Object name
	Name string `json:"name"`
}

type Base_Place struct {
	// Place address
	Address *string `json:"address,omitempty"`
	// Checkins number
	Checkins *int `json:"checkins,omitempty"`
	// City name
	City *string `json:"city,omitempty"`
	// Country name
	Country *string `json:"country,omitempty"`
	// Date of the place creation in Unixtime
	Created *int `json:"created,omitempty"`
	// URL of the place's icon
	//  Format: uri
	Icon *string `json:"icon,omitempty"`
	// Place ID
	Id *int `json:"id,omitempty"`
	// Place latitude
	Latitude *float64 `json:"latitude,omitempty"`
	// Place longitude
	Longitude *float64 `json:"longitude,omitempty"`
	// Place title
	Title *string `json:"title,omitempty"`
	// Place type
	Type *string `json:"type,omitempty"`
}

type Base_PropertyExists int

const (
	Base_PropertyExists_PropertyExists Base_PropertyExists = 1
)

// Base_RepostsInfo Count of views
type Base_RepostsInfo struct {
	// Total reposts counter. Sum of wall and mail reposts counters
	//  Minimum: 0
	Count int `json:"count"`
	// Mail reposts counter
	//  Minimum: 0
	MailCount *int `json:"mail_count,omitempty"`
	// Information whether current user has reposted the post
	UserReposted *int `json:"user_reposted,omitempty"`
	// Wall reposts counter
	//  Minimum: 0
	WallCount *int `json:"wall_count,omitempty"`
}

type Base_RequestParam struct {
	// Parameter name
	Key *string `json:"key,omitempty"`
	// Parameter value
	Value *string `json:"value,omitempty"`
}

type Base_Sex int

const (
	Base_Sex_Unknown Base_Sex = 0
	Base_Sex_Female  Base_Sex = 1
	Base_Sex_Male    Base_Sex = 2
)

//easyjson:skip
type Base_Sticker struct {
	raw []byte
}

func (o *Base_Sticker) MarshalJSON() ([]byte, error) {
	return o.raw, nil
}

func (o *Base_Sticker) UnmarshalJSON(body []byte) (err error) {
	o.raw = body
	return nil
}

func (o Base_Sticker) Raw() []byte {
	return o.raw
}

type Base_StickerAnimation_Type string

const (
	Base_StickerAnimation_Type_Light Base_StickerAnimation_Type = "light"
	Base_StickerAnimation_Type_Dark  Base_StickerAnimation_Type = "dark"
)

type Base_StickerAnimation struct {
	// Type of animation script
	Type *Base_StickerAnimation_Type `json:"type,omitempty"`
	// URL of animation script
	//  Format: uri
	Url *string `json:"url,omitempty"`
}

type Base_StickerNew struct {
	// URL of sticker animation script
	//  Format: uri
	AnimationUrl *string `json:"animation_url,omitempty"`
	// Array of sticker animation script objects
	Animations           *[]Base_StickerAnimation `json:"animations,omitempty"`
	Images               *[]Base_Image            `json:"images,omitempty"`
	ImagesWithBackground *[]Base_Image            `json:"images_with_background,omitempty"`
	// Information whether the sticker is allowed
	IsAllowed *bool `json:"is_allowed,omitempty"`
	// Pack ID
	ProductId *int `json:"product_id,omitempty"`
	// Sticker ID
	StickerId *int `json:"sticker_id,omitempty"`
}

type Base_StickerOld struct {
	// Height in px
	Height *int `json:"height,omitempty"`
	// Sticker ID
	Id *int `json:"id,omitempty"`
	// Information whether the sticker is allowed
	IsAllowed *bool `json:"is_allowed,omitempty"`
	// URL of the preview image with 128 px in height
	//  Format: uri
	Photo128 *string `json:"photo_128,omitempty"`
	// URL of the preview image with 256 px in height
	//  Format: uri
	Photo256 *string `json:"photo_256,omitempty"`
	// URL of the preview image with 352 px in height
	//  Format: uri
	Photo352 *string `json:"photo_352,omitempty"`
	// URL of the preview image with 512 px in height
	//  Format: uri
	Photo512 *string `json:"photo_512,omitempty"`
	// URL of the preview image with 64 px in height
	//  Format: uri
	Photo64 *string `json:"photo_64,omitempty"`
	// Pack ID
	ProductId *int `json:"product_id,omitempty"`
	// Width in px
	Width *int `json:"width,omitempty"`
}

type Base_StickersList []Base_StickerNew

type Base_UploadServer struct {
	// Upload URL
	//  Format: uri
	UploadUrl string `json:"upload_url"`
}

type Base_UserGroupFields string

const (
	Base_UserGroupFields_About                  Base_UserGroupFields = "about"
	Base_UserGroupFields_ActionButton           Base_UserGroupFields = "action_button"
	Base_UserGroupFields_Activities             Base_UserGroupFields = "activities"
	Base_UserGroupFields_Activity               Base_UserGroupFields = "activity"
	Base_UserGroupFields_Addresses              Base_UserGroupFields = "addresses"
	Base_UserGroupFields_AdminLevel             Base_UserGroupFields = "admin_level"
	Base_UserGroupFields_AgeLimits              Base_UserGroupFields = "age_limits"
	Base_UserGroupFields_AuthorId               Base_UserGroupFields = "author_id"
	Base_UserGroupFields_BanInfo                Base_UserGroupFields = "ban_info"
	Base_UserGroupFields_Bdate                  Base_UserGroupFields = "bdate"
	Base_UserGroupFields_Blacklisted            Base_UserGroupFields = "blacklisted"
	Base_UserGroupFields_BlacklistedByMe        Base_UserGroupFields = "blacklisted_by_me"
	Base_UserGroupFields_Books                  Base_UserGroupFields = "books"
	Base_UserGroupFields_CanCreateTopic         Base_UserGroupFields = "can_create_topic"
	Base_UserGroupFields_CanMessage             Base_UserGroupFields = "can_message"
	Base_UserGroupFields_CanPost                Base_UserGroupFields = "can_post"
	Base_UserGroupFields_CanSeeAllPosts         Base_UserGroupFields = "can_see_all_posts"
	Base_UserGroupFields_CanSeeAudio            Base_UserGroupFields = "can_see_audio"
	Base_UserGroupFields_CanSendFriendRequest   Base_UserGroupFields = "can_send_friend_request"
	Base_UserGroupFields_CanUploadVideo         Base_UserGroupFields = "can_upload_video"
	Base_UserGroupFields_CanWritePrivateMessage Base_UserGroupFields = "can_write_private_message"
	Base_UserGroupFields_Career                 Base_UserGroupFields = "career"
	Base_UserGroupFields_City                   Base_UserGroupFields = "city"
	Base_UserGroupFields_CommonCount            Base_UserGroupFields = "common_count"
	Base_UserGroupFields_Connections            Base_UserGroupFields = "connections"
	Base_UserGroupFields_Contacts               Base_UserGroupFields = "contacts"
	Base_UserGroupFields_Counters               Base_UserGroupFields = "counters"
	Base_UserGroupFields_Country                Base_UserGroupFields = "country"
	Base_UserGroupFields_Cover                  Base_UserGroupFields = "cover"
	Base_UserGroupFields_CropPhoto              Base_UserGroupFields = "crop_photo"
	Base_UserGroupFields_Deactivated            Base_UserGroupFields = "deactivated"
	Base_UserGroupFields_Description            Base_UserGroupFields = "description"
	Base_UserGroupFields_Domain                 Base_UserGroupFields = "domain"
	Base_UserGroupFields_Education              Base_UserGroupFields = "education"
	Base_UserGroupFields_Exports                Base_UserGroupFields = "exports"
	Base_UserGroupFields_FinishDate             Base_UserGroupFields = "finish_date"
	Base_UserGroupFields_FixedPost              Base_UserGroupFields = "fixed_post"
	Base_UserGroupFields_FollowersCount         Base_UserGroupFields = "followers_count"
	Base_UserGroupFields_FriendStatus           Base_UserGroupFields = "friend_status"
	Base_UserGroupFields_Games                  Base_UserGroupFields = "games"
	Base_UserGroupFields_HasMarketApp           Base_UserGroupFields = "has_market_app"
	Base_UserGroupFields_HasMobile              Base_UserGroupFields = "has_mobile"
	Base_UserGroupFields_HasPhoto               Base_UserGroupFields = "has_photo"
	Base_UserGroupFields_HomeTown               Base_UserGroupFields = "home_town"
	Base_UserGroupFields_Id                     Base_UserGroupFields = "id"
	Base_UserGroupFields_Interests              Base_UserGroupFields = "interests"
	Base_UserGroupFields_IsAdmin                Base_UserGroupFields = "is_admin"
	Base_UserGroupFields_IsClosed               Base_UserGroupFields = "is_closed"
	Base_UserGroupFields_IsFavorite             Base_UserGroupFields = "is_favorite"
	Base_UserGroupFields_IsFriend               Base_UserGroupFields = "is_friend"
	Base_UserGroupFields_IsHiddenFromFeed       Base_UserGroupFields = "is_hidden_from_feed"
	Base_UserGroupFields_IsMember               Base_UserGroupFields = "is_member"
	Base_UserGroupFields_IsMessagesBlocked      Base_UserGroupFields = "is_messages_blocked"
	Base_UserGroupFields_CanSendNotify          Base_UserGroupFields = "can_send_notify"
	Base_UserGroupFields_IsSubscribed           Base_UserGroupFields = "is_subscribed"
	Base_UserGroupFields_LastSeen               Base_UserGroupFields = "last_seen"
	Base_UserGroupFields_Links                  Base_UserGroupFields = "links"
	Base_UserGroupFields_Lists                  Base_UserGroupFields = "lists"
	Base_UserGroupFields_MaidenName             Base_UserGroupFields = "maiden_name"
	Base_UserGroupFields_MainAlbumId            Base_UserGroupFields = "main_album_id"
	Base_UserGroupFields_MainSection            Base_UserGroupFields = "main_section"
	Base_UserGroupFields_Market                 Base_UserGroupFields = "market"
	Base_UserGroupFields_MemberStatus           Base_UserGroupFields = "member_status"
	Base_UserGroupFields_MembersCount           Base_UserGroupFields = "members_count"
	Base_UserGroupFields_Military               Base_UserGroupFields = "military"
	Base_UserGroupFields_Movies                 Base_UserGroupFields = "movies"
	Base_UserGroupFields_Music                  Base_UserGroupFields = "music"
	Base_UserGroupFields_Name                   Base_UserGroupFields = "name"
	Base_UserGroupFields_Nickname               Base_UserGroupFields = "nickname"
	Base_UserGroupFields_Occupation             Base_UserGroupFields = "occupation"
	Base_UserGroupFields_Online                 Base_UserGroupFields = "online"
	Base_UserGroupFields_OnlineStatus           Base_UserGroupFields = "online_status"
	Base_UserGroupFields_Personal               Base_UserGroupFields = "personal"
	Base_UserGroupFields_Phone                  Base_UserGroupFields = "phone"
	Base_UserGroupFields_Photo100               Base_UserGroupFields = "photo_100"
	Base_UserGroupFields_Photo200               Base_UserGroupFields = "photo_200"
	Base_UserGroupFields_Photo200Orig           Base_UserGroupFields = "photo_200_orig"
	Base_UserGroupFields_Photo400Orig           Base_UserGroupFields = "photo_400_orig"
	Base_UserGroupFields_Photo50                Base_UserGroupFields = "photo_50"
	Base_UserGroupFields_PhotoId                Base_UserGroupFields = "photo_id"
	Base_UserGroupFields_PhotoMax               Base_UserGroupFields = "photo_max"
	Base_UserGroupFields_PhotoMaxOrig           Base_UserGroupFields = "photo_max_orig"
	Base_UserGroupFields_Quotes                 Base_UserGroupFields = "quotes"
	Base_UserGroupFields_Relation               Base_UserGroupFields = "relation"
	Base_UserGroupFields_Relatives              Base_UserGroupFields = "relatives"
	Base_UserGroupFields_Schools                Base_UserGroupFields = "schools"
	Base_UserGroupFields_ScreenName             Base_UserGroupFields = "screen_name"
	Base_UserGroupFields_Sex                    Base_UserGroupFields = "sex"
	Base_UserGroupFields_Site                   Base_UserGroupFields = "site"
	Base_UserGroupFields_StartDate              Base_UserGroupFields = "start_date"
	Base_UserGroupFields_Status                 Base_UserGroupFields = "status"
	Base_UserGroupFields_Timezone               Base_UserGroupFields = "timezone"
	Base_UserGroupFields_Trending               Base_UserGroupFields = "trending"
	Base_UserGroupFields_Tv                     Base_UserGroupFields = "tv"
	Base_UserGroupFields_Type                   Base_UserGroupFields = "type"
	Base_UserGroupFields_Universities           Base_UserGroupFields = "universities"
	Base_UserGroupFields_Verified               Base_UserGroupFields = "verified"
	Base_UserGroupFields_WallComments           Base_UserGroupFields = "wall_comments"
	Base_UserGroupFields_WikiPage               Base_UserGroupFields = "wiki_page"
	Base_UserGroupFields_FirstName              Base_UserGroupFields = "first_name"
	Base_UserGroupFields_FirstNameAcc           Base_UserGroupFields = "first_name_acc"
	Base_UserGroupFields_FirstNameDat           Base_UserGroupFields = "first_name_dat"
	Base_UserGroupFields_FirstNameGen           Base_UserGroupFields = "first_name_gen"
	Base_UserGroupFields_LastName               Base_UserGroupFields = "last_name"
	Base_UserGroupFields_LastNameAcc            Base_UserGroupFields = "last_name_acc"
	Base_UserGroupFields_LastNameDat            Base_UserGroupFields = "last_name_dat"
	Base_UserGroupFields_LastNameGen            Base_UserGroupFields = "last_name_gen"
	Base_UserGroupFields_CanSubscribeStories    Base_UserGroupFields = "can_subscribe_stories"
	Base_UserGroupFields_IsSubscribedStories    Base_UserGroupFields = "is_subscribed_stories"
	Base_UserGroupFields_VkAdminStatus          Base_UserGroupFields = "vk_admin_status"
	Base_UserGroupFields_CanUploadStory         Base_UserGroupFields = "can_upload_story"
)

type Base_UserId struct {
	// User ID
	//  Format: int64
	UserId *int `json:"user_id,omitempty"`
}

// Board_DefaultOrder Sort type
type Board_DefaultOrder int

const (
	Board_DefaultOrder_DescUpdated Board_DefaultOrder = 1
	Board_DefaultOrder_DescCreated Board_DefaultOrder = 2
	Board_DefaultOrder_AscUpdated  Board_DefaultOrder = -1
	Board_DefaultOrder_AscCreated  Board_DefaultOrder = -2
)

type Board_Topic struct {
	// Comments number
	Comments *int `json:"comments,omitempty"`
	// Date when the topic has been created in Unixtime
	Created *int `json:"created,omitempty"`
	// Creator ID
	CreatedBy *int `json:"created_by,omitempty"`
	// First comment text
	FirstComment *string `json:"first_comment,omitempty"`
	// Topic ID
	Id *int `json:"id,omitempty"`
	// Information whether the topic is closed
	IsClosed *Base_BoolInt `json:"is_closed,omitempty"`
	// Information whether the topic is fixed
	IsFixed *Base_BoolInt `json:"is_fixed,omitempty"`
	// Last comment text
	LastComment *string `json:"last_comment,omitempty"`
	// Topic title
	Title *string `json:"title,omitempty"`
	// Date when the topic has been updated in Unixtime
	Updated *int `json:"updated,omitempty"`
	// ID of user who updated the topic
	UpdatedBy *int `json:"updated_by,omitempty"`
}

type Board_TopicComment struct {
	Attachments *[]Wall_CommentAttachment `json:"attachments,omitempty"`
	// Information whether current user can edit the comment
	CanEdit *Base_BoolInt `json:"can_edit,omitempty"`
	// Date when the comment has been added in Unixtime
	//  Minimum: 0
	Date int `json:"date"`
	// Author ID
	FromId int `json:"from_id"`
	// Comment ID
	//  Minimum: 1
	Id    int             `json:"id"`
	Likes *Base_LikesInfo `json:"likes,omitempty"`
	// Real position of the comment
	RealOffset *int `json:"real_offset,omitempty"`
	// Comment text
	Text string `json:"text"`
}

type Callback_Base struct {
	// Unique event id. If it passed twice or more - you should ignore it.
	EventId string `json:"event_id"`
	//  Format: int64
	//  Minimum: 0
	GroupId int           `json:"group_id"`
	Secret  *string       `json:"secret,omitempty"`
	Type    Callback_Type `json:"type"`
}

type Callback_BoardPostDelete struct {
	//  Minimum: 0
	Id int `json:"id"`
	//  Minimum: 0
	TopicId int `json:"topic_id"`
	//  Minimum: 0
	TopicOwnerId int `json:"topic_owner_id"`
}

type Callback_Confirmation struct {
	Callback_Base
	//  Default: confirmation
	Type *Callback_Type `json:"type,omitempty"`
}

type Callback_DonutMoneyWithdraw struct {
	//  Minimum: 0
	Amount float64 `json:"amount"`
	//  Minimum: 0
	AmountWithoutFee float64 `json:"amount_without_fee"`
}

type Callback_DonutMoneyWithdrawError struct {
	//  Minimum: 0
	Reason string `json:"reason"`
}

type Callback_DonutSubscriptionCancelled struct {
	//  Format: int64
	//  Minimum: 0
	UserId *int `json:"user_id,omitempty"`
}

type Callback_DonutSubscriptionCreate struct {
	//  Minimum: 0
	Amount int `json:"amount"`
	//  Minimum: 0
	AmountWithoutFee float64 `json:"amount_without_fee"`
	//  Format: int64
	//  Minimum: 0
	UserId *int `json:"user_id,omitempty"`
}

type Callback_DonutSubscriptionExpired struct {
	//  Format: int64
	//  Minimum: 0
	UserId *int `json:"user_id,omitempty"`
}

type Callback_DonutSubscriptionPriceChanged struct {
	//  Minimum: 0
	AmountDiff *float64 `json:"amount_diff,omitempty"`
	//  Minimum: 0
	AmountDiffWithoutFee *float64 `json:"amount_diff_without_fee,omitempty"`
	//  Minimum: 0
	AmountNew int `json:"amount_new"`
	//  Minimum: 0
	AmountOld int `json:"amount_old"`
	//  Format: int64
	//  Minimum: 0
	UserId *int `json:"user_id,omitempty"`
}

type Callback_DonutSubscriptionProlonged struct {
	//  Minimum: 0
	Amount int `json:"amount"`
	//  Minimum: 0
	AmountWithoutFee float64 `json:"amount_without_fee"`
	//  Format: int64
	//  Minimum: 0
	UserId *int `json:"user_id,omitempty"`
}

type Callback_GroupChangePhoto struct {
	Photo Photos_Photo `json:"photo"`
	//  Format: int64
	//  Minimum: 0
	UserId int `json:"user_id"`
}

type Callback_GroupChangeSettings struct {
	Self Base_BoolInt `json:"self"`
	//  Format: int64
	//  Minimum: 0
	UserId int `json:"user_id"`
}

type Callback_GroupJoin struct {
	JoinType Callback_GroupJoinType `json:"join_type"`
	//  Format: int64
	UserId int `json:"user_id"`
}

type Callback_GroupJoinType string

const (
	Callback_GroupJoinType_Join     Callback_GroupJoinType = "join"
	Callback_GroupJoinType_Unsure   Callback_GroupJoinType = "unsure"
	Callback_GroupJoinType_Accepted Callback_GroupJoinType = "accepted"
	Callback_GroupJoinType_Approved Callback_GroupJoinType = "approved"
	Callback_GroupJoinType_Request  Callback_GroupJoinType = "request"
)

type Callback_GroupLeave struct {
	Self *Base_BoolInt `json:"self,omitempty"`
	//  Format: int64
	//  Minimum: 0
	UserId *int `json:"user_id,omitempty"`
}

type Callback_GroupMarket int

const (
	Callback_GroupMarket_Disabled Callback_GroupMarket = 0
	Callback_GroupMarket_Open     Callback_GroupMarket = 1
)

type Callback_GroupOfficerRole int

const (
	Callback_GroupOfficerRole_None          Callback_GroupOfficerRole = 0
	Callback_GroupOfficerRole_Moderator     Callback_GroupOfficerRole = 1
	Callback_GroupOfficerRole_Editor        Callback_GroupOfficerRole = 2
	Callback_GroupOfficerRole_Administrator Callback_GroupOfficerRole = 3
)

type Callback_GroupOfficersEdit struct {
	//  Minimum: 0
	AdminId  int                       `json:"admin_id"`
	LevelNew Callback_GroupOfficerRole `json:"level_new"`
	LevelOld Callback_GroupOfficerRole `json:"level_old"`
	//  Format: int64
	//  Minimum: 0
	UserId int `json:"user_id"`
}

type Callback_GroupSettingsChanges struct {
	Access              *Groups_GroupIsClosed      `json:"access,omitempty"`
	AgeLimits           *Groups_GroupFullAgeLimits `json:"age_limits,omitempty"`
	Description         *string                    `json:"description,omitempty"`
	EnableAudio         *Groups_GroupAudio         `json:"enable_audio,omitempty"`
	EnableMarket        *Callback_GroupMarket      `json:"enable_market,omitempty"`
	EnablePhoto         *Groups_GroupPhotos        `json:"enable_photo,omitempty"`
	EnableStatusDefault *Groups_GroupWall          `json:"enable_status_default,omitempty"`
	EnableVideo         *Groups_GroupVideo         `json:"enable_video,omitempty"`
	PublicCategory      *int                       `json:"public_category,omitempty"`
	PublicSubcategory   *int                       `json:"public_subcategory,omitempty"`
	ScreenName          *string                    `json:"screen_name,omitempty"`
	Title               *string                    `json:"title,omitempty"`
	Website             *string                    `json:"website,omitempty"`
}

type Callback_LikeAddRemove_ObjectType string

const (
	Callback_LikeAddRemove_ObjectType_Video         Callback_LikeAddRemove_ObjectType = "video"
	Callback_LikeAddRemove_ObjectType_Photo         Callback_LikeAddRemove_ObjectType = "photo"
	Callback_LikeAddRemove_ObjectType_Post          Callback_LikeAddRemove_ObjectType = "post"
	Callback_LikeAddRemove_ObjectType_Comment       Callback_LikeAddRemove_ObjectType = "comment"
	Callback_LikeAddRemove_ObjectType_Note          Callback_LikeAddRemove_ObjectType = "note"
	Callback_LikeAddRemove_ObjectType_TopicComment  Callback_LikeAddRemove_ObjectType = "topic_comment"
	Callback_LikeAddRemove_ObjectType_PhotoComment  Callback_LikeAddRemove_ObjectType = "photo_comment"
	Callback_LikeAddRemove_ObjectType_VideoComment  Callback_LikeAddRemove_ObjectType = "video_comment"
	Callback_LikeAddRemove_ObjectType_Market        Callback_LikeAddRemove_ObjectType = "market"
	Callback_LikeAddRemove_ObjectType_MarketComment Callback_LikeAddRemove_ObjectType = "market_comment"
)

type Callback_LikeAddRemove struct {
	LikerId       int                               `json:"liker_id"`
	ObjectId      int                               `json:"object_id"`
	ObjectOwnerId int                               `json:"object_owner_id"`
	ObjectType    Callback_LikeAddRemove_ObjectType `json:"object_type"`
	//  Minimum: 0
	PostId int `json:"post_id"`
	//  Minimum: 0
	ThreadReplyId *int `json:"thread_reply_id,omitempty"`
}

type Callback_MarketComment struct {
	//  Minimum: 0
	Date   int `json:"date"`
	FromId int `json:"from_id"`
	//  Minimum: 0
	Id            int     `json:"id"`
	MarketOwnerId *int    `json:"market_owner_id,omitempty"`
	PhotoId       *int    `json:"photo_id,omitempty"`
	Text          *string `json:"text,omitempty"`
}

type Callback_MarketCommentDelete struct {
	Id int `json:"id"`
	//  Minimum: 0
	ItemId int `json:"item_id"`
	//  Format: int64
	OwnerId int `json:"owner_id"`
	//  Format: int64
	//  Minimum: 0
	UserId int `json:"user_id"`
}

type Callback_MessageAllow struct {
	Callback_Base
	Object Callback_MessageAllowObject `json:"object"`
	//  Default: message_allow
	Type *Callback_Type `json:"type,omitempty"`
}

type Callback_MessageAllowObject struct {
	Key string `json:"key"`
	//  Format: int64
	//  Minimum: 0
	UserId int `json:"user_id"`
}

type Callback_MessageDeny struct {
	//  Format: int64
	//  Minimum: 0
	UserId int `json:"user_id"`
}

type Callback_MessageEdit struct {
	Callback_Base
	Object Messages_Message `json:"object"`
	//  Default: message_edit
	Type *Callback_Type `json:"type,omitempty"`
}

type Callback_MessageNew struct {
	Callback_Base
	Object Callback_MessageObject `json:"object"`
	//  Default: message_new
	Type *Callback_Type `json:"type,omitempty"`
}

type Callback_MessageObject struct {
	ClientInfo *Client_InfoForBots `json:"client_info,omitempty"`
	Message    *Messages_Message   `json:"message,omitempty"`
}

type Callback_MessageReply struct {
	Callback_Base
	Object Messages_Message `json:"object"`
	//  Default: message_reply
	Type *Callback_Type `json:"type,omitempty"`
}

type Callback_PhotoComment struct {
	//  Minimum: 0
	Date int `json:"date"`
	//  Minimum: 0
	FromId int `json:"from_id"`
	//  Minimum: 0
	Id           int    `json:"id"`
	PhotoOwnerId int    `json:"photo_owner_id"`
	Text         string `json:"text"`
}

type Callback_PhotoCommentDelete struct {
	//  Minimum: 0
	Id int `json:"id"`
	//  Format: int64
	//  Minimum: 0
	OwnerId int `json:"owner_id"`
	//  Minimum: 0
	PhotoId int `json:"photo_id"`
	//  Format: int64
	//  Minimum: 0
	UserId int `json:"user_id"`
}

type Callback_PollVoteNew struct {
	//  Minimum: 0
	OptionId int `json:"option_id"`
	//  Format: int64
	OwnerId int `json:"owner_id"`
	//  Minimum: 0
	PollId int `json:"poll_id"`
	//  Format: int64
	//  Minimum: 0
	UserId int `json:"user_id"`
}

type Callback_QrScan struct {
	Data    string `json:"data"`
	Reread  bool   `json:"reread"`
	Subtype string `json:"subtype"`
	Type    string `json:"type"`
	//  Format: int64
	//  Minimum: 0
	UserId int `json:"user_id"`
}

type Callback_Type string

const (
	Callback_Type_AudioNew             Callback_Type = "audio_new"
	Callback_Type_BoardPostNew         Callback_Type = "board_post_new"
	Callback_Type_BoardPostEdit        Callback_Type = "board_post_edit"
	Callback_Type_BoardPostRestore     Callback_Type = "board_post_restore"
	Callback_Type_BoardPostDelete      Callback_Type = "board_post_delete"
	Callback_Type_Confirmation         Callback_Type = "confirmation"
	Callback_Type_GroupLeave           Callback_Type = "group_leave"
	Callback_Type_GroupJoin            Callback_Type = "group_join"
	Callback_Type_GroupChangePhoto     Callback_Type = "group_change_photo"
	Callback_Type_GroupChangeSettings  Callback_Type = "group_change_settings"
	Callback_Type_GroupOfficersEdit    Callback_Type = "group_officers_edit"
	Callback_Type_LeadFormsNew         Callback_Type = "lead_forms_new"
	Callback_Type_MarketCommentNew     Callback_Type = "market_comment_new"
	Callback_Type_MarketCommentDelete  Callback_Type = "market_comment_delete"
	Callback_Type_MarketCommentEdit    Callback_Type = "market_comment_edit"
	Callback_Type_MarketCommentRestore Callback_Type = "market_comment_restore"
	Callback_Type_MessageNew           Callback_Type = "message_new"
	Callback_Type_MessageReply         Callback_Type = "message_reply"
	Callback_Type_MessageEdit          Callback_Type = "message_edit"
	Callback_Type_MessageAllow         Callback_Type = "message_allow"
	Callback_Type_MessageDeny          Callback_Type = "message_deny"
	Callback_Type_MessageRead          Callback_Type = "message_read"
	Callback_Type_MessageTypingState   Callback_Type = "message_typing_state"
	Callback_Type_MessagesEdit         Callback_Type = "messages_edit"
	Callback_Type_PhotoNew             Callback_Type = "photo_new"
	Callback_Type_PhotoCommentNew      Callback_Type = "photo_comment_new"
	Callback_Type_PhotoCommentDelete   Callback_Type = "photo_comment_delete"
	Callback_Type_PhotoCommentEdit     Callback_Type = "photo_comment_edit"
	Callback_Type_PhotoCommentRestore  Callback_Type = "photo_comment_restore"
	Callback_Type_PollVoteNew          Callback_Type = "poll_vote_new"
	Callback_Type_UserBlock            Callback_Type = "user_block"
	Callback_Type_UserUnblock          Callback_Type = "user_unblock"
	Callback_Type_VideoNew             Callback_Type = "video_new"
	Callback_Type_VideoCommentNew      Callback_Type = "video_comment_new"
	Callback_Type_VideoCommentDelete   Callback_Type = "video_comment_delete"
	Callback_Type_VideoCommentEdit     Callback_Type = "video_comment_edit"
	Callback_Type_VideoCommentRestore  Callback_Type = "video_comment_restore"
	Callback_Type_WallPostNew          Callback_Type = "wall_post_new"
	Callback_Type_WallReplyNew         Callback_Type = "wall_reply_new"
	Callback_Type_WallReplyEdit        Callback_Type = "wall_reply_edit"
	Callback_Type_WallReplyDelete      Callback_Type = "wall_reply_delete"
	Callback_Type_WallReplyRestore     Callback_Type = "wall_reply_restore"
	Callback_Type_WallRepost           Callback_Type = "wall_repost"
)

type Callback_UserBlock struct {
	//  Minimum: 0
	AdminId int     `json:"admin_id"`
	Comment *string `json:"comment,omitempty"`
	//  Minimum: 0
	Reason int `json:"reason"`
	//  Minimum: 0
	UnblockDate int `json:"unblock_date"`
	//  Format: int64
	//  Minimum: 0
	UserId int `json:"user_id"`
}

type Callback_UserUnblock struct {
	//  Minimum: 0
	AdminId int `json:"admin_id"`
	//  Minimum: 0
	ByEndDate int `json:"by_end_date"`
	//  Format: int64
	//  Minimum: 0
	UserId int `json:"user_id"`
}

type Callback_VideoComment struct {
	//  Minimum: 0
	Date   int `json:"date"`
	FromId int `json:"from_id"`
	//  Minimum: 0
	Id           int    `json:"id"`
	Text         string `json:"text"`
	VideoOwnerId int    `json:"video_owner_id"`
}

type Callback_VideoCommentDelete struct {
	//  Minimum: 0
	Id int `json:"id"`
	//  Format: int64
	OwnerId int `json:"owner_id"`
	//  Format: int64
	//  Minimum: 0
	UserId int `json:"user_id"`
	//  Minimum: 0
	VideoId int `json:"video_id"`
}

type Callback_WallCommentDelete struct {
	//  Minimum: 0
	Id int `json:"id"`
	//  Format: int64
	OwnerId int `json:"owner_id"`
	//  Minimum: 0
	PostId int `json:"post_id"`
	//  Format: int64
	//  Minimum: 0
	UserId int `json:"user_id"`
}

type Calls_Call struct {
	// Call duration
	//  Minimum: 0
	Duration *int `json:"duration,omitempty"`
	// Caller initiator
	//  Minimum: 0
	InitiatorId  int                 `json:"initiator_id"`
	Participants *Calls_Participants `json:"participants,omitempty"`
	// Caller receiver
	//  Minimum: 0
	ReceiverId int            `json:"receiver_id"`
	State      Calls_EndState `json:"state"`
	// Timestamp for call
	Time int `json:"time"`
	// Was this call initiated as video call
	Video *bool `json:"video,omitempty"`
}

// Calls_EndState State in which call ended up
type Calls_EndState string

const (
	Calls_EndState_CanceledByInitiator Calls_EndState = "canceled_by_initiator"
	Calls_EndState_CanceledByReceiver  Calls_EndState = "canceled_by_receiver"
	Calls_EndState_Reached             Calls_EndState = "reached"
)

type Calls_Participants struct {
	// Participants count
	//  Minimum: 0
	Count *int `json:"count,omitempty"`
	//  Format: int64
	List *[]int `json:"list,omitempty"`
}

type Client_InfoForBots struct {
	ButtonActions *[]Messages_TemplateActionTypeNames `json:"button_actions,omitempty"`
	// client has support carousel
	Carousel *bool `json:"carousel,omitempty"`
	// client has support inline keyboard
	InlineKeyboard *bool `json:"inline_keyboard,omitempty"`
	// client has support keyboard
	Keyboard *bool `json:"keyboard,omitempty"`
	// client or user language id
	LangId *int `json:"lang_id,omitempty"`
}

type Comment_Thread struct {
	// Information whether current user can comment the post
	CanPost *bool `json:"can_post,omitempty"`
	// Comments number
	//  Minimum: 0
	Count int `json:"count"`
	// Information whether groups can comment the post
	GroupsCanPost *bool               `json:"groups_can_post,omitempty"`
	Items         *[]Wall_WallComment `json:"items,omitempty"`
	// Information whether recommended to display reply button
	ShowReplyButton *bool `json:"show_reply_button,omitempty"`
}

type Database_City struct {
	Base_Object
	// Area title
	Area *string `json:"area,omitempty"`
	// Information whether the city is included in important cities list
	Important *Base_BoolInt `json:"important,omitempty"`
	// Region title
	Region *string `json:"region,omitempty"`
}

type Database_CityById Base_Object

type Database_Faculty struct {
	// Faculty ID
	Id *int `json:"id,omitempty"`
	// Faculty title
	Title *string `json:"title,omitempty"`
}

type Database_Region struct {
	// Region ID
	Id *int `json:"id,omitempty"`
	// Region title
	Title *string `json:"title,omitempty"`
}

type Database_School struct {
	// School ID
	Id *int `json:"id,omitempty"`
	// School title
	Title *string `json:"title,omitempty"`
}

type Database_Station struct {
	// City ID
	//  Minimum: 1
	CityId *int `json:"city_id,omitempty"`
	// Hex color code without #
	Color *string `json:"color,omitempty"`
	// Station ID
	//  Minimum: 1
	Id int `json:"id"`
	// Station name
	Name string `json:"name"`
}

type Database_University struct {
	// University ID
	Id *int `json:"id,omitempty"`
	// University title
	Title *string `json:"title,omitempty"`
}

type Docs_Doc struct {
	// Access key for the document
	AccessKey *string `json:"access_key,omitempty"`
	// Date when file has been uploaded in Unixtime
	//  Minimum: 0
	Date int `json:"date"`
	// File extension
	Ext string `json:"ext"`
	// Document ID
	//  Minimum: 0
	Id         int           `json:"id"`
	IsLicensed *Base_BoolInt `json:"is_licensed,omitempty"`
	// Document owner ID
	//  Format: int64
	OwnerId int              `json:"owner_id"`
	Preview *Docs_DocPreview `json:"preview,omitempty"`
	// File size in bites
	//  Minimum: 0
	Size int `json:"size"`
	// Document tags
	Tags *[]string `json:"tags,omitempty"`
	// Document title
	Title string `json:"title"`
	// Document type
	Type int `json:"type"`
	// File URL
	//  Format: uri
	Url *string `json:"url,omitempty"`
}

// Docs_DocAttachmentType Doc attachment type
type Docs_DocAttachmentType string

const (
	Docs_DocAttachmentType_Doc          Docs_DocAttachmentType = "doc"
	Docs_DocAttachmentType_Graffiti     Docs_DocAttachmentType = "graffiti"
	Docs_DocAttachmentType_AudioMessage Docs_DocAttachmentType = "audio_message"
)

type Docs_DocPreview struct {
	AudioMsg *Docs_DocPreviewAudioMsg `json:"audio_msg,omitempty"`
	Graffiti *Docs_DocPreviewGraffiti `json:"graffiti,omitempty"`
	Photo    *Docs_DocPreviewPhoto    `json:"photo,omitempty"`
	Video    *Docs_DocPreviewVideo    `json:"video,omitempty"`
}

type Docs_DocPreviewAudioMsg struct {
	// Audio message duration in seconds
	//  Minimum: 0
	Duration int `json:"duration"`
	// MP3 file URL
	//  Format: uri
	LinkMp3 string `json:"link_mp3"`
	// OGG file URL
	//  Format: uri
	LinkOgg string `json:"link_ogg"`
	//  Minimum: 0
	Waveform []int `json:"waveform"`
}

type Docs_DocPreviewGraffiti struct {
	// Graffiti height
	//  Minimum: 0
	Height int `json:"height"`
	// Graffiti file URL
	//  Format: uri
	Src string `json:"src"`
	// Graffiti width
	//  Minimum: 0
	Width int `json:"width"`
}

type Docs_DocPreviewPhoto struct {
	Sizes *[]Docs_DocPreviewPhotoSizes `json:"sizes,omitempty"`
}

type Docs_DocPreviewPhotoSizes struct {
	// Height in px
	//  Minimum: 0
	Height int `json:"height"`
	// URL of the image
	//  Format: uri
	Src  string                `json:"src"`
	Type Photos_PhotoSizesType `json:"type"`
	// Width in px
	//  Minimum: 0
	Width int `json:"width"`
}

type Docs_DocPreviewVideo struct {
	// Video file size in bites
	//  Minimum: 0
	FileSize int `json:"file_size"`
	// Video's height in pixels
	//  Minimum: 0
	Height int `json:"height"`
	// Video URL
	//  Format: uri
	Src string `json:"src"`
	// Video's width in pixels
	//  Minimum: 0
	Width int `json:"width"`
}

type Docs_DocTypes struct {
	// Number of docs
	//  Minimum: 0
	Count int `json:"count"`
	// Doc type ID
	Id int `json:"id"`
	// Doc type title
	Name string `json:"name"`
}

type Donut_DonatorSubscriptionInfo_Status string

const (
	Donut_DonatorSubscriptionInfo_Status_Active   Donut_DonatorSubscriptionInfo_Status = "active"
	Donut_DonatorSubscriptionInfo_Status_Expiring Donut_DonatorSubscriptionInfo_Status = "expiring"
)

// Donut_DonatorSubscriptionInfo Info about user VK Donut subscription
type Donut_DonatorSubscriptionInfo struct {
	Amount          int `json:"amount"`
	NextPaymentDate int `json:"next_payment_date"`
	//  Format: int64
	OwnerId int                                  `json:"owner_id"`
	Status  Donut_DonatorSubscriptionInfo_Status `json:"status"`
}

type Events_EventAttach struct {
	// address of event
	Address *string `json:"address,omitempty"`
	// text of attach
	ButtonText string `json:"button_text"`
	// array of friends ids
	Friends []int `json:"friends"`
	// event ID
	//  Minimum: 0
	Id int `json:"id"`
	// is favorite
	IsFavorite bool `json:"is_favorite"`
	// Current user's member status
	MemberStatus *Groups_GroupFullMemberStatus `json:"member_status,omitempty"`
	// text of attach
	Text string `json:"text"`
	// event start time
	Time *int `json:"time,omitempty"`
}

type Fave_Bookmark struct {
	// Timestamp, when this item was bookmarked
	//  Minimum: 0
	AddedDate int                `json:"added_date"`
	Link      *Base_Link         `json:"link,omitempty"`
	Post      *Wall_WallpostFull `json:"post,omitempty"`
	Product   *Market_MarketItem `json:"product,omitempty"`
	// Has user seen this item
	Seen bool       `json:"seen"`
	Tags []Fave_Tag `json:"tags"`
	// Item type
	Type  Fave_BookmarkType `json:"type"`
	Video *Video_VideoFull  `json:"video,omitempty"`
}

type Fave_BookmarkType string

const (
	Fave_BookmarkType_Post    Fave_BookmarkType = "post"
	Fave_BookmarkType_Video   Fave_BookmarkType = "video"
	Fave_BookmarkType_Product Fave_BookmarkType = "product"
	Fave_BookmarkType_Article Fave_BookmarkType = "article"
	Fave_BookmarkType_Link    Fave_BookmarkType = "link"
)

type Fave_Page struct {
	// Some info about user or group
	Description string            `json:"description"`
	Group       *Groups_GroupFull `json:"group,omitempty"`
	Tags        []Fave_Tag        `json:"tags"`
	// Item type
	Type Fave_PageType `json:"type"`
	// Timestamp, when this page was bookmarked
	//  Minimum: 0
	UpdatedDate *int            `json:"updated_date,omitempty"`
	User        *Users_UserFull `json:"user,omitempty"`
}

type Fave_PageType string

const (
	Fave_PageType_User  Fave_PageType = "user"
	Fave_PageType_Group Fave_PageType = "group"
	Fave_PageType_Hints Fave_PageType = "hints"
)

type Fave_Tag struct {
	// Tag id
	//  Minimum: 0
	Id *int `json:"id,omitempty"`
	// Tag name
	Name *string `json:"name,omitempty"`
}

type Friends_FriendExtendedStatus struct {
	Friends_FriendStatus
	// Is friend request from other user unread
	IsRequestUnread *bool `json:"is_request_unread,omitempty"`
}

type Friends_FriendStatus struct {
	FriendStatus Friends_FriendStatusStatus `json:"friend_status"`
	// MD5 hash for the result validation
	Sign *string `json:"sign,omitempty"`
	// User ID
	//  Format: int64
	//  Minimum: 1
	UserId int `json:"user_id"`
}

// Friends_FriendStatusStatus Friend status with the user
type Friends_FriendStatusStatus int

const (
	Friends_FriendStatusStatus_NotAFriend       Friends_FriendStatusStatus = 0
	Friends_FriendStatusStatus_OutcomingRequest Friends_FriendStatusStatus = 1
	Friends_FriendStatusStatus_IncomingRequest  Friends_FriendStatusStatus = 2
	Friends_FriendStatusStatus_IsFriend         Friends_FriendStatusStatus = 3
)

type Friends_FriendsList struct {
	// List ID
	Id int `json:"id"`
	// List title
	Name string `json:"name"`
}

type Friends_MutualFriend struct {
	// Total mutual friends number
	CommonCount *int `json:"common_count,omitempty"`
	//  Minimum: 1
	CommonFriends *[]int `json:"common_friends,omitempty"`
	// User ID
	Id *int `json:"id,omitempty"`
}

type Friends_Requests struct {
	// ID of the user by whom friend has been suggested
	From   *string                 `json:"from,omitempty"`
	Mutual *Friends_RequestsMutual `json:"mutual,omitempty"`
	// User ID
	//  Format: int64
	//  Minimum: 1
	UserId *int `json:"user_id,omitempty"`
}

type Friends_RequestsMutual struct {
	// Total mutual friends number
	//  Minimum: 0
	Count *int `json:"count,omitempty"`
	//  Minimum: 1
	Users *[]int `json:"users,omitempty"`
}

type Friends_RequestsXtrMessage struct {
	// ID of the user by whom friend has been suggested
	From *string `json:"from,omitempty"`
	// Message sent with a request
	Message *string                 `json:"message,omitempty"`
	Mutual  *Friends_RequestsMutual `json:"mutual,omitempty"`
	// User ID
	//  Format: int64
	//  Minimum: 1
	UserId *int `json:"user_id,omitempty"`
}

type Friends_UserXtrPhone struct {
	Users_UserFull
	// User phone
	Phone *string `json:"phone,omitempty"`
}

type Gifts_Gift struct {
	// Date when gist has been sent in Unixtime
	Date *int `json:"date,omitempty"`
	// Gift sender ID
	FromId *int          `json:"from_id,omitempty"`
	Gift   *Gifts_Layout `json:"gift,omitempty"`
	// Hash
	GiftHash *string `json:"gift_hash,omitempty"`
	// Gift ID
	Id *int `json:"id,omitempty"`
	// Comment text
	Message *string            `json:"message,omitempty"`
	Privacy *Gifts_GiftPrivacy `json:"privacy,omitempty"`
}

// Gifts_GiftPrivacy Gift privacy
type Gifts_GiftPrivacy int

const (
	Gifts_GiftPrivacy_NameAndMessageForAll           Gifts_GiftPrivacy = 0
	Gifts_GiftPrivacy_NameForAll                     Gifts_GiftPrivacy = 1
	Gifts_GiftPrivacy_NameAndMessageForRecipientOnly Gifts_GiftPrivacy = 2
)

type Gifts_Layout struct {
	// ID of the build of constructor gift
	BuildId *string `json:"build_id,omitempty"`
	// Gift ID
	Id *int `json:"id,omitempty"`
	// Information whether gift represents a stickers style
	IsStickersStyle *bool `json:"is_stickers_style,omitempty"`
	// Keywords used for search
	Keywords *string `json:"keywords,omitempty"`
	// ID of the sticker pack, if the gift is representing one
	//  Minimum: 0
	StickersProductId *int `json:"stickers_product_id,omitempty"`
	// URL of the preview image with 256 px in width
	//  Format: uri
	Thumb256 *string `json:"thumb_256,omitempty"`
	// URL of the preview image with 48 px in width
	//  Format: uri
	Thumb48 *string `json:"thumb_48,omitempty"`
	// URL of the preview image with 512 px in width
	//  Format: uri
	Thumb512 *string `json:"thumb_512,omitempty"`
	// URL of the preview image with 96 px in width
	//  Format: uri
	Thumb96 *string `json:"thumb_96,omitempty"`
}

type Groups_Address struct {
	// Additional address to the place (6 floor, left door)
	AdditionalAddress *string `json:"additional_address,omitempty"`
	// String address to the place (Nevsky, 28)
	Address *string `json:"address,omitempty"`
	// City id of address
	//  Minimum: 0
	CityId *int `json:"city_id,omitempty"`
	// Country id of address
	//  Minimum: 0
	CountryId *int `json:"country_id,omitempty"`
	// Distance from the point
	Distance *int `json:"distance,omitempty"`
	// Address id
	Id int `json:"id"`
	// Address latitude
	Latitude *float64 `json:"latitude,omitempty"`
	// Address longitude
	Longitude *float64 `json:"longitude,omitempty"`
	// Metro id of address
	//  Minimum: 0
	MetroStationId *int `json:"metro_station_id,omitempty"`
	// Address phone
	Phone   *string `json:"phone,omitempty"`
	PlaceId *int    `json:"place_id,omitempty"`
	// Time offset int minutes from utc time
	TimeOffset *int `json:"time_offset,omitempty"`
	// Week timetable for the address
	Timetable *Groups_AddressTimetable `json:"timetable,omitempty"`
	// Title of the place (Zinger, etc)
	Title *string `json:"title,omitempty"`
	// Status of information about timetable
	WorkInfoStatus *Groups_AddressWorkInfoStatus `json:"work_info_status,omitempty"`
}

// Groups_AddressTimetable Timetable for a week
type Groups_AddressTimetable struct {
	// Timetable for friday
	Fri *Groups_AddressTimetableDay `json:"fri,omitempty"`
	// Timetable for monday
	Mon *Groups_AddressTimetableDay `json:"mon,omitempty"`
	// Timetable for saturday
	Sat *Groups_AddressTimetableDay `json:"sat,omitempty"`
	// Timetable for sunday
	Sun *Groups_AddressTimetableDay `json:"sun,omitempty"`
	// Timetable for thursday
	Thu *Groups_AddressTimetableDay `json:"thu,omitempty"`
	// Timetable for tuesday
	Tue *Groups_AddressTimetableDay `json:"tue,omitempty"`
	// Timetable for wednesday
	Wed *Groups_AddressTimetableDay `json:"wed,omitempty"`
}

// Groups_AddressTimetableDay Timetable for one day
type Groups_AddressTimetableDay struct {
	// Close time of the break in minutes
	BreakCloseTime *int `json:"break_close_time,omitempty"`
	// Start time of the break in minutes
	BreakOpenTime *int `json:"break_open_time,omitempty"`
	// Close time in minutes
	CloseTime int `json:"close_time"`
	// Open time in minutes
	OpenTime int `json:"open_time"`
}

// Groups_AddressWorkInfoStatus Status of information about timetable
type Groups_AddressWorkInfoStatus string

const (
	Groups_AddressWorkInfoStatus_NoInformation     Groups_AddressWorkInfoStatus = "no_information"
	Groups_AddressWorkInfoStatus_TemporarilyClosed Groups_AddressWorkInfoStatus = "temporarily_closed"
	Groups_AddressWorkInfoStatus_AlwaysOpened      Groups_AddressWorkInfoStatus = "always_opened"
	Groups_AddressWorkInfoStatus_Timetable         Groups_AddressWorkInfoStatus = "timetable"
	Groups_AddressWorkInfoStatus_ForeverClosed     Groups_AddressWorkInfoStatus = "forever_closed"
)

type Groups_AddressesInfo struct {
	// Information whether addresses is enabled
	IsEnabled bool `json:"is_enabled"`
	// Main address id for group
	MainAddressId *int `json:"main_address_id,omitempty"`
}

type Groups_BanInfo struct {
	// Administrator ID
	//  Minimum: 1
	AdminId *int `json:"admin_id,omitempty"`
	// Comment for a ban
	Comment *string `json:"comment,omitempty"`
	// Show comment for user
	CommentVisible *bool `json:"comment_visible,omitempty"`
	// Date when user has been added to blacklist in Unixtime
	//  Minimum: 0
	Date *int `json:"date,omitempty"`
	// Date when user will be removed from blacklist in Unixtime
	//  Minimum: 0
	EndDate  *int                  `json:"end_date,omitempty"`
	IsClosed *bool                 `json:"is_closed,omitempty"`
	Reason   *Groups_BanInfoReason `json:"reason,omitempty"`
}

// Groups_BanInfoReason Ban reason
type Groups_BanInfoReason int

const (
	Groups_BanInfoReason_Other          Groups_BanInfoReason = 0
	Groups_BanInfoReason_Spam           Groups_BanInfoReason = 1
	Groups_BanInfoReason_VerbalAbuse    Groups_BanInfoReason = 2
	Groups_BanInfoReason_StrongLanguage Groups_BanInfoReason = 3
	Groups_BanInfoReason_Flood          Groups_BanInfoReason = 4
)

type Groups_BannedItem Groups_OwnerXtrBanInfo

type Groups_CallbackServer_Status string

const (
	Groups_CallbackServer_Status_Unconfigured Groups_CallbackServer_Status = "unconfigured"
	Groups_CallbackServer_Status_Failed       Groups_CallbackServer_Status = "failed"
	Groups_CallbackServer_Status_Wait         Groups_CallbackServer_Status = "wait"
	Groups_CallbackServer_Status_Ok           Groups_CallbackServer_Status = "ok"
)

type Groups_CallbackServer struct {
	//  Minimum: 0
	CreatorId int `json:"creator_id"`
	//  Minimum: 0
	Id        int                          `json:"id"`
	SecretKey string                       `json:"secret_key"`
	Status    Groups_CallbackServer_Status `json:"status"`
	Title     string                       `json:"title"`
	Url       string                       `json:"url"`
}

type Groups_CallbackSettings struct {
	// API version used for the events
	ApiVersion *string                `json:"api_version,omitempty"`
	Events     *Groups_LongPollEvents `json:"events,omitempty"`
}

type Groups_ContactsItem struct {
	// Contact description
	Desc *string `json:"desc,omitempty"`
	// Contact email
	Email *string `json:"email,omitempty"`
	// Contact phone
	Phone *string `json:"phone,omitempty"`
	// User ID
	//  Format: int64
	UserId *int `json:"user_id,omitempty"`
}

type Groups_CountersGroup struct {
	// Addresses number
	Addresses *int `json:"addresses,omitempty"`
	// Photo albums number
	Albums *int `json:"albums,omitempty"`
	// Articles number
	Articles *int `json:"articles,omitempty"`
	// Audio playlists number
	AudioPlaylists *int `json:"audio_playlists,omitempty"`
	// Audios number
	Audios *int `json:"audios,omitempty"`
	// Clips number
	Clips *int `json:"clips,omitempty"`
	// Clips followers number
	ClipsFollowers *int `json:"clips_followers,omitempty"`
	// Docs number
	Docs *int `json:"docs,omitempty"`
	// Market items number
	Market *int `json:"market,omitempty"`
	// Market services number
	MarketServices *int `json:"market_services,omitempty"`
	// Narratives number
	Narratives *int `json:"narratives,omitempty"`
	// Photos number
	Photos *int `json:"photos,omitempty"`
	// Podcasts number
	Podcasts *int `json:"podcasts,omitempty"`
	// Topics number
	Topics *int `json:"topics,omitempty"`
	// Videos number
	Videos *int `json:"videos,omitempty"`
}

type Groups_Cover struct {
	// Information whether cover is enabled
	Enabled Base_BoolInt  `json:"enabled"`
	Images  *[]Base_Image `json:"images,omitempty"`
}

type Groups_Fields string

const (
	Groups_Fields_Market               Groups_Fields = "market"
	Groups_Fields_MemberStatus         Groups_Fields = "member_status"
	Groups_Fields_IsFavorite           Groups_Fields = "is_favorite"
	Groups_Fields_IsSubscribed         Groups_Fields = "is_subscribed"
	Groups_Fields_IsSubscribedPodcasts Groups_Fields = "is_subscribed_podcasts"
	Groups_Fields_CanSubscribePodcasts Groups_Fields = "can_subscribe_podcasts"
	Groups_Fields_City                 Groups_Fields = "city"
	Groups_Fields_Country              Groups_Fields = "country"
	Groups_Fields_Verified             Groups_Fields = "verified"
	Groups_Fields_Description          Groups_Fields = "description"
	Groups_Fields_WikiPage             Groups_Fields = "wiki_page"
	Groups_Fields_MembersCount         Groups_Fields = "members_count"
	Groups_Fields_RequestsCount        Groups_Fields = "requests_count"
	Groups_Fields_Counters             Groups_Fields = "counters"
	Groups_Fields_Cover                Groups_Fields = "cover"
	Groups_Fields_CanPost              Groups_Fields = "can_post"
	Groups_Fields_CanSuggest           Groups_Fields = "can_suggest"
	Groups_Fields_CanUploadStory       Groups_Fields = "can_upload_story"
	Groups_Fields_CanUploadDoc         Groups_Fields = "can_upload_doc"
	Groups_Fields_CanUploadVideo       Groups_Fields = "can_upload_video"
	Groups_Fields_CanUploadClip        Groups_Fields = "can_upload_clip"
	Groups_Fields_CanSeeAllPosts       Groups_Fields = "can_see_all_posts"
	Groups_Fields_CanCreateTopic       Groups_Fields = "can_create_topic"
	Groups_Fields_CropPhoto            Groups_Fields = "crop_photo"
	Groups_Fields_Activity             Groups_Fields = "activity"
	Groups_Fields_FixedPost            Groups_Fields = "fixed_post"
	Groups_Fields_HasPhoto             Groups_Fields = "has_photo"
	Groups_Fields_Status               Groups_Fields = "status"
	Groups_Fields_MainAlbumId          Groups_Fields = "main_album_id"
	Groups_Fields_Links                Groups_Fields = "links"
	Groups_Fields_Contacts             Groups_Fields = "contacts"
	Groups_Fields_Site                 Groups_Fields = "site"
	Groups_Fields_MainSection          Groups_Fields = "main_section"
	Groups_Fields_SecondarySection     Groups_Fields = "secondary_section"
	Groups_Fields_Wall                 Groups_Fields = "wall"
	Groups_Fields_Trending             Groups_Fields = "trending"
	Groups_Fields_CanMessage           Groups_Fields = "can_message"
	Groups_Fields_IsMarketCartEnabled  Groups_Fields = "is_market_cart_enabled"
	Groups_Fields_IsMessagesBlocked    Groups_Fields = "is_messages_blocked"
	Groups_Fields_CanSendNotify        Groups_Fields = "can_send_notify"
	Groups_Fields_HasGroupChannel      Groups_Fields = "has_group_channel"
	Groups_Fields_GroupChannel         Groups_Fields = "group_channel"
	Groups_Fields_OnlineStatus         Groups_Fields = "online_status"
	Groups_Fields_StartDate            Groups_Fields = "start_date"
	Groups_Fields_FinishDate           Groups_Fields = "finish_date"
	Groups_Fields_AgeLimits            Groups_Fields = "age_limits"
	Groups_Fields_BanInfo              Groups_Fields = "ban_info"
	Groups_Fields_ActionButton         Groups_Fields = "action_button"
	Groups_Fields_AuthorId             Groups_Fields = "author_id"
	Groups_Fields_Phone                Groups_Fields = "phone"
	Groups_Fields_HasMarketApp         Groups_Fields = "has_market_app"
	Groups_Fields_Addresses            Groups_Fields = "addresses"
	Groups_Fields_LiveCovers           Groups_Fields = "live_covers"
	Groups_Fields_IsAdult              Groups_Fields = "is_adult"
	Groups_Fields_IsHiddenFromFeed     Groups_Fields = "is_hidden_from_feed"
	Groups_Fields_CanSubscribePosts    Groups_Fields = "can_subscribe_posts"
	Groups_Fields_WarningNotification  Groups_Fields = "warning_notification"
	Groups_Fields_MsgPushAllowed       Groups_Fields = "msg_push_allowed"
	Groups_Fields_StoriesArchiveCount  Groups_Fields = "stories_archive_count"
	Groups_Fields_VideoLiveLevel       Groups_Fields = "video_live_level"
	Groups_Fields_VideoLiveCount       Groups_Fields = "video_live_count"
	Groups_Fields_ClipsCount           Groups_Fields = "clips_count"
	Groups_Fields_HasUnseenStories     Groups_Fields = "has_unseen_stories"
	Groups_Fields_IsBusiness           Groups_Fields = "is_business"
	Groups_Fields_TextlivesCount       Groups_Fields = "textlives_count"
	Groups_Fields_MembersCountText     Groups_Fields = "members_count_text"
)

type Groups_Filter string

const (
	Groups_Filter_Admin        Groups_Filter = "admin"
	Groups_Filter_Editor       Groups_Filter = "editor"
	Groups_Filter_Moder        Groups_Filter = "moder"
	Groups_Filter_Advertiser   Groups_Filter = "advertiser"
	Groups_Filter_Groups       Groups_Filter = "groups"
	Groups_Filter_Publics      Groups_Filter = "publics"
	Groups_Filter_Events       Groups_Filter = "events"
	Groups_Filter_HasAddresses Groups_Filter = "has_addresses"
)

type Groups_Group struct {
	AdminLevel *Groups_GroupAdminLevel `json:"admin_level,omitempty"`
	// Information whether community is banned
	Deactivated *string `json:"deactivated,omitempty"`
	// Established date
	EstDate *string `json:"est_date,omitempty"`
	// Finish date in Unixtime format
	FinishDate *int `json:"finish_date,omitempty"`
	// Community ID
	//  Format: int64
	Id int `json:"id"`
	// Information whether current user is administrator
	IsAdmin *Base_BoolInt `json:"is_admin,omitempty"`
	// Information whether current user is advertiser
	IsAdvertiser *Base_BoolInt         `json:"is_advertiser,omitempty"`
	IsClosed     *Groups_GroupIsClosed `json:"is_closed,omitempty"`
	// Information whether current user is member
	IsMember                        *Base_BoolInt `json:"is_member,omitempty"`
	IsVideoLiveNotificationsBlocked *Base_BoolInt `json:"is_video_live_notifications_blocked,omitempty"`
	// Community name
	Name *string `json:"name,omitempty"`
	// URL of square photo of the community with 100 pixels in width
	//  Format: uri
	Photo100 *string `json:"photo_100,omitempty"`
	// URL of square photo of the community with 200 pixels in width
	//  Format: uri
	Photo200 *string `json:"photo_200,omitempty"`
	// URL of square photo of the community with 200 pixels in width original
	//  Format: uri
	Photo200Orig *string `json:"photo_200_orig,omitempty"`
	// URL of square photo of the community with 400 pixels in width
	//  Format: uri
	Photo400 *string `json:"photo_400,omitempty"`
	// URL of square photo of the community with 400 pixels in width original
	//  Format: uri
	Photo400Orig *string `json:"photo_400_orig,omitempty"`
	// URL of square photo of the community with 50 pixels in width
	//  Format: uri
	Photo50 *string `json:"photo_50,omitempty"`
	// URL of square photo of the community with max pixels in width
	//  Format: uri
	PhotoMax *string `json:"photo_max,omitempty"`
	// URL of square photo of the community with max pixels in width original
	//  Format: uri
	PhotoMaxOrig *string           `json:"photo_max_orig,omitempty"`
	PhotoMaxSize *Groups_PhotoSize `json:"photo_max_size,omitempty"`
	// Public date label
	PublicDateLabel *string `json:"public_date_label,omitempty"`
	// Domain of the community page
	ScreenName *string `json:"screen_name,omitempty"`
	// Start date in Unixtime format
	StartDate *int              `json:"start_date,omitempty"`
	Type      *Groups_GroupType `json:"type,omitempty"`
	VideoLive *Video_LiveInfo   `json:"video_live,omitempty"`
}

type Groups_GroupAccess int

const (
	Groups_GroupAccess_Open    Groups_GroupAccess = 0
	Groups_GroupAccess_Closed  Groups_GroupAccess = 1
	Groups_GroupAccess_Private Groups_GroupAccess = 2
)

// Groups_GroupAdminLevel Level of current user's credentials as manager
type Groups_GroupAdminLevel int

const (
	Groups_GroupAdminLevel_Moderator     Groups_GroupAdminLevel = 1
	Groups_GroupAdminLevel_Editor        Groups_GroupAdminLevel = 2
	Groups_GroupAdminLevel_Administrator Groups_GroupAdminLevel = 3
)

type Groups_GroupAgeLimits int

const (
	Groups_GroupAgeLimits_Unlimited Groups_GroupAgeLimits = 1
	Groups_GroupAgeLimits_16Plus    Groups_GroupAgeLimits = 2
	Groups_GroupAgeLimits_18Plus    Groups_GroupAgeLimits = 3
)

type Groups_GroupAttach struct {
	// group ID
	//  Minimum: 0
	Id int `json:"id"`
	// is favorite
	IsFavorite bool `json:"is_favorite"`
	// size of group
	Size int `json:"size"`
	// activity or category of group
	Status string `json:"status"`
	// text of attach
	Text string `json:"text"`
}

type Groups_GroupAudio int

const (
	Groups_GroupAudio_Disabled Groups_GroupAudio = 0
	Groups_GroupAudio_Open     Groups_GroupAudio = 1
	Groups_GroupAudio_Limited  Groups_GroupAudio = 2
)

type Groups_GroupBanInfo struct {
	// Ban comment
	Comment *string `json:"comment,omitempty"`
	// End date of ban in Unixtime
	EndDate *int                  `json:"end_date,omitempty"`
	Reason  *Groups_BanInfoReason `json:"reason,omitempty"`
}

type Groups_GroupCategory struct {
	// Category ID
	//  Minimum: 0
	Id int `json:"id"`
	// Category name
	Name          string                 `json:"name"`
	Subcategories *[]Base_ObjectWithName `json:"subcategories,omitempty"`
}

type Groups_GroupCategoryFull struct {
	// Category ID
	//  Minimum: 0
	Id int `json:"id"`
	// Category name
	Name string `json:"name"`
	// Pages number
	PageCount     int                     `json:"page_count"`
	PagePreviews  []Groups_Group          `json:"page_previews"`
	Subcategories *[]Groups_GroupCategory `json:"subcategories,omitempty"`
}

type Groups_GroupCategoryType struct {
	Id   int    `json:"id"`
	Name string `json:"name"`
}

type Groups_GroupDocs int

const (
	Groups_GroupDocs_Disabled Groups_GroupDocs = 0
	Groups_GroupDocs_Open     Groups_GroupDocs = 1
	Groups_GroupDocs_Limited  Groups_GroupDocs = 2
)

type Groups_GroupFull_Wall int

const (
	Groups_GroupFull_Wall_Disabled   Groups_GroupFull_Wall = 0
	Groups_GroupFull_Wall_Open       Groups_GroupFull_Wall = 1
	Groups_GroupFull_Wall_Limited    Groups_GroupFull_Wall = 2
	Groups_GroupFull_Wall_Restricted Groups_GroupFull_Wall = 3
)

type Groups_GroupFull struct {
	Groups_Group
	// Type of group, start date of event or category of public page
	Activity *string `json:"activity,omitempty"`
	// Info about addresses in groups
	Addresses *Groups_AddressesInfo `json:"addresses,omitempty"`
	// Information whether age limit
	AgeLimits *Groups_GroupFullAgeLimits `json:"age_limits,omitempty"`
	// User ban info
	BanInfo *Groups_GroupBanInfo `json:"ban_info,omitempty"`
	// Information whether current user can create topic
	CanCreateTopic *Base_BoolInt `json:"can_create_topic,omitempty"`
	// Information whether current user can send a message to community
	CanMessage *Base_BoolInt `json:"can_message,omitempty"`
	// Information whether current user can post on community's wall
	CanPost *Base_BoolInt `json:"can_post,omitempty"`
	// Information whether current user can see all posts on community's wall
	CanSeeAllPosts *Base_BoolInt `json:"can_see_all_posts,omitempty"`
	// Information whether community can send notifications by phone number to current user
	CanSendNotify *Base_BoolInt `json:"can_send_notify,omitempty"`
	// Owner in whitelist or not
	CanSubscribePodcasts *bool `json:"can_subscribe_podcasts,omitempty"`
	// Can subscribe to wall
	CanSubscribePosts *bool         `json:"can_subscribe_posts,omitempty"`
	CanSuggest        *Base_BoolInt `json:"can_suggest,omitempty"`
	// Information whether current user can upload doc
	CanUploadDoc *Base_BoolInt `json:"can_upload_doc,omitempty"`
	// Information whether current user can upload story
	CanUploadStory *Base_BoolInt `json:"can_upload_story,omitempty"`
	// Information whether current user can upload video
	CanUploadVideo *Base_BoolInt `json:"can_upload_video,omitempty"`
	City           *Base_Object  `json:"city,omitempty"`
	// Number of community's clips
	//  Minimum: 0
	ClipsCount *int                   `json:"clips_count,omitempty"`
	Contacts   *[]Groups_ContactsItem `json:"contacts,omitempty"`
	Counters   *Groups_CountersGroup  `json:"counters,omitempty"`
	Country    *Base_Country          `json:"country,omitempty"`
	Cover      *Groups_Cover          `json:"cover,omitempty"`
	// Данные о точках, по которым вырезаны профильная и миниатюрная фотографии сообщества
	CropPhoto *Base_CropPhoto `json:"crop_photo,omitempty"`
	// Community description
	Description *string `json:"description,omitempty"`
	// Fixed post ID
	FixedPost       *int  `json:"fixed_post,omitempty"`
	HasGroupChannel *bool `json:"has_group_channel,omitempty"`
	// Information whether community has installed market app
	HasMarketApp *bool `json:"has_market_app,omitempty"`
	// Information whether community has photo
	HasPhoto         *Base_BoolInt `json:"has_photo,omitempty"`
	HasUnseenStories *bool         `json:"has_unseen_stories,omitempty"`
	// Inviter ID
	//  Minimum: 1
	InvitedBy *int `json:"invited_by,omitempty"`
	// Information whether community is adult
	IsAdult *Base_BoolInt `json:"is_adult,omitempty"`
	// Information whether community is in faves
	IsFavorite *Base_BoolInt `json:"is_favorite,omitempty"`
	// Information whether community is hidden from current user's newsfeed
	IsHiddenFromFeed *Base_BoolInt `json:"is_hidden_from_feed,omitempty"`
	// Information whether community can send a message to current user
	IsMessagesBlocked *Base_BoolInt `json:"is_messages_blocked,omitempty"`
	// Information whether current user is subscribed
	IsSubscribed *Base_BoolInt `json:"is_subscribed,omitempty"`
	// Information whether current user is subscribed to podcasts
	IsSubscribedPodcasts *bool               `json:"is_subscribed_podcasts,omitempty"`
	Links                *[]Groups_LinksItem `json:"links,omitempty"`
	// Live covers state
	LiveCovers *Groups_LiveCovers `json:"live_covers,omitempty"`
	// Community's main photo album ID
	MainAlbumId *int                     `json:"main_album_id,omitempty"`
	MainSection *Groups_GroupFullSection `json:"main_section,omitempty"`
	Market      *Groups_MarketInfo       `json:"market,omitempty"`
	// Current user's member status
	MemberStatus *Groups_GroupFullMemberStatus `json:"member_status,omitempty"`
	// Community members number
	//  Minimum: 0
	MembersCount *int `json:"members_count,omitempty"`
	// Info about number of users in group
	MembersCountText *string `json:"members_count_text,omitempty"`
	// Status of replies in community messages
	OnlineStatus *Groups_OnlineStatus `json:"online_status,omitempty"`
	// The number of incoming requests to the community
	//  Minimum: 0
	RequestsCount    *int                     `json:"requests_count,omitempty"`
	SecondarySection *Groups_GroupFullSection `json:"secondary_section,omitempty"`
	// Community's website
	Site *string `json:"site,omitempty"`
	// Community status
	Status              *string      `json:"status,omitempty"`
	StatusAudio         *Audio_Audio `json:"status_audio,omitempty"`
	StoriesArchiveCount *int         `json:"stories_archive_count,omitempty"`
	// Information whether the community has a "fire" pictogram.
	Trending            *Base_BoolInt `json:"trending,omitempty"`
	UsingVkpayMarketApp *bool         `json:"using_vkpay_market_app,omitempty"`
	// Information whether community is verified
	Verified *Base_BoolInt `json:"verified,omitempty"`
	// Number of community's live streams
	//  Minimum: 0
	VideoLiveCount *int `json:"video_live_count,omitempty"`
	// Community level live streams achievements
	//  Minimum: 0
	VideoLiveLevel *int `json:"video_live_level,omitempty"`
	// Information about wall status in community
	Wall *Groups_GroupFull_Wall `json:"wall,omitempty"`
	// Community's main wiki page title
	WikiPage *string `json:"wiki_page,omitempty"`
}

type Groups_GroupFullAgeLimits int

const (
	Groups_GroupFullAgeLimits_No     Groups_GroupFullAgeLimits = 1
	Groups_GroupFullAgeLimits_Over16 Groups_GroupFullAgeLimits = 2
	Groups_GroupFullAgeLimits_Over18 Groups_GroupFullAgeLimits = 3
)

type Groups_GroupFullMemberStatus int

const (
	Groups_GroupFullMemberStatus_NotAMember      Groups_GroupFullMemberStatus = 0
	Groups_GroupFullMemberStatus_Member          Groups_GroupFullMemberStatus = 1
	Groups_GroupFullMemberStatus_NotSure         Groups_GroupFullMemberStatus = 2
	Groups_GroupFullMemberStatus_Declined        Groups_GroupFullMemberStatus = 3
	Groups_GroupFullMemberStatus_HasSentARequest Groups_GroupFullMemberStatus = 4
	Groups_GroupFullMemberStatus_Invited         Groups_GroupFullMemberStatus = 5
)

// Groups_GroupFullSection Main section of community
type Groups_GroupFullSection int

const (
	Groups_GroupFullSection_None            Groups_GroupFullSection = 0
	Groups_GroupFullSection_Photos          Groups_GroupFullSection = 1
	Groups_GroupFullSection_Topics          Groups_GroupFullSection = 2
	Groups_GroupFullSection_Audios          Groups_GroupFullSection = 3
	Groups_GroupFullSection_Videos          Groups_GroupFullSection = 4
	Groups_GroupFullSection_Market          Groups_GroupFullSection = 5
	Groups_GroupFullSection_Stories         Groups_GroupFullSection = 6
	Groups_GroupFullSection_Apps            Groups_GroupFullSection = 7
	Groups_GroupFullSection_Followers       Groups_GroupFullSection = 8
	Groups_GroupFullSection_Links           Groups_GroupFullSection = 9
	Groups_GroupFullSection_Events          Groups_GroupFullSection = 10
	Groups_GroupFullSection_Places          Groups_GroupFullSection = 11
	Groups_GroupFullSection_Contacts        Groups_GroupFullSection = 12
	Groups_GroupFullSection_AppBtns         Groups_GroupFullSection = 13
	Groups_GroupFullSection_Docs            Groups_GroupFullSection = 14
	Groups_GroupFullSection_EventCounters   Groups_GroupFullSection = 15
	Groups_GroupFullSection_GroupMessages   Groups_GroupFullSection = 16
	Groups_GroupFullSection_Albums          Groups_GroupFullSection = 24
	Groups_GroupFullSection_Categories      Groups_GroupFullSection = 26
	Groups_GroupFullSection_AdminHelp       Groups_GroupFullSection = 27
	Groups_GroupFullSection_AppWidget       Groups_GroupFullSection = 31
	Groups_GroupFullSection_PublicHelp      Groups_GroupFullSection = 32
	Groups_GroupFullSection_HsDonationApp   Groups_GroupFullSection = 33
	Groups_GroupFullSection_HsMarketApp     Groups_GroupFullSection = 34
	Groups_GroupFullSection_Addresses       Groups_GroupFullSection = 35
	Groups_GroupFullSection_ArtistPage      Groups_GroupFullSection = 36
	Groups_GroupFullSection_Podcast         Groups_GroupFullSection = 37
	Groups_GroupFullSection_Articles        Groups_GroupFullSection = 39
	Groups_GroupFullSection_AdminTips       Groups_GroupFullSection = 40
	Groups_GroupFullSection_Menu            Groups_GroupFullSection = 41
	Groups_GroupFullSection_FixedPost       Groups_GroupFullSection = 42
	Groups_GroupFullSection_Chats           Groups_GroupFullSection = 43
	Groups_GroupFullSection_EvergreenNotice Groups_GroupFullSection = 44
	Groups_GroupFullSection_Musicians       Groups_GroupFullSection = 45
	Groups_GroupFullSection_Narratives      Groups_GroupFullSection = 46
	Groups_GroupFullSection_DonutDonate     Groups_GroupFullSection = 47
	Groups_GroupFullSection_Clips           Groups_GroupFullSection = 48
	Groups_GroupFullSection_MarketCart      Groups_GroupFullSection = 49
	Groups_GroupFullSection_Curators        Groups_GroupFullSection = 50
	Groups_GroupFullSection_MarketServices  Groups_GroupFullSection = 51
	Groups_GroupFullSection_Classifieds     Groups_GroupFullSection = 53
	Groups_GroupFullSection_Textlives       Groups_GroupFullSection = 54
	Groups_GroupFullSection_DonutForDons    Groups_GroupFullSection = 55
	Groups_GroupFullSection_Badges          Groups_GroupFullSection = 57
	Groups_GroupFullSection_ChatsCreation   Groups_GroupFullSection = 58
)

// Groups_GroupIsClosed Information whether community is closed
type Groups_GroupIsClosed int

const (
	Groups_GroupIsClosed_Open    Groups_GroupIsClosed = 0
	Groups_GroupIsClosed_Closed  Groups_GroupIsClosed = 1
	Groups_GroupIsClosed_Private Groups_GroupIsClosed = 2
)

type Groups_GroupMarketCurrency int

const (
	Groups_GroupMarketCurrency_RussianRubles    Groups_GroupMarketCurrency = 643
	Groups_GroupMarketCurrency_UkrainianHryvnia Groups_GroupMarketCurrency = 980
	Groups_GroupMarketCurrency_KazakhTenge      Groups_GroupMarketCurrency = 398
	Groups_GroupMarketCurrency_Euro             Groups_GroupMarketCurrency = 978
	Groups_GroupMarketCurrency_UsDollars        Groups_GroupMarketCurrency = 840
)

type Groups_GroupPhotos int

const (
	Groups_GroupPhotos_Disabled Groups_GroupPhotos = 0
	Groups_GroupPhotos_Open     Groups_GroupPhotos = 1
	Groups_GroupPhotos_Limited  Groups_GroupPhotos = 2
)

type Groups_GroupPublicCategoryList struct {
	Id            *int                        `json:"id,omitempty"`
	Name          *string                     `json:"name,omitempty"`
	Subcategories *[]Groups_GroupCategoryType `json:"subcategories,omitempty"`
}

type Groups_GroupRole string

const (
	Groups_GroupRole_Moderator     Groups_GroupRole = "moderator"
	Groups_GroupRole_Editor        Groups_GroupRole = "editor"
	Groups_GroupRole_Administrator Groups_GroupRole = "administrator"
	Groups_GroupRole_Advertiser    Groups_GroupRole = "advertiser"
)

type Groups_GroupSubject int

const (
	Groups_GroupSubject_Auto                      Groups_GroupSubject = 1
	Groups_GroupSubject_ActivityHolidays          Groups_GroupSubject = 2
	Groups_GroupSubject_Business                  Groups_GroupSubject = 3
	Groups_GroupSubject_Pets                      Groups_GroupSubject = 4
	Groups_GroupSubject_Health                    Groups_GroupSubject = 5
	Groups_GroupSubject_DatingAndCommunication    Groups_GroupSubject = 6
	Groups_GroupSubject_Games                     Groups_GroupSubject = 7
	Groups_GroupSubject_It                        Groups_GroupSubject = 8
	Groups_GroupSubject_Cinema                    Groups_GroupSubject = 9
	Groups_GroupSubject_BeautyAndFashion          Groups_GroupSubject = 10
	Groups_GroupSubject_Cooking                   Groups_GroupSubject = 11
	Groups_GroupSubject_ArtAndCulture             Groups_GroupSubject = 12
	Groups_GroupSubject_Literature                Groups_GroupSubject = 13
	Groups_GroupSubject_MobileServicesAndInternet Groups_GroupSubject = 14
	Groups_GroupSubject_Music                     Groups_GroupSubject = 15
	Groups_GroupSubject_ScienceAndTechnology      Groups_GroupSubject = 16
	Groups_GroupSubject_RealEstate                Groups_GroupSubject = 17
	Groups_GroupSubject_NewsAndMedia              Groups_GroupSubject = 18
	Groups_GroupSubject_Security                  Groups_GroupSubject = 19
	Groups_GroupSubject_Education                 Groups_GroupSubject = 20
	Groups_GroupSubject_HomeAndRenovations        Groups_GroupSubject = 21
	Groups_GroupSubject_Politics                  Groups_GroupSubject = 22
	Groups_GroupSubject_Food                      Groups_GroupSubject = 23
	Groups_GroupSubject_Industry                  Groups_GroupSubject = 24
	Groups_GroupSubject_Travel                    Groups_GroupSubject = 25
	Groups_GroupSubject_Work                      Groups_GroupSubject = 26
	Groups_GroupSubject_Entertainment             Groups_GroupSubject = 27
	Groups_GroupSubject_Religion                  Groups_GroupSubject = 28
	Groups_GroupSubject_Family                    Groups_GroupSubject = 29
	Groups_GroupSubject_Sports                    Groups_GroupSubject = 30
	Groups_GroupSubject_Insurance                 Groups_GroupSubject = 31
	Groups_GroupSubject_Television                Groups_GroupSubject = 32
	Groups_GroupSubject_GoodsAndServices          Groups_GroupSubject = 33
	Groups_GroupSubject_Hobbies                   Groups_GroupSubject = 34
	Groups_GroupSubject_Finance                   Groups_GroupSubject = 35
	Groups_GroupSubject_Photo                     Groups_GroupSubject = 36
	Groups_GroupSubject_Esoterics                 Groups_GroupSubject = 37
	Groups_GroupSubject_ElectronicsAndAppliances  Groups_GroupSubject = 38
	Groups_GroupSubject_Erotic                    Groups_GroupSubject = 39
	Groups_GroupSubject_Humor                     Groups_GroupSubject = 40
	Groups_GroupSubject_SocietyHumanities         Groups_GroupSubject = 41
	Groups_GroupSubject_DesignAndGraphics         Groups_GroupSubject = 42
)

type Groups_GroupSuggestedPrivacy int

const (
	Groups_GroupSuggestedPrivacy_None        Groups_GroupSuggestedPrivacy = 0
	Groups_GroupSuggestedPrivacy_All         Groups_GroupSuggestedPrivacy = 1
	Groups_GroupSuggestedPrivacy_Subscribers Groups_GroupSuggestedPrivacy = 2
)

type Groups_GroupTag_Color string

const (
	Groups_GroupTag_Color_454647 Groups_GroupTag_Color = "454647"
	Groups_GroupTag_Color_45678f Groups_GroupTag_Color = "45678f"
	Groups_GroupTag_Color_4bb34b Groups_GroupTag_Color = "4bb34b"
	Groups_GroupTag_Color_5181b8 Groups_GroupTag_Color = "5181b8"
	Groups_GroupTag_Color_539b9c Groups_GroupTag_Color = "539b9c"
	Groups_GroupTag_Color_5c9ce6 Groups_GroupTag_Color = "5c9ce6"
	Groups_GroupTag_Color_63b9ba Groups_GroupTag_Color = "63b9ba"
	Groups_GroupTag_Color_6bc76b Groups_GroupTag_Color = "6bc76b"
	Groups_GroupTag_Color_76787a Groups_GroupTag_Color = "76787a"
	Groups_GroupTag_Color_792ec0 Groups_GroupTag_Color = "792ec0"
	Groups_GroupTag_Color_7a6c4f Groups_GroupTag_Color = "7a6c4f"
	Groups_GroupTag_Color_7ececf Groups_GroupTag_Color = "7ececf"
	Groups_GroupTag_Color_9e8d6b Groups_GroupTag_Color = "9e8d6b"
	Groups_GroupTag_Color_A162de Groups_GroupTag_Color = "a162de"
	Groups_GroupTag_Color_Aaaeb3 Groups_GroupTag_Color = "aaaeb3"
	Groups_GroupTag_Color_Bbaa84 Groups_GroupTag_Color = "bbaa84"
	Groups_GroupTag_Color_E64646 Groups_GroupTag_Color = "e64646"
	Groups_GroupTag_Color_Ff5c5c Groups_GroupTag_Color = "ff5c5c"
	Groups_GroupTag_Color_Ffa000 Groups_GroupTag_Color = "ffa000"
	Groups_GroupTag_Color_Ffc107 Groups_GroupTag_Color = "ffc107"
)

type Groups_GroupTag struct {
	Color Groups_GroupTag_Color `json:"color"`
	Id    int                   `json:"id"`
	Name  string                `json:"name"`
	Uses  *int                  `json:"uses,omitempty"`
}

type Groups_GroupTopics int

const (
	Groups_GroupTopics_Disabled Groups_GroupTopics = 0
	Groups_GroupTopics_Open     Groups_GroupTopics = 1
	Groups_GroupTopics_Limited  Groups_GroupTopics = 2
)

// Groups_GroupType Community type
type Groups_GroupType string

const (
	Groups_GroupType_Group Groups_GroupType = "group"
	Groups_GroupType_Page  Groups_GroupType = "page"
	Groups_GroupType_Event Groups_GroupType = "event"
)

type Groups_GroupVideo int

const (
	Groups_GroupVideo_Disabled Groups_GroupVideo = 0
	Groups_GroupVideo_Open     Groups_GroupVideo = 1
	Groups_GroupVideo_Limited  Groups_GroupVideo = 2
)

type Groups_GroupWall int

const (
	Groups_GroupWall_Disabled Groups_GroupWall = 0
	Groups_GroupWall_Open     Groups_GroupWall = 1
	Groups_GroupWall_Limited  Groups_GroupWall = 2
	Groups_GroupWall_Closed   Groups_GroupWall = 3
)

type Groups_GroupWiki int

const (
	Groups_GroupWiki_Disabled Groups_GroupWiki = 0
	Groups_GroupWiki_Open     Groups_GroupWiki = 1
	Groups_GroupWiki_Limited  Groups_GroupWiki = 2
)

type Groups_GroupsArray struct {
	// Communities number
	//  Minimum: 0
	Count int `json:"count"`
	//  Format: int64
	Items []int `json:"items"`
}

type Groups_LinksItem struct {
	// Link description
	Desc *string `json:"desc,omitempty"`
	// Information whether the link title can be edited
	EditTitle *Base_BoolInt `json:"edit_title,omitempty"`
	// Link ID
	Id *int `json:"id,omitempty"`
	// Information whether the image on processing
	ImageProcessing *Base_BoolInt `json:"image_processing,omitempty"`
	// Link title
	Name *string `json:"name,omitempty"`
	// URL of square image of the link with 100 pixels in width
	//  Format: uri
	Photo100 *string `json:"photo_100,omitempty"`
	// URL of square image of the link with 50 pixels in width
	//  Format: uri
	Photo50 *string `json:"photo_50,omitempty"`
	// Link URL
	//  Format: uri
	Url *string `json:"url,omitempty"`
}

type Groups_LiveCovers struct {
	// Information whether live covers is enabled
	IsEnabled bool `json:"is_enabled"`
	// Information whether live covers photo scaling is enabled
	IsScalable *bool     `json:"is_scalable,omitempty"`
	StoryIds   *[]string `json:"story_ids,omitempty"`
}

type Groups_LongPollEvents struct {
	AudioNew                      Base_BoolInt  `json:"audio_new"`
	BoardPostDelete               Base_BoolInt  `json:"board_post_delete"`
	BoardPostEdit                 Base_BoolInt  `json:"board_post_edit"`
	BoardPostNew                  Base_BoolInt  `json:"board_post_new"`
	BoardPostRestore              Base_BoolInt  `json:"board_post_restore"`
	DonutMoneyWithdraw            Base_BoolInt  `json:"donut_money_withdraw"`
	DonutMoneyWithdrawError       Base_BoolInt  `json:"donut_money_withdraw_error"`
	DonutSubscriptionCancelled    Base_BoolInt  `json:"donut_subscription_cancelled"`
	DonutSubscriptionCreate       Base_BoolInt  `json:"donut_subscription_create"`
	DonutSubscriptionExpired      Base_BoolInt  `json:"donut_subscription_expired"`
	DonutSubscriptionPriceChanged Base_BoolInt  `json:"donut_subscription_price_changed"`
	DonutSubscriptionProlonged    Base_BoolInt  `json:"donut_subscription_prolonged"`
	GroupChangePhoto              Base_BoolInt  `json:"group_change_photo"`
	GroupChangeSettings           Base_BoolInt  `json:"group_change_settings"`
	GroupJoin                     Base_BoolInt  `json:"group_join"`
	GroupLeave                    Base_BoolInt  `json:"group_leave"`
	GroupOfficersEdit             Base_BoolInt  `json:"group_officers_edit"`
	LeadFormsNew                  *Base_BoolInt `json:"lead_forms_new,omitempty"`
	MarketCommentDelete           Base_BoolInt  `json:"market_comment_delete"`
	MarketCommentEdit             Base_BoolInt  `json:"market_comment_edit"`
	MarketCommentNew              Base_BoolInt  `json:"market_comment_new"`
	MarketCommentRestore          Base_BoolInt  `json:"market_comment_restore"`
	MarketOrderEdit               *Base_BoolInt `json:"market_order_edit,omitempty"`
	MarketOrderNew                *Base_BoolInt `json:"market_order_new,omitempty"`
	MessageAllow                  Base_BoolInt  `json:"message_allow"`
	MessageDeny                   Base_BoolInt  `json:"message_deny"`
	MessageEdit                   Base_BoolInt  `json:"message_edit"`
	MessageNew                    Base_BoolInt  `json:"message_new"`
	MessageRead                   Base_BoolInt  `json:"message_read"`
	MessageReply                  Base_BoolInt  `json:"message_reply"`
	MessageTypingState            Base_BoolInt  `json:"message_typing_state"`
	PhotoCommentDelete            Base_BoolInt  `json:"photo_comment_delete"`
	PhotoCommentEdit              Base_BoolInt  `json:"photo_comment_edit"`
	PhotoCommentNew               Base_BoolInt  `json:"photo_comment_new"`
	PhotoCommentRestore           Base_BoolInt  `json:"photo_comment_restore"`
	PhotoNew                      Base_BoolInt  `json:"photo_new"`
	PollVoteNew                   Base_BoolInt  `json:"poll_vote_new"`
	UserBlock                     Base_BoolInt  `json:"user_block"`
	UserUnblock                   Base_BoolInt  `json:"user_unblock"`
	VideoCommentDelete            Base_BoolInt  `json:"video_comment_delete"`
	VideoCommentEdit              Base_BoolInt  `json:"video_comment_edit"`
	VideoCommentNew               Base_BoolInt  `json:"video_comment_new"`
	VideoCommentRestore           Base_BoolInt  `json:"video_comment_restore"`
	VideoNew                      Base_BoolInt  `json:"video_new"`
	WallPostNew                   Base_BoolInt  `json:"wall_post_new"`
	WallReplyDelete               Base_BoolInt  `json:"wall_reply_delete"`
	WallReplyEdit                 Base_BoolInt  `json:"wall_reply_edit"`
	WallReplyNew                  Base_BoolInt  `json:"wall_reply_new"`
	WallReplyRestore              Base_BoolInt  `json:"wall_reply_restore"`
	WallRepost                    Base_BoolInt  `json:"wall_repost"`
}

type Groups_LongPollServer struct {
	// Long Poll key
	Key string `json:"key"`
	// Long Poll server address
	Server string `json:"server"`
	// Number of the last event
	Ts string `json:"ts"`
}

type Groups_LongPollSettings struct {
	// API version used for the events
	ApiVersion *string               `json:"api_version,omitempty"`
	Events     Groups_LongPollEvents `json:"events"`
	// Shows whether Long Poll is enabled
	IsEnabled bool `json:"is_enabled"`
}

type Groups_MarketInfo struct {
	// Contact person ID
	ContactId *int             `json:"contact_id,omitempty"`
	Currency  *Market_Currency `json:"currency,omitempty"`
	// Currency name
	CurrencyText *string `json:"currency_text,omitempty"`
	// Information whether the market is enabled
	Enabled *Base_BoolInt `json:"enabled,omitempty"`
	// Main market album ID
	MainAlbumId   *int          `json:"main_album_id,omitempty"`
	MinOrderPrice *Market_Price `json:"min_order_price,omitempty"`
	// Maximum price
	PriceMax *string `json:"price_max,omitempty"`
	// Minimum price
	PriceMin *string `json:"price_min,omitempty"`
	// Market type
	Type *string `json:"type,omitempty"`
}

// Groups_MarketState Declares state if market is enabled in group.
type Groups_MarketState string

const (
	Groups_MarketState_None     Groups_MarketState = "none"
	Groups_MarketState_Basic    Groups_MarketState = "basic"
	Groups_MarketState_Advanced Groups_MarketState = "advanced"
)

type Groups_MemberRole struct {
	// User ID
	Id          int                            `json:"id"`
	Permissions *[]Groups_MemberRolePermission `json:"permissions,omitempty"`
	Role        *Groups_MemberRoleStatus       `json:"role,omitempty"`
}

type Groups_MemberRolePermission string

const (
	Groups_MemberRolePermission_Ads Groups_MemberRolePermission = "ads"
)

// Groups_MemberRoleStatus User's credentials as community admin
type Groups_MemberRoleStatus string

const (
	Groups_MemberRoleStatus_Moderator     Groups_MemberRoleStatus = "moderator"
	Groups_MemberRoleStatus_Editor        Groups_MemberRoleStatus = "editor"
	Groups_MemberRoleStatus_Administrator Groups_MemberRoleStatus = "administrator"
	Groups_MemberRoleStatus_Creator       Groups_MemberRoleStatus = "creator"
	Groups_MemberRoleStatus_Advertiser    Groups_MemberRoleStatus = "advertiser"
)

type Groups_MemberStatus struct {
	// Information whether user is a member of the group
	Member Base_BoolInt `json:"member"`
	// User ID
	//  Format: int64
	//  Minimum: 1
	UserId int `json:"user_id"`
}

type Groups_MemberStatusFull struct {
	// Information whether user can be invited
	CanInvite *Base_BoolInt `json:"can_invite,omitempty"`
	// Information whether user's invite to the group can be recalled
	CanRecall *Base_BoolInt `json:"can_recall,omitempty"`
	// Information whether user has been invited to the group
	Invitation *Base_BoolInt `json:"invitation,omitempty"`
	// Information whether user is a member of the group
	Member Base_BoolInt `json:"member"`
	// Information whether user has send request to the group
	Request *Base_BoolInt `json:"request,omitempty"`
	// User ID
	//  Format: int64
	//  Minimum: 1
	UserId int `json:"user_id"`
}

// Groups_OnlineStatus Online status of group
type Groups_OnlineStatus struct {
	// Estimated time of answer (for status = answer_mark)
	Minutes *int                    `json:"minutes,omitempty"`
	Status  Groups_OnlineStatusType `json:"status"`
}

// Groups_OnlineStatusType Type of online status of group
type Groups_OnlineStatusType string

const (
	Groups_OnlineStatusType_None       Groups_OnlineStatusType = "none"
	Groups_OnlineStatusType_Online     Groups_OnlineStatusType = "online"
	Groups_OnlineStatusType_AnswerMark Groups_OnlineStatusType = "answer_mark"
)

type Groups_OwnerXtrBanInfo struct {
	BanInfo *Groups_BanInfo `json:"ban_info,omitempty"`
	// Information about group if type = group
	Group *Groups_Group `json:"group,omitempty"`
	// Information about group if type = profile
	Profile *Users_User                 `json:"profile,omitempty"`
	Type    *Groups_OwnerXtrBanInfoType `json:"type,omitempty"`
}

// Groups_OwnerXtrBanInfoType Owner type
type Groups_OwnerXtrBanInfoType string

const (
	Groups_OwnerXtrBanInfoType_Group   Groups_OwnerXtrBanInfoType = "group"
	Groups_OwnerXtrBanInfoType_Profile Groups_OwnerXtrBanInfoType = "profile"
)

type Groups_PhotoSize struct {
	// Image height
	//  Minimum: 0
	Height int `json:"height"`
	// Image width
	//  Minimum: 0
	Width int `json:"width"`
}

// Groups_RoleOptions User's credentials as community admin
type Groups_RoleOptions string

const (
	Groups_RoleOptions_Moderator     Groups_RoleOptions = "moderator"
	Groups_RoleOptions_Editor        Groups_RoleOptions = "editor"
	Groups_RoleOptions_Administrator Groups_RoleOptions = "administrator"
	Groups_RoleOptions_Creator       Groups_RoleOptions = "creator"
)

// Groups_SectionsListItem (index, title) tuples
type Groups_SectionsListItem []string

type Groups_SettingsTwitter_Status string

const (
	Groups_SettingsTwitter_Status_Loading Groups_SettingsTwitter_Status = "loading"
	Groups_SettingsTwitter_Status_Sync    Groups_SettingsTwitter_Status = "sync"
)

type Groups_SettingsTwitter struct {
	Name   *string                       `json:"name,omitempty"`
	Status Groups_SettingsTwitter_Status `json:"status"`
}

type Groups_SubjectItem struct {
	// Subject ID
	Id int `json:"id"`
	// Subject title
	Name string `json:"name"`
}

type Groups_TokenPermissionSetting struct {
	Name string `json:"name"`
	//  Minimum: 0
	Setting int `json:"setting"`
}

type Groups_UserXtrRole struct {
	Users_UserFull
	Role *Groups_RoleOptions `json:"role,omitempty"`
}

//easyjson:skip
type LeadForms_Answer_Answer struct {
	raw []byte
}

func (o *LeadForms_Answer_Answer) MarshalJSON() ([]byte, error) {
	return o.raw, nil
}

func (o *LeadForms_Answer_Answer) UnmarshalJSON(body []byte) (err error) {
	o.raw = body
	return nil
}

func (o LeadForms_Answer_Answer) Raw() []byte {
	return o.raw
}

type LeadForms_Answer struct {
	Answer LeadForms_Answer_Answer `json:"answer"`
	Key    string                  `json:"key"`
}

type LeadForms_AnswerItem struct {
	Key   *string `json:"key,omitempty"`
	Value string  `json:"value"`
}

type LeadForms_Form struct {
	Active       *Base_BoolInt `json:"active,omitempty"`
	Confirmation *string       `json:"confirmation,omitempty"`
	Description  *string       `json:"description,omitempty"`
	FormId       int           `json:"form_id"`
	//  Format: int64
	GroupId      int     `json:"group_id"`
	LeadsCount   int     `json:"leads_count"`
	Name         *string `json:"name,omitempty"`
	NotifyAdmins *string `json:"notify_admins,omitempty"`
	NotifyEmails *string `json:"notify_emails,omitempty"`
	OncePerUser  *int    `json:"once_per_user,omitempty"`
	Photo        *string `json:"photo,omitempty"`
	PixelCode    *string `json:"pixel_code,omitempty"`
	//  Format: uri
	PolicyLinkUrl *string                   `json:"policy_link_url,omitempty"`
	Questions     *[]LeadForms_QuestionItem `json:"questions,omitempty"`
	//  Format: uri
	SiteLinkUrl *string `json:"site_link_url,omitempty"`
	Title       *string `json:"title,omitempty"`
	//  Format: uri
	Url string `json:"url"`
}

type LeadForms_Lead struct {
	AdId    *int               `json:"ad_id,omitempty"`
	Answers []LeadForms_Answer `json:"answers"`
	Date    int                `json:"date"`
	LeadId  int                `json:"lead_id"`
	//  Format: int64
	UserId int `json:"user_id"`
}

type LeadForms_QuestionItem_Type string

const (
	LeadForms_QuestionItem_Type_Input    LeadForms_QuestionItem_Type = "input"
	LeadForms_QuestionItem_Type_Textarea LeadForms_QuestionItem_Type = "textarea"
	LeadForms_QuestionItem_Type_Radio    LeadForms_QuestionItem_Type = "radio"
	LeadForms_QuestionItem_Type_Checkbox LeadForms_QuestionItem_Type = "checkbox"
	LeadForms_QuestionItem_Type_Select   LeadForms_QuestionItem_Type = "select"
)

type LeadForms_QuestionItem struct {
	Key   string  `json:"key"`
	Label *string `json:"label,omitempty"`
	// Опции выбора для типов radio, checkbox, select
	Options *[]LeadForms_QuestionItemOption `json:"options,omitempty"`
	Type    LeadForms_QuestionItem_Type     `json:"type"`
}

type LeadForms_QuestionItemOption struct {
	Key   *string `json:"key,omitempty"`
	Label string  `json:"label"`
}

type Likes_Type string

const (
	Likes_Type_Post          Likes_Type = "post"
	Likes_Type_Comment       Likes_Type = "comment"
	Likes_Type_Photo         Likes_Type = "photo"
	Likes_Type_Audio         Likes_Type = "audio"
	Likes_Type_Video         Likes_Type = "video"
	Likes_Type_Note          Likes_Type = "note"
	Likes_Type_Market        Likes_Type = "market"
	Likes_Type_PhotoComment  Likes_Type = "photo_comment"
	Likes_Type_VideoComment  Likes_Type = "video_comment"
	Likes_Type_TopicComment  Likes_Type = "topic_comment"
	Likes_Type_MarketComment Likes_Type = "market_comment"
	Likes_Type_Sitepage      Likes_Type = "sitepage"
	Likes_Type_Textpost      Likes_Type = "textpost"
)

type Link_TargetObject struct {
	// Item ID
	ItemId *int `json:"item_id,omitempty"`
	// Owner ID
	//  Format: int64
	OwnerId *int `json:"owner_id,omitempty"`
	// Object type
	Type *string `json:"type,omitempty"`
}

type Market_Currency struct {
	// Currency ID
	//  Minimum: 0
	Id int `json:"id"`
	// Currency sign
	Name string `json:"name"`
	// Currency title
	Title string `json:"title"`
}

type Market_MarketAlbum struct {
	// Items number
	//  Minimum: 0
	Count int `json:"count"`
	// Market album ID
	//  Minimum: 1
	Id int `json:"id"`
	// Is album hidden
	IsHidden *bool `json:"is_hidden,omitempty"`
	// Is album main for owner
	IsMain *bool `json:"is_main,omitempty"`
	// Market album owner's ID
	//  Format: int64
	OwnerId int           `json:"owner_id"`
	Photo   *Photos_Photo `json:"photo,omitempty"`
	// Market album title
	Title string `json:"title"`
	// Date when album has been updated last time in Unixtime
	//  Minimum: 0
	UpdatedTime int `json:"updated_time"`
}

type Market_MarketCategory Market_MarketCategoryOld

type Market_MarketCategoryNested struct {
	// Category ID
	Id int `json:"id"`
	// Category name
	Name   string                       `json:"name"`
	Parent *Market_MarketCategoryNested `json:"parent,omitempty"`
}

type Market_MarketCategoryOld struct {
	// Category ID
	Id int `json:"id"`
	// Category name
	Name    string         `json:"name"`
	Section Market_Section `json:"section"`
}

type Market_MarketCategoryTree struct {
	Children *[]Market_MarketCategoryTree `json:"children,omitempty"`
	// Category ID
	Id int `json:"id"`
	// Category name
	Name string `json:"name"`
}

type Market_MarketItem struct {
	// Access key for the market item
	AccessKey    *string                       `json:"access_key,omitempty"`
	Availability Market_MarketItemAvailability `json:"availability"`
	// Title for button for url
	ButtonTitle *string               `json:"button_title,omitempty"`
	Category    Market_MarketCategory `json:"category"`
	// Date when the item has been created in Unixtime
	//  Minimum: 0
	Date *int `json:"date,omitempty"`
	// Item description
	Description string  `json:"description"`
	ExternalId  *string `json:"external_id,omitempty"`
	// Item ID
	//  Minimum: 0
	Id            int   `json:"id"`
	IsFavorite    *bool `json:"is_favorite,omitempty"`
	IsMainVariant *bool `json:"is_main_variant,omitempty"`
	// Item owner's ID
	//  Format: int64
	OwnerId int          `json:"owner_id"`
	Price   Market_Price `json:"price"`
	//  MaxLength: 50
	Sku *string `json:"sku,omitempty"`
	// URL of the preview image
	//  Format: uri
	ThumbPhoto *string `json:"thumb_photo,omitempty"`
	// Item title
	Title string `json:"title"`
	// URL to item
	//  Format: uri
	Url *string `json:"url,omitempty"`
	//  Minimum: 0
	VariantsGroupingId *int `json:"variants_grouping_id,omitempty"`
}

// Market_MarketItemAvailability Information whether the item is available
type Market_MarketItemAvailability int

const (
	Market_MarketItemAvailability_Available   Market_MarketItemAvailability = 0
	Market_MarketItemAvailability_Removed     Market_MarketItemAvailability = 1
	Market_MarketItemAvailability_Unavailable Market_MarketItemAvailability = 2
)

type Market_MarketItemFull struct {
	Market_MarketItem
	// Contains ad ID if it has
	AdId      *int   `json:"ad_id,omitempty"`
	AlbumsIds *[]int `json:"albums_ids,omitempty"`
	// Information whether current use can comment the item
	CanComment *Base_BoolInt `json:"can_comment,omitempty"`
	// Information whether current use can repost the item
	CanRepost *Base_BoolInt `json:"can_repost,omitempty"`
	// Information for cancel and revert order
	CancelInfo *Base_Link        `json:"cancel_info,omitempty"`
	Likes      *Base_Likes       `json:"likes,omitempty"`
	Photos     *[]Photos_Photo   `json:"photos,omitempty"`
	Reposts    *Base_RepostsInfo `json:"reposts,omitempty"`
	// User agreement info
	UserAgreementInfo *string `json:"user_agreement_info,omitempty"`
	// Views number
	ViewsCount *int `json:"views_count,omitempty"`
	// Object identifier in wishlist of viewer
	WishlistItemId *int `json:"wishlist_item_id,omitempty"`
}

type Market_Order struct {
	Address *string `json:"address,omitempty"`
	// Information for cancel and revert order
	CancelInfo *Base_Link `json:"cancel_info,omitempty"`
	Comment    *string    `json:"comment,omitempty"`
	//  Minimum: 0
	Date           int     `json:"date"`
	DisplayOrderId *string `json:"display_order_id,omitempty"`
	//  Format: int64
	//  Minimum: 0
	GroupId int `json:"group_id"`
	//  Minimum: 0
	Id int `json:"id"`
	//  Minimum: 0
	ItemsCount      int     `json:"items_count"`
	MerchantComment *string `json:"merchant_comment,omitempty"`
	// Several order items for preview
	PreviewOrderItems *[]Market_OrderItem `json:"preview_order_items,omitempty"`
	//  Minimum: 0
	Status      int          `json:"status"`
	TotalPrice  Market_Price `json:"total_price"`
	TrackLink   *string      `json:"track_link,omitempty"`
	TrackNumber *string      `json:"track_number,omitempty"`
	//  Format: int64
	//  Minimum: 0
	UserId int `json:"user_id"`
	//  Minimum: 0
	Weight *int `json:"weight,omitempty"`
}

type Market_OrderItem struct {
	Item   Market_MarketItem `json:"item"`
	ItemId int               `json:"item_id"`
	//  Format: int64
	OwnerId int           `json:"owner_id"`
	Photo   *Photos_Photo `json:"photo,omitempty"`
	Price   Market_Price  `json:"price"`
	//  Minimum: 0
	Quantity int       `json:"quantity"`
	Title    *string   `json:"title,omitempty"`
	Variants *[]string `json:"variants,omitempty"`
}

type Market_Price struct {
	// Amount
	Amount       string          `json:"amount"`
	Currency     Market_Currency `json:"currency"`
	DiscountRate *int            `json:"discount_rate,omitempty"`
	OldAmount    *string         `json:"old_amount,omitempty"`
	// Textual representation of old price
	OldAmountText *string `json:"old_amount_text,omitempty"`
	// Text
	Text string `json:"text"`
}

type Market_Section struct {
	// Section ID
	//  Minimum: 0
	Id int `json:"id"`
	// Section name
	Name string `json:"name"`
}

// Market_ServicesViewType Type of view. 1 - cards, 2 - rows
type Market_ServicesViewType int

const (
	Market_ServicesViewType_Cards Market_ServicesViewType = 1
	Market_ServicesViewType_Rows  Market_ServicesViewType = 2
)

type Messages_AudioMessage struct {
	// Access key for audio message
	AccessKey *string `json:"access_key,omitempty"`
	// Audio message duration in seconds
	//  Minimum: 0
	Duration int `json:"duration"`
	// Audio message ID
	//  Minimum: 0
	Id int `json:"id"`
	// MP3 file URL
	//  Format: uri
	LinkMp3 string `json:"link_mp3"`
	// OGG file URL
	//  Format: uri
	LinkOgg string `json:"link_ogg"`
	// Audio message owner ID
	//  Format: int64
	OwnerId int `json:"owner_id"`
	//  Minimum: 1
	//  Maximum: 11
	TranscriptError *int `json:"transcript_error,omitempty"`
	//  Minimum: 0
	Waveform []int `json:"waveform"`
}

type Messages_Chat struct {
	// Chat creator ID
	//  Format: int64
	AdminId int `json:"admin_id"`
	// Chat ID
	Id int `json:"id"`
	// If provided photo is default
	IsDefaultPhoto *bool `json:"is_default_photo,omitempty"`
	// If chat is group channel
	IsGroupChannel *bool `json:"is_group_channel,omitempty"`
	// Shows that user has been kicked from the chat
	Kicked *Base_BoolInt `json:"kicked,omitempty"`
	// Shows that user has been left the chat
	Left *Base_BoolInt `json:"left,omitempty"`
	// Count members in a chat
	MembersCount int `json:"members_count"`
	// URL of the preview image with 100 px in width
	//  Format: uri
	Photo100 *string `json:"photo_100,omitempty"`
	// URL of the preview image with 200 px in width
	//  Format: uri
	Photo200 *string `json:"photo_200,omitempty"`
	// URL of the preview image with 50 px in width
	//  Format: uri
	Photo50      *string                    `json:"photo_50,omitempty"`
	PushSettings *Messages_ChatPushSettings `json:"push_settings,omitempty"`
	// Chat title
	Title *string `json:"title,omitempty"`
	// Chat type
	Type string `json:"type"`
	//  Format: int64
	Users []int `json:"users"`
}

type Messages_ChatFull struct {
	// Chat creator ID
	//  Format: int64
	AdminId int `json:"admin_id"`
	// Chat ID
	Id int `json:"id"`
	// Shows that user has been kicked from the chat
	Kicked *Base_BoolInt `json:"kicked,omitempty"`
	// Shows that user has been left the chat
	Left *Base_BoolInt `json:"left,omitempty"`
	// URL of the preview image with 100 px in width
	//  Format: uri
	Photo100 *string `json:"photo_100,omitempty"`
	// URL of the preview image with 200 px in width
	//  Format: uri
	Photo200 *string `json:"photo_200,omitempty"`
	// URL of the preview image with 50 px in width
	//  Format: uri
	Photo50      *string                    `json:"photo_50,omitempty"`
	PushSettings *Messages_ChatPushSettings `json:"push_settings,omitempty"`
	// Chat title
	Title *string `json:"title,omitempty"`
	// Chat type
	Type  string                      `json:"type"`
	Users []Messages_UserXtrInvitedBy `json:"users"`
}

type Messages_ChatPreview struct {
	//  Format: int64
	//  Minimum: 0
	AdminId        *int             `json:"admin_id,omitempty"`
	Button         *Base_LinkButton `json:"button,omitempty"`
	IsDon          *bool            `json:"is_don,omitempty"`
	IsGroupChannel *bool            `json:"is_group_channel,omitempty"`
	IsMember       *bool            `json:"is_member,omitempty"`
	Joined         *bool            `json:"joined,omitempty"`
	LocalId        *int             `json:"local_id,omitempty"`
	//  Format: int64
	Members *[]int `json:"members,omitempty"`
	//  Minimum: 0
	MembersCount *int                        `json:"members_count,omitempty"`
	Photo        *Messages_ChatSettingsPhoto `json:"photo,omitempty"`
	Title        *string                     `json:"title,omitempty"`
}

type Messages_ChatPushSettings struct {
	// Time until that notifications are disabled
	DisabledUntil *int `json:"disabled_until,omitempty"`
	// Information whether the sound is on
	Sound *Base_BoolInt `json:"sound,omitempty"`
}

type Messages_ChatRestrictions struct {
	// Only admins can promote users to admins
	AdminsPromoteUsers *bool `json:"admins_promote_users,omitempty"`
	// Only admins can change chat info
	OnlyAdminsEditInfo *bool `json:"only_admins_edit_info,omitempty"`
	// Only admins can edit pinned message
	OnlyAdminsEditPin *bool `json:"only_admins_edit_pin,omitempty"`
	// Only admins can invite users to this chat
	OnlyAdminsInvite *bool `json:"only_admins_invite,omitempty"`
	// Only admins can kick users from this chat
	OnlyAdminsKick *bool `json:"only_admins_kick,omitempty"`
}

type Messages_ChatSettings struct {
	Acl Messages_ChatSettingsAcl `json:"acl"`
	//  Format: int64
	ActiveIds []int `json:"active_ids"`
	// Ids of chat admins
	//  Format: int64
	AdminIds             *[]int  `json:"admin_ids,omitempty"`
	DisappearingChatLink *string `json:"disappearing_chat_link,omitempty"`
	FriendsCount         *int    `json:"friends_count,omitempty"`
	IsDisappearing       *bool   `json:"is_disappearing,omitempty"`
	IsGroupChannel       *bool   `json:"is_group_channel,omitempty"`
	IsService            *bool   `json:"is_service,omitempty"`
	MembersCount         *int    `json:"members_count,omitempty"`
	//  Format: int64
	OwnerId       int                               `json:"owner_id"`
	Permissions   *Messages_ChatSettingsPermissions `json:"permissions,omitempty"`
	Photo         *Messages_ChatSettingsPhoto       `json:"photo,omitempty"`
	PinnedMessage *Messages_PinnedMessage           `json:"pinned_message,omitempty"`
	State         Messages_ChatSettingsState        `json:"state"`
	Theme         *string                           `json:"theme,omitempty"`
	// Chat title
	Title string `json:"title"`
}

type Messages_ChatSettingsAcl struct {
	// Can you init group call in the chat
	CanCall bool `json:"can_call"`
	// Can you change photo, description and name
	CanChangeInfo bool `json:"can_change_info"`
	// Can you change invite link for this chat
	CanChangeInviteLink bool `json:"can_change_invite_link"`
	// Can you pin/unpin message for this chat
	CanChangePin bool `json:"can_change_pin"`
	// Can you change chat service type
	CanChangeServiceType *bool `json:"can_change_service_type,omitempty"`
	// Can you copy chat
	CanCopyChat bool `json:"can_copy_chat"`
	// Can you invite other peers in chat
	CanInvite bool `json:"can_invite"`
	// Can you moderate (delete) other users' messages
	CanModerate bool `json:"can_moderate"`
	// Can you promote simple users to chat admins
	CanPromoteUsers bool `json:"can_promote_users"`
	// Can you see invite link for this chat
	CanSeeInviteLink bool `json:"can_see_invite_link"`
	// Can you use mass mentions
	CanUseMassMentions bool `json:"can_use_mass_mentions"`
}

type Messages_ChatSettingsPermissions_Call string

const (
	Messages_ChatSettingsPermissions_Call_Owner          Messages_ChatSettingsPermissions_Call = "owner"
	Messages_ChatSettingsPermissions_Call_OwnerAndAdmins Messages_ChatSettingsPermissions_Call = "owner_and_admins"
	Messages_ChatSettingsPermissions_Call_All            Messages_ChatSettingsPermissions_Call = "all"
)

type Messages_ChatSettingsPermissions_ChangeAdmins string

const (
	Messages_ChatSettingsPermissions_ChangeAdmins_Owner          Messages_ChatSettingsPermissions_ChangeAdmins = "owner"
	Messages_ChatSettingsPermissions_ChangeAdmins_OwnerAndAdmins Messages_ChatSettingsPermissions_ChangeAdmins = "owner_and_admins"
)

type Messages_ChatSettingsPermissions_ChangeInfo string

const (
	Messages_ChatSettingsPermissions_ChangeInfo_Owner          Messages_ChatSettingsPermissions_ChangeInfo = "owner"
	Messages_ChatSettingsPermissions_ChangeInfo_OwnerAndAdmins Messages_ChatSettingsPermissions_ChangeInfo = "owner_and_admins"
	Messages_ChatSettingsPermissions_ChangeInfo_All            Messages_ChatSettingsPermissions_ChangeInfo = "all"
)

type Messages_ChatSettingsPermissions_ChangePin string

const (
	Messages_ChatSettingsPermissions_ChangePin_Owner          Messages_ChatSettingsPermissions_ChangePin = "owner"
	Messages_ChatSettingsPermissions_ChangePin_OwnerAndAdmins Messages_ChatSettingsPermissions_ChangePin = "owner_and_admins"
	Messages_ChatSettingsPermissions_ChangePin_All            Messages_ChatSettingsPermissions_ChangePin = "all"
)

type Messages_ChatSettingsPermissions_Invite string

const (
	Messages_ChatSettingsPermissions_Invite_Owner          Messages_ChatSettingsPermissions_Invite = "owner"
	Messages_ChatSettingsPermissions_Invite_OwnerAndAdmins Messages_ChatSettingsPermissions_Invite = "owner_and_admins"
	Messages_ChatSettingsPermissions_Invite_All            Messages_ChatSettingsPermissions_Invite = "all"
)

type Messages_ChatSettingsPermissions_SeeInviteLink string

const (
	Messages_ChatSettingsPermissions_SeeInviteLink_Owner          Messages_ChatSettingsPermissions_SeeInviteLink = "owner"
	Messages_ChatSettingsPermissions_SeeInviteLink_OwnerAndAdmins Messages_ChatSettingsPermissions_SeeInviteLink = "owner_and_admins"
	Messages_ChatSettingsPermissions_SeeInviteLink_All            Messages_ChatSettingsPermissions_SeeInviteLink = "all"
)

type Messages_ChatSettingsPermissions_UseMassMentions string

const (
	Messages_ChatSettingsPermissions_UseMassMentions_Owner          Messages_ChatSettingsPermissions_UseMassMentions = "owner"
	Messages_ChatSettingsPermissions_UseMassMentions_OwnerAndAdmins Messages_ChatSettingsPermissions_UseMassMentions = "owner_and_admins"
	Messages_ChatSettingsPermissions_UseMassMentions_All            Messages_ChatSettingsPermissions_UseMassMentions = "all"
)

type Messages_ChatSettingsPermissions struct {
	// Who can make calls
	Call *Messages_ChatSettingsPermissions_Call `json:"call,omitempty"`
	// Who can change admins
	ChangeAdmins *Messages_ChatSettingsPermissions_ChangeAdmins `json:"change_admins,omitempty"`
	// Who can change chat info
	ChangeInfo *Messages_ChatSettingsPermissions_ChangeInfo `json:"change_info,omitempty"`
	// Who can change pinned message
	ChangePin *Messages_ChatSettingsPermissions_ChangePin `json:"change_pin,omitempty"`
	// Who can invite users to chat
	Invite *Messages_ChatSettingsPermissions_Invite `json:"invite,omitempty"`
	// Who can see invite link
	SeeInviteLink *Messages_ChatSettingsPermissions_SeeInviteLink `json:"see_invite_link,omitempty"`
	// Who can use mass mentions
	UseMassMentions *Messages_ChatSettingsPermissions_UseMassMentions `json:"use_mass_mentions,omitempty"`
}

type Messages_ChatSettingsPhoto struct {
	// If provided photo is default call photo
	IsDefaultCallPhoto *bool `json:"is_default_call_photo,omitempty"`
	// If provided photo is default
	IsDefaultPhoto *bool `json:"is_default_photo,omitempty"`
	// URL of the preview image with 100px in width
	//  Format: uri
	Photo100 *string `json:"photo_100,omitempty"`
	// URL of the preview image with 200px in width
	//  Format: uri
	Photo200 *string `json:"photo_200,omitempty"`
	// URL of the preview image with 50px in width
	//  Format: uri
	Photo50 *string `json:"photo_50,omitempty"`
}

type Messages_ChatSettingsState string

const (
	Messages_ChatSettingsState_In     Messages_ChatSettingsState = "in"
	Messages_ChatSettingsState_Kicked Messages_ChatSettingsState = "kicked"
	Messages_ChatSettingsState_Left   Messages_ChatSettingsState = "left"
)

type Messages_Conversation_SpecialServiceType string

const (
	Messages_Conversation_SpecialServiceType_BusinessNotify Messages_Conversation_SpecialServiceType = "business_notify"
)

type Messages_Conversation struct {
	CanWrite        *Messages_ConversationCanWrite `json:"can_write,omitempty"`
	ChatSettings    *Messages_ChatSettings         `json:"chat_settings,omitempty"`
	CurrentKeyboard *Messages_Keyboard             `json:"current_keyboard,omitempty"`
	Important       *bool                          `json:"important,omitempty"`
	// Last message user have read
	//  Minimum: 0
	InRead int `json:"in_read"`
	// Is this conversation uread
	IsMarkedUnread *bool `json:"is_marked_unread,omitempty"`
	// Conversation message ID of the last message in conversation
	//  Minimum: 0
	LastConversationMessageId *int `json:"last_conversation_message_id,omitempty"`
	// ID of the last message in conversation
	//  Minimum: 0
	LastMessageId int `json:"last_message_id"`
	// Ids of messages with mentions
	Mentions           *[]int                       `json:"mentions,omitempty"`
	MessageRequestData *Messages_MessageRequestData `json:"message_request_data,omitempty"`
	// Last outcoming message have been read by the opponent
	//  Minimum: 0
	OutRead            int                                       `json:"out_read"`
	OutReadBy          *Messages_OutReadBy                       `json:"out_read_by,omitempty"`
	Peer               Messages_ConversationPeer                 `json:"peer"`
	PushSettings       *Messages_PushSettings                    `json:"push_settings,omitempty"`
	SortId             *Messages_ConversationSortId              `json:"sort_id,omitempty"`
	SpecialServiceType *Messages_Conversation_SpecialServiceType `json:"special_service_type,omitempty"`
	Unanswered         *bool                                     `json:"unanswered,omitempty"`
	// Unread messages number
	//  Minimum: 0
	UnreadCount *int `json:"unread_count,omitempty"`
}

type Messages_ConversationCanWrite struct {
	Allowed bool `json:"allowed"`
	Reason  *int `json:"reason,omitempty"`
}

type Messages_ConversationMember struct {
	// Is it possible for user to kick this member
	CanKick *bool `json:"can_kick,omitempty"`
	//  Format: int64
	InvitedBy        *int  `json:"invited_by,omitempty"`
	IsAdmin          *bool `json:"is_admin,omitempty"`
	IsMessageRequest *bool `json:"is_message_request,omitempty"`
	IsOwner          *bool `json:"is_owner,omitempty"`
	//  Minimum: 0
	JoinDate *int `json:"join_date,omitempty"`
	//  Format: int64
	MemberId int `json:"member_id"`
	// Message request date
	//  Minimum: 0
	RequestDate *int `json:"request_date,omitempty"`
}

type Messages_ConversationPeer struct {
	Id      int                           `json:"id"`
	LocalId *int                          `json:"local_id,omitempty"`
	Type    Messages_ConversationPeerType `json:"type"`
}

// Messages_ConversationPeerType Peer type
type Messages_ConversationPeerType string

const (
	Messages_ConversationPeerType_Chat  Messages_ConversationPeerType = "chat"
	Messages_ConversationPeerType_Email Messages_ConversationPeerType = "email"
	Messages_ConversationPeerType_User  Messages_ConversationPeerType = "user"
	Messages_ConversationPeerType_Group Messages_ConversationPeerType = "group"
)

type Messages_ConversationSortId struct {
	// Major id for sorting conversations
	//  Minimum: 0
	MajorId int `json:"major_id"`
	// Minor id for sorting conversations
	//  Minimum: 0
	MinorId int `json:"minor_id"`
}

type Messages_ConversationWithMessage struct {
	Conversation Messages_Conversation `json:"conversation"`
	LastMessage  *Messages_Message     `json:"last_message,omitempty"`
}

type Messages_ForeignMessage struct {
	Attachments *[]Messages_MessageAttachment `json:"attachments,omitempty"`
	// Conversation message ID
	ConversationMessageId *int `json:"conversation_message_id,omitempty"`
	// Date when the message was created
	Date int `json:"date"`
	// Message author's ID
	//  Format: int64
	FromId      int                        `json:"from_id"`
	FwdMessages *[]Messages_ForeignMessage `json:"fwd_messages,omitempty"`
	Geo         *Base_Geo                  `json:"geo,omitempty"`
	// Message ID
	Id *int `json:"id,omitempty"`
	// Additional data sent along with message for developer convenience
	Payload *string `json:"payload,omitempty"`
	// Peer ID
	PeerId       *int                     `json:"peer_id,omitempty"`
	ReplyMessage *Messages_ForeignMessage `json:"reply_message,omitempty"`
	// Message text
	Text string `json:"text"`
	// Date when the message has been updated in Unixtime
	UpdateTime *int `json:"update_time,omitempty"`
	// Was the audio message inside already listened by you
	WasListened *bool `json:"was_listened,omitempty"`
}

type Messages_Forward struct {
	ConversationMessageIds *[]int `json:"conversation_message_ids,omitempty"`
	// If you need to reply to a message
	IsReply    *bool  `json:"is_reply,omitempty"`
	MessageIds *[]int `json:"message_ids,omitempty"`
	// Messages owner_id
	//  Format: int64
	OwnerId *int `json:"owner_id,omitempty"`
	// Messages peer_id
	PeerId *int `json:"peer_id,omitempty"`
}

type Messages_GetConversationById struct {
	// Total number
	//  Minimum: 0
	Count int                     `json:"count"`
	Items []Messages_Conversation `json:"items"`
}

type Messages_GetConversationByIdExtended struct {
	Messages_GetConversationById
	Groups   *[]Groups_GroupFull `json:"groups,omitempty"`
	Profiles *[]Users_UserFull   `json:"profiles,omitempty"`
}

type Messages_GetConversationMembers struct {
	ChatRestrictions *Messages_ChatRestrictions `json:"chat_restrictions,omitempty"`
	// Chat members count
	//  Minimum: 0
	Count    int                           `json:"count"`
	Groups   *[]Groups_GroupFull           `json:"groups,omitempty"`
	Items    []Messages_ConversationMember `json:"items"`
	Profiles *[]Users_UserFull             `json:"profiles,omitempty"`
}

type Messages_Graffiti struct {
	// Access key for graffiti
	AccessKey *string `json:"access_key,omitempty"`
	// Graffiti height
	//  Minimum: 0
	Height int `json:"height"`
	// Graffiti ID
	//  Minimum: 0
	Id int `json:"id"`
	// Graffiti owner ID
	//  Format: int64
	OwnerId int `json:"owner_id"`
	// Graffiti URL
	//  Format: uri
	Url string `json:"url"`
	// Graffiti width
	//  Minimum: 0
	Width int `json:"width"`
}

type Messages_HistoryAttachment struct {
	Attachment Messages_HistoryMessageAttachment `json:"attachment"`
	// Forward level (optional)
	ForwardLevel *int `json:"forward_level,omitempty"`
	// Message author's ID
	//  Format: int64
	FromId int `json:"from_id"`
	// Message ID
	MessageId   int   `json:"message_id"`
	WasListened *bool `json:"was_listened,omitempty"`
}

type Messages_HistoryMessageAttachment struct {
	Audio        *Audio_Audio                          `json:"audio,omitempty"`
	AudioMessage *Messages_AudioMessage                `json:"audio_message,omitempty"`
	Doc          *Docs_Doc                             `json:"doc,omitempty"`
	Graffiti     *Messages_Graffiti                    `json:"graffiti,omitempty"`
	Link         *Base_Link                            `json:"link,omitempty"`
	Market       *Market_MarketItem                    `json:"market,omitempty"`
	Photo        *Photos_Photo                         `json:"photo,omitempty"`
	Type         Messages_HistoryMessageAttachmentType `json:"type"`
	Video        *Video_Video                          `json:"video,omitempty"`
	Wall         *Wall_WallpostFull                    `json:"wall,omitempty"`
}

// Messages_HistoryMessageAttachmentType Attachments type
type Messages_HistoryMessageAttachmentType string

const (
	Messages_HistoryMessageAttachmentType_Photo        Messages_HistoryMessageAttachmentType = "photo"
	Messages_HistoryMessageAttachmentType_Video        Messages_HistoryMessageAttachmentType = "video"
	Messages_HistoryMessageAttachmentType_Audio        Messages_HistoryMessageAttachmentType = "audio"
	Messages_HistoryMessageAttachmentType_Doc          Messages_HistoryMessageAttachmentType = "doc"
	Messages_HistoryMessageAttachmentType_Link         Messages_HistoryMessageAttachmentType = "link"
	Messages_HistoryMessageAttachmentType_Market       Messages_HistoryMessageAttachmentType = "market"
	Messages_HistoryMessageAttachmentType_Wall         Messages_HistoryMessageAttachmentType = "wall"
	Messages_HistoryMessageAttachmentType_Share        Messages_HistoryMessageAttachmentType = "share"
	Messages_HistoryMessageAttachmentType_Graffiti     Messages_HistoryMessageAttachmentType = "graffiti"
	Messages_HistoryMessageAttachmentType_AudioMessage Messages_HistoryMessageAttachmentType = "audio_message"
)

type Messages_Keyboard struct {
	// Community or bot, which set this keyboard
	//  Format: int64
	AuthorId *int                        `json:"author_id,omitempty"`
	Buttons  [][]Messages_KeyboardButton `json:"buttons"`
	Inline   *bool                       `json:"inline,omitempty"`
	// Should this keyboard disappear on first use
	OneTime bool `json:"one_time"`
}

type Messages_KeyboardButton_Color string

const (
	Messages_KeyboardButton_Color_Default  Messages_KeyboardButton_Color = "default"
	Messages_KeyboardButton_Color_Positive Messages_KeyboardButton_Color = "positive"
	Messages_KeyboardButton_Color_Negative Messages_KeyboardButton_Color = "negative"
	Messages_KeyboardButton_Color_Primary  Messages_KeyboardButton_Color = "primary"
)

type Messages_KeyboardButton struct {
	Action Messages_KeyboardButtonPropertyAction `json:"action"`
	// Button color
	Color *Messages_KeyboardButton_Color `json:"color,omitempty"`
}

type Messages_KeyboardButtonActionCallback_Type string

const (
	Messages_KeyboardButtonActionCallback_Type_Callback Messages_KeyboardButtonActionCallback_Type = "callback"
)

// Messages_KeyboardButtonActionCallback Description of the action, that should be performed on button click
type Messages_KeyboardButtonActionCallback struct {
	// Label for button
	Label string `json:"label"`
	// Additional data sent along with message for developer convenience
	Payload *string                                    `json:"payload,omitempty"`
	Type    Messages_KeyboardButtonActionCallback_Type `json:"type"`
}

type Messages_KeyboardButtonActionLocation_Type string

const (
	Messages_KeyboardButtonActionLocation_Type_Location Messages_KeyboardButtonActionLocation_Type = "location"
)

// Messages_KeyboardButtonActionLocation Description of the action, that should be performed on button click
type Messages_KeyboardButtonActionLocation struct {
	// Additional data sent along with message for developer convenience
	Payload *string                                    `json:"payload,omitempty"`
	Type    Messages_KeyboardButtonActionLocation_Type `json:"type"`
}

type Messages_KeyboardButtonActionOpenApp_Type string

const (
	Messages_KeyboardButtonActionOpenApp_Type_OpenApp Messages_KeyboardButtonActionOpenApp_Type = "open_app"
)

// Messages_KeyboardButtonActionOpenApp Description of the action, that should be performed on button click
type Messages_KeyboardButtonActionOpenApp struct {
	// Fragment value in app link like vk.com/app{app_id}_-654321#hash
	AppId int `json:"app_id"`
	// Fragment value in app link like vk.com/app123456_-654321#{hash}
	Hash *string `json:"hash,omitempty"`
	// Label for button
	Label string `json:"label"`
	// Fragment value in app link like vk.com/app123456_{owner_id}#hash
	//  Format: int64
	OwnerId int `json:"owner_id"`
	// Additional data sent along with message for developer convenience
	Payload *string                                   `json:"payload,omitempty"`
	Type    Messages_KeyboardButtonActionOpenApp_Type `json:"type"`
}

type Messages_KeyboardButtonActionOpenLink_Type string

const (
	Messages_KeyboardButtonActionOpenLink_Type_OpenLink Messages_KeyboardButtonActionOpenLink_Type = "open_link"
)

// Messages_KeyboardButtonActionOpenLink Description of the action, that should be performed on button click
type Messages_KeyboardButtonActionOpenLink struct {
	// Label for button
	Label string `json:"label"`
	// link for button
	Link string `json:"link"`
	// Additional data sent along with message for developer convenience
	Payload *string                                    `json:"payload,omitempty"`
	Type    Messages_KeyboardButtonActionOpenLink_Type `json:"type"`
}

type Messages_KeyboardButtonActionOpenPhoto_Type string

const (
	Messages_KeyboardButtonActionOpenPhoto_Type_OpenPhoto Messages_KeyboardButtonActionOpenPhoto_Type = "open_photo"
)

// Messages_KeyboardButtonActionOpenPhoto Description of the action, that should be performed on button click
type Messages_KeyboardButtonActionOpenPhoto struct {
	Type Messages_KeyboardButtonActionOpenPhoto_Type `json:"type"`
}

type Messages_KeyboardButtonActionText_Type string

const (
	Messages_KeyboardButtonActionText_Type_Text Messages_KeyboardButtonActionText_Type = "text"
)

// Messages_KeyboardButtonActionText Description of the action, that should be performed on button click
type Messages_KeyboardButtonActionText struct {
	// Label for button
	Label string `json:"label"`
	// Additional data sent along with message for developer convenience
	Payload *string                                `json:"payload,omitempty"`
	Type    Messages_KeyboardButtonActionText_Type `json:"type"`
}

type Messages_KeyboardButtonActionVkpay_Type string

const (
	Messages_KeyboardButtonActionVkpay_Type_Vkpay Messages_KeyboardButtonActionVkpay_Type = "vkpay"
)

// Messages_KeyboardButtonActionVkpay Description of the action, that should be performed on button click
type Messages_KeyboardButtonActionVkpay struct {
	// Fragment value in app link like vk.com/app123456_-654321#{hash}
	Hash string `json:"hash"`
	// Additional data sent along with message for developer convenience
	Payload *string                                 `json:"payload,omitempty"`
	Type    Messages_KeyboardButtonActionVkpay_Type `json:"type"`
}

//easyjson:skip
type Messages_KeyboardButtonPropertyAction struct {
	raw []byte
}

func (o *Messages_KeyboardButtonPropertyAction) MarshalJSON() ([]byte, error) {
	return o.raw, nil
}

func (o *Messages_KeyboardButtonPropertyAction) UnmarshalJSON(body []byte) (err error) {
	o.raw = body
	return nil
}

func (o Messages_KeyboardButtonPropertyAction) Raw() []byte {
	return o.raw
}

type Messages_LastActivity struct {
	// Information whether user is online
	Online Base_BoolInt `json:"online"`
	// Time when user was online in Unixtime
	Time int `json:"time"`
}

type Messages_LongpollMessages struct {
	// Total number
	//  Minimum: 0
	Count *int                `json:"count,omitempty"`
	Items *[]Messages_Message `json:"items,omitempty"`
}

type Messages_LongpollParams struct {
	// Key
	Key string `json:"key"`
	// Persistent timestamp
	Pts *int `json:"pts,omitempty"`
	// Server URL
	Server string `json:"server"`
	// Timestamp
	Ts int `json:"ts"`
}

type Messages_Message struct {
	Action *Messages_MessageAction `json:"action,omitempty"`
	// Only for messages from community. Contains user ID of community admin, who sent this message.
	//  Format: int64
	AdminAuthorId *int                          `json:"admin_author_id,omitempty"`
	Attachments   *[]Messages_MessageAttachment `json:"attachments,omitempty"`
	// Unique auto-incremented number for all messages with this peer
	ConversationMessageId *int `json:"conversation_message_id,omitempty"`
	// Date when the message has been sent in Unixtime
	Date int `json:"date"`
	// Is it an deleted message
	Deleted *Base_BoolInt `json:"deleted,omitempty"`
	// Message author's ID
	//  Format: int64
	FromId int `json:"from_id"`
	// Forwarded messages
	FwdMessages *[]Messages_ForeignMessage `json:"fwd_messages,omitempty"`
	Geo         *Base_Geo                  `json:"geo,omitempty"`
	// Message ID
	Id int `json:"id"`
	// Is it an important message
	Important *bool `json:"important,omitempty"`
	// this message is cropped for bot
	IsCropped *bool `json:"is_cropped,omitempty"`
	IsHidden  *bool `json:"is_hidden,omitempty"`
	// Is silent message, push without sound
	IsSilent *bool              `json:"is_silent,omitempty"`
	Keyboard *Messages_Keyboard `json:"keyboard,omitempty"`
	// Members number
	MembersCount *int `json:"members_count,omitempty"`
	// Information whether the message is outcoming
	Out     Base_BoolInt `json:"out"`
	Payload *string      `json:"payload,omitempty"`
	// Peer ID
	PeerId int `json:"peer_id"`
	// Date when the message has been pinned in Unixtime
	PinnedAt *int `json:"pinned_at,omitempty"`
	// ID used for sending messages. It returned only for outgoing messages
	RandomId     *int                     `json:"random_id,omitempty"`
	Ref          *string                  `json:"ref,omitempty"`
	RefSource    *string                  `json:"ref_source,omitempty"`
	ReplyMessage *Messages_ForeignMessage `json:"reply_message,omitempty"`
	// Message text
	Text string `json:"text"`
	// Date when the message has been updated in Unixtime
	UpdateTime *int `json:"update_time,omitempty"`
	// Was the audio message inside already listened by you
	WasListened *bool `json:"was_listened,omitempty"`
}

type Messages_MessageAction struct {
	// Message ID
	ConversationMessageId *int `json:"conversation_message_id,omitempty"`
	// Email address for chat_invite_user or chat_kick_user actions
	Email *string `json:"email,omitempty"`
	// User or email peer ID
	//  Format: int64
	MemberId *int `json:"member_id,omitempty"`
	// Message body of related message
	Message *string                      `json:"message,omitempty"`
	Photo   *Messages_MessageActionPhoto `json:"photo,omitempty"`
	// New chat title for chat_create and chat_title_update actions
	Text *string                      `json:"text,omitempty"`
	Type Messages_MessageActionStatus `json:"type"`
}

type Messages_MessageActionPhoto struct {
	// URL of the preview image with 100px in width
	//  Format: uri
	Photo100 string `json:"photo_100"`
	// URL of the preview image with 200px in width
	//  Format: uri
	Photo200 string `json:"photo_200"`
	// URL of the preview image with 50px in width
	//  Format: uri
	Photo50 string `json:"photo_50"`
}

// Messages_MessageActionStatus Action status
type Messages_MessageActionStatus string

const (
	Messages_MessageActionStatus_ChatPhotoUpdate                Messages_MessageActionStatus = "chat_photo_update"
	Messages_MessageActionStatus_ChatPhotoRemove                Messages_MessageActionStatus = "chat_photo_remove"
	Messages_MessageActionStatus_ChatCreate                     Messages_MessageActionStatus = "chat_create"
	Messages_MessageActionStatus_ChatTitleUpdate                Messages_MessageActionStatus = "chat_title_update"
	Messages_MessageActionStatus_ChatInviteUser                 Messages_MessageActionStatus = "chat_invite_user"
	Messages_MessageActionStatus_ChatKickUser                   Messages_MessageActionStatus = "chat_kick_user"
	Messages_MessageActionStatus_ChatPinMessage                 Messages_MessageActionStatus = "chat_pin_message"
	Messages_MessageActionStatus_ChatUnpinMessage               Messages_MessageActionStatus = "chat_unpin_message"
	Messages_MessageActionStatus_ChatInviteUserByLink           Messages_MessageActionStatus = "chat_invite_user_by_link"
	Messages_MessageActionStatus_ChatInviteUserByMessageRequest Messages_MessageActionStatus = "chat_invite_user_by_message_request"
	Messages_MessageActionStatus_ChatScreenshot                 Messages_MessageActionStatus = "chat_screenshot"
)

type Messages_MessageAttachment struct {
	Audio             *Audio_Audio                   `json:"audio,omitempty"`
	AudioMessage      *Messages_AudioMessage         `json:"audio_message,omitempty"`
	Call              *Calls_Call                    `json:"call,omitempty"`
	Doc               *Docs_Doc                      `json:"doc,omitempty"`
	Gift              *Gifts_Layout                  `json:"gift,omitempty"`
	Graffiti          *Messages_Graffiti             `json:"graffiti,omitempty"`
	Market            *Market_MarketItem             `json:"market,omitempty"`
	MarketMarketAlbum *Market_MarketAlbum            `json:"market_market_album,omitempty"`
	Photo             *Photos_Photo                  `json:"photo,omitempty"`
	Poll              *Polls_Poll                    `json:"poll,omitempty"`
	Sticker           *Base_Sticker                  `json:"sticker,omitempty"`
	Story             *Stories_Story                 `json:"story,omitempty"`
	Type              Messages_MessageAttachmentType `json:"type"`
	Video             *Video_VideoFull               `json:"video,omitempty"`
	WallReply         *Wall_WallComment              `json:"wall_reply,omitempty"`
}

// Messages_MessageAttachmentType Attachment type
type Messages_MessageAttachmentType string

const (
	Messages_MessageAttachmentType_Photo        Messages_MessageAttachmentType = "photo"
	Messages_MessageAttachmentType_Audio        Messages_MessageAttachmentType = "audio"
	Messages_MessageAttachmentType_Video        Messages_MessageAttachmentType = "video"
	Messages_MessageAttachmentType_Doc          Messages_MessageAttachmentType = "doc"
	Messages_MessageAttachmentType_Link         Messages_MessageAttachmentType = "link"
	Messages_MessageAttachmentType_Market       Messages_MessageAttachmentType = "market"
	Messages_MessageAttachmentType_MarketAlbum  Messages_MessageAttachmentType = "market_album"
	Messages_MessageAttachmentType_Gift         Messages_MessageAttachmentType = "gift"
	Messages_MessageAttachmentType_Sticker      Messages_MessageAttachmentType = "sticker"
	Messages_MessageAttachmentType_Wall         Messages_MessageAttachmentType = "wall"
	Messages_MessageAttachmentType_WallReply    Messages_MessageAttachmentType = "wall_reply"
	Messages_MessageAttachmentType_Article      Messages_MessageAttachmentType = "article"
	Messages_MessageAttachmentType_Poll         Messages_MessageAttachmentType = "poll"
	Messages_MessageAttachmentType_Call         Messages_MessageAttachmentType = "call"
	Messages_MessageAttachmentType_Graffiti     Messages_MessageAttachmentType = "graffiti"
	Messages_MessageAttachmentType_AudioMessage Messages_MessageAttachmentType = "audio_message"
)

type Messages_MessageRequestData struct {
	// Message request sender id
	//  Format: int64
	InviterId *int `json:"inviter_id,omitempty"`
	// Message request date
	RequestDate *int `json:"request_date,omitempty"`
	// Status of message request
	Status *string `json:"status,omitempty"`
}

type Messages_MessagesArray struct {
	//  Minimum: 0
	Count *int                `json:"count,omitempty"`
	Items *[]Messages_Message `json:"items,omitempty"`
}

type Messages_OutReadBy struct {
	//  Minimum: 0
	Count *int `json:"count,omitempty"`
	//  Format: int64
	MemberIds *[]int `json:"member_ids,omitempty"`
}

type Messages_PinnedMessage struct {
	Attachments *[]Messages_MessageAttachment `json:"attachments,omitempty"`
	// Unique auto-incremented number for all messages with this peer
	ConversationMessageId *int `json:"conversation_message_id,omitempty"`
	// Date when the message has been sent in Unixtime
	Date int `json:"date"`
	// Message author's ID
	//  Format: int64
	FromId int `json:"from_id"`
	// Forwarded messages
	FwdMessages *[]Messages_ForeignMessage `json:"fwd_messages,omitempty"`
	Geo         *Base_Geo                  `json:"geo,omitempty"`
	// Message ID
	Id       int                `json:"id"`
	Keyboard *Messages_Keyboard `json:"keyboard,omitempty"`
	// Peer ID
	PeerId       int                      `json:"peer_id"`
	ReplyMessage *Messages_ForeignMessage `json:"reply_message,omitempty"`
	// Message text
	Text string `json:"text"`
}

type Messages_PushSettings struct {
	// Information whether push notifications are disabled forever
	DisabledForever bool `json:"disabled_forever"`
	// Information whether the mass mentions (like '@all', '@online') are disabled
	DisabledMassMentions *bool `json:"disabled_mass_mentions,omitempty"`
	// Information whether the mentions are disabled
	DisabledMentions *bool `json:"disabled_mentions,omitempty"`
	// Time until what notifications are disabled
	DisabledUntil *int `json:"disabled_until,omitempty"`
	// Information whether the sound is on
	NoSound bool `json:"no_sound"`
}

type Messages_SendUserIdsResponseItem struct {
	//  Minimum: 0
	ConversationMessageId *int               `json:"conversation_message_id,omitempty"`
	Error                 *Base_MessageError `json:"error,omitempty"`
	//  Minimum: 0
	MessageId int `json:"message_id"`
	PeerId    int `json:"peer_id"`
}

// Messages_TemplateActionTypeNames Template action type names
type Messages_TemplateActionTypeNames string

const (
	Messages_TemplateActionTypeNames_Text              Messages_TemplateActionTypeNames = "text"
	Messages_TemplateActionTypeNames_Start             Messages_TemplateActionTypeNames = "start"
	Messages_TemplateActionTypeNames_Location          Messages_TemplateActionTypeNames = "location"
	Messages_TemplateActionTypeNames_Vkpay             Messages_TemplateActionTypeNames = "vkpay"
	Messages_TemplateActionTypeNames_OpenApp           Messages_TemplateActionTypeNames = "open_app"
	Messages_TemplateActionTypeNames_OpenPhoto         Messages_TemplateActionTypeNames = "open_photo"
	Messages_TemplateActionTypeNames_OpenLink          Messages_TemplateActionTypeNames = "open_link"
	Messages_TemplateActionTypeNames_Callback          Messages_TemplateActionTypeNames = "callback"
	Messages_TemplateActionTypeNames_IntentSubscribe   Messages_TemplateActionTypeNames = "intent_subscribe"
	Messages_TemplateActionTypeNames_IntentUnsubscribe Messages_TemplateActionTypeNames = "intent_unsubscribe"
)

type Messages_UserXtrInvitedBy struct {
	Users_UserXtrType
	// ID of the inviter
	//  Format: int64
	InvitedBy *int `json:"invited_by,omitempty"`
}

type Newsfeed_CommentsFilters string

const (
	Newsfeed_CommentsFilters_Post  Newsfeed_CommentsFilters = "post"
	Newsfeed_CommentsFilters_Photo Newsfeed_CommentsFilters = "photo"
	Newsfeed_CommentsFilters_Video Newsfeed_CommentsFilters = "video"
	Newsfeed_CommentsFilters_Topic Newsfeed_CommentsFilters = "topic"
	Newsfeed_CommentsFilters_Note  Newsfeed_CommentsFilters = "note"
)

type Newsfeed_IgnoreItemType string

const (
	Newsfeed_IgnoreItemType_PostOnTheWall Newsfeed_IgnoreItemType = "wall"
	Newsfeed_IgnoreItemType_TagOnAPhoto   Newsfeed_IgnoreItemType = "tag"
	Newsfeed_IgnoreItemType_ProfilePhoto  Newsfeed_IgnoreItemType = "profilephoto"
	Newsfeed_IgnoreItemType_Video         Newsfeed_IgnoreItemType = "video"
	Newsfeed_IgnoreItemType_Photo         Newsfeed_IgnoreItemType = "photo"
	Newsfeed_IgnoreItemType_Audio         Newsfeed_IgnoreItemType = "audio"
)

type Newsfeed_ItemAudio struct {
	Newsfeed_ItemBase
	Audio *Newsfeed_ItemAudioAudio `json:"audio,omitempty"`
	// Post ID
	PostId *int `json:"post_id,omitempty"`
}

type Newsfeed_ItemAudioAudio struct {
	// Audios number
	//  Minimum: 0
	Count *int           `json:"count,omitempty"`
	Items *[]Audio_Audio `json:"items,omitempty"`
}

type Newsfeed_ItemBase struct {
	// Date when item has been added in Unixtime
	Date int `json:"date"`
	// Item source ID
	//  Format: int64
	SourceId int                       `json:"source_id"`
	Type     Newsfeed_NewsfeedItemType `json:"type"`
}

type Newsfeed_ItemDigest_Template string

const (
	Newsfeed_ItemDigest_Template_List   Newsfeed_ItemDigest_Template = "list"
	Newsfeed_ItemDigest_Template_Grid   Newsfeed_ItemDigest_Template = "grid"
	Newsfeed_ItemDigest_Template_Single Newsfeed_ItemDigest_Template = "single"
)

type Newsfeed_ItemDigest struct {
	Newsfeed_ItemBase
	// id of feed in digest
	FeedId      *string                    `json:"feed_id,omitempty"`
	Footer      *Newsfeed_ItemDigestFooter `json:"footer,omitempty"`
	Header      *Newsfeed_ItemDigestHeader `json:"header,omitempty"`
	Items       *[]Newsfeed_ItemDigestItem `json:"items,omitempty"`
	MainPostIds *[]string                  `json:"main_post_ids,omitempty"`
	// type of digest
	Template  *Newsfeed_ItemDigest_Template `json:"template,omitempty"`
	TrackCode *string                       `json:"track_code,omitempty"`
}

type Newsfeed_ItemDigestButton_Style string

const (
	Newsfeed_ItemDigestButton_Style_Primary Newsfeed_ItemDigestButton_Style = "primary"
)

type Newsfeed_ItemDigestButton struct {
	Style *Newsfeed_ItemDigestButton_Style `json:"style,omitempty"`
	Title string                           `json:"title"`
}

type Newsfeed_ItemDigestFooter_Style string

const (
	Newsfeed_ItemDigestFooter_Style_Text   Newsfeed_ItemDigestFooter_Style = "text"
	Newsfeed_ItemDigestFooter_Style_Button Newsfeed_ItemDigestFooter_Style = "button"
)

type Newsfeed_ItemDigestFooter struct {
	Button *Newsfeed_ItemDigestButton      `json:"button,omitempty"`
	Style  Newsfeed_ItemDigestFooter_Style `json:"style"`
	// text for invite to enable smart feed
	Text string `json:"text"`
}

type Newsfeed_ItemDigestFullItem_Style string

const (
	Newsfeed_ItemDigestFullItem_Style_Default   Newsfeed_ItemDigestFullItem_Style = "default"
	Newsfeed_ItemDigestFullItem_Style_Inversed  Newsfeed_ItemDigestFullItem_Style = "inversed"
	Newsfeed_ItemDigestFullItem_Style_Spotlight Newsfeed_ItemDigestFullItem_Style = "spotlight"
)

type Newsfeed_ItemDigestFullItem struct {
	Attachment      *Wall_WallpostAttachment           `json:"attachment,omitempty"`
	AttachmentIndex *int                               `json:"attachment_index,omitempty"`
	Post            Wall_Wallpost                      `json:"post"`
	SourceName      *string                            `json:"source_name,omitempty"`
	Style           *Newsfeed_ItemDigestFullItem_Style `json:"style,omitempty"`
	Text            *string                            `json:"text,omitempty"`
}

type Newsfeed_ItemDigestHeader_Style string

const (
	Newsfeed_ItemDigestHeader_Style_Singleline Newsfeed_ItemDigestHeader_Style = "singleline"
	Newsfeed_ItemDigestHeader_Style_Multiline  Newsfeed_ItemDigestHeader_Style = "multiline"
)

type Newsfeed_ItemDigestHeader struct {
	Button *Newsfeed_ItemDigestButton      `json:"button,omitempty"`
	Style  Newsfeed_ItemDigestHeader_Style `json:"style"`
	// Subtitle of the header, when title have two strings
	Subtitle *string `json:"subtitle,omitempty"`
	// Title of the header
	Title string `json:"title"`
}

type Newsfeed_ItemDigestItem Wall_Wallpost

type Newsfeed_ItemFriend struct {
	Newsfeed_ItemBase
	Friends *Newsfeed_ItemFriendFriends `json:"friends,omitempty"`
}

type Newsfeed_ItemFriendFriends struct {
	// Number of friends has been added
	//  Minimum: 0
	Count *int           `json:"count,omitempty"`
	Items *[]Base_UserId `json:"items,omitempty"`
}

type Newsfeed_ItemHolidayRecommendationsBlockHeader struct {
	Action *Base_LinkButtonAction `json:"action,omitempty"`
	Image  *[]Base_Image          `json:"image,omitempty"`
	// Subtitle of the header
	Subtitle *string `json:"subtitle,omitempty"`
	// Title of the header
	Title *string `json:"title,omitempty"`
}

type Newsfeed_ItemPhoto struct {
	Wall_CarouselBase
	Newsfeed_ItemBase
	Photos *Newsfeed_ItemPhotoPhotos `json:"photos,omitempty"`
	// Post ID
	PostId *int `json:"post_id,omitempty"`
}

type Newsfeed_ItemPhotoPhotos struct {
	// Photos number
	//  Minimum: 0
	Count *int                      `json:"count,omitempty"`
	Items *[]Newsfeed_NewsfeedPhoto `json:"items,omitempty"`
}

type Newsfeed_ItemPhotoTag struct {
	Wall_CarouselBase
	Newsfeed_ItemBase
	PhotoTags *Newsfeed_ItemPhotoTagPhotoTags `json:"photo_tags,omitempty"`
	// Post ID
	PostId *int `json:"post_id,omitempty"`
}

type Newsfeed_ItemPhotoTagPhotoTags struct {
	// Tags number
	//  Minimum: 0
	Count *int                      `json:"count,omitempty"`
	Items *[]Newsfeed_NewsfeedPhoto `json:"items,omitempty"`
}

type Newsfeed_ItemPromoButton struct {
	Newsfeed_ItemBase
	Action    *Newsfeed_ItemPromoButtonAction  `json:"action,omitempty"`
	Images    *[]Newsfeed_ItemPromoButtonImage `json:"images,omitempty"`
	Text      *string                          `json:"text,omitempty"`
	Title     *string                          `json:"title,omitempty"`
	TrackCode *string                          `json:"track_code,omitempty"`
}

type Newsfeed_ItemPromoButtonAction struct {
	Target *string `json:"target,omitempty"`
	Type   *string `json:"type,omitempty"`
	Url    *string `json:"url,omitempty"`
}

type Newsfeed_ItemPromoButtonImage struct {
	Height *int    `json:"height,omitempty"`
	Url    *string `json:"url,omitempty"`
	Width  *int    `json:"width,omitempty"`
}

type Newsfeed_ItemTopic struct {
	Newsfeed_ItemBase
	Comments *Base_CommentsInfo `json:"comments,omitempty"`
	Likes    *Base_LikesInfo    `json:"likes,omitempty"`
	// Topic post ID
	PostId int `json:"post_id"`
	// Post text
	Text string `json:"text"`
}

type Newsfeed_ItemVideo struct {
	Wall_CarouselBase
	Newsfeed_ItemBase
	Video *Newsfeed_ItemVideoVideo `json:"video,omitempty"`
}

type Newsfeed_ItemVideoVideo struct {
	// Tags number
	//  Minimum: 0
	Count *int           `json:"count,omitempty"`
	Items *[]Video_Video `json:"items,omitempty"`
}

//easyjson:skip
type Newsfeed_ItemWallpost struct {
	Wall_CarouselBase
	Newsfeed_ItemBase
	Wall_WallpostFull
	Feedback *Newsfeed_ItemWallpostFeedback `json:"feedback,omitempty"`
}

type Newsfeed_ItemWallpostFeedback struct {
	Answers   *[]Newsfeed_ItemWallpostFeedbackAnswer `json:"answers,omitempty"`
	Gratitude *string                                `json:"gratitude,omitempty"`
	Question  string                                 `json:"question"`
	//  Minimum: 2
	//  Maximum: 5
	StarsCount *int                              `json:"stars_count,omitempty"`
	Type       Newsfeed_ItemWallpostFeedbackType `json:"type"`
}

type Newsfeed_ItemWallpostFeedbackAnswer struct {
	Id    string `json:"id"`
	Title string `json:"title"`
}

type Newsfeed_ItemWallpostFeedbackType string

const (
	Newsfeed_ItemWallpostFeedbackType_Buttons Newsfeed_ItemWallpostFeedbackType = "buttons"
	Newsfeed_ItemWallpostFeedbackType_Stars   Newsfeed_ItemWallpostFeedbackType = "stars"
)

type Newsfeed_List struct {
	// List ID
	Id int `json:"id"`
	// List title
	Title string `json:"title"`
}

type Newsfeed_ListFull struct {
	Newsfeed_List
	// Information whether reposts hiding is enabled
	NoReposts *Base_BoolInt `json:"no_reposts,omitempty"`
	//  Format: int64
	SourceIds *[]int `json:"source_ids,omitempty"`
}

//easyjson:skip
type Newsfeed_NewsfeedItem struct {
	raw []byte
}

func (o *Newsfeed_NewsfeedItem) MarshalJSON() ([]byte, error) {
	return o.raw, nil
}

func (o *Newsfeed_NewsfeedItem) UnmarshalJSON(body []byte) (err error) {
	o.raw = body
	return nil
}

func (o Newsfeed_NewsfeedItem) Raw() []byte {
	return o.raw
}

// Newsfeed_NewsfeedItemType Item type
type Newsfeed_NewsfeedItemType string

const (
	Newsfeed_NewsfeedItemType_Post          Newsfeed_NewsfeedItemType = "post"
	Newsfeed_NewsfeedItemType_Photo         Newsfeed_NewsfeedItemType = "photo"
	Newsfeed_NewsfeedItemType_PhotoTag      Newsfeed_NewsfeedItemType = "photo_tag"
	Newsfeed_NewsfeedItemType_WallPhoto     Newsfeed_NewsfeedItemType = "wall_photo"
	Newsfeed_NewsfeedItemType_Friend        Newsfeed_NewsfeedItemType = "friend"
	Newsfeed_NewsfeedItemType_Audio         Newsfeed_NewsfeedItemType = "audio"
	Newsfeed_NewsfeedItemType_Video         Newsfeed_NewsfeedItemType = "video"
	Newsfeed_NewsfeedItemType_Topic         Newsfeed_NewsfeedItemType = "topic"
	Newsfeed_NewsfeedItemType_Digest        Newsfeed_NewsfeedItemType = "digest"
	Newsfeed_NewsfeedItemType_Stories       Newsfeed_NewsfeedItemType = "stories"
	Newsfeed_NewsfeedItemType_Note          Newsfeed_NewsfeedItemType = "note"
	Newsfeed_NewsfeedItemType_AudioPlaylist Newsfeed_NewsfeedItemType = "audio_playlist"
	Newsfeed_NewsfeedItemType_Clip          Newsfeed_NewsfeedItemType = "clip"
)

type Newsfeed_NewsfeedPhoto struct {
	Photos_Photo
	// Information whether current user can repost the photo
	CanRepost *Base_BoolInt     `json:"can_repost,omitempty"`
	Comments  *Base_ObjectCount `json:"comments,omitempty"`
	Likes     *Base_Likes       `json:"likes,omitempty"`
}

type Notes_Note struct {
	// Information whether current user can comment the note
	CanComment *Base_BoolInt `json:"can_comment,omitempty"`
	// Comments number
	//  Minimum: 0
	Comments int `json:"comments"`
	// Date when the note has been created in Unixtime
	//  Minimum: 0
	Date int `json:"date"`
	// Note ID
	//  Minimum: 1
	Id int `json:"id"`
	// Note owner's ID
	//  Format: int64
	//  Minimum: 1
	OwnerId        int       `json:"owner_id"`
	PrivacyComment *[]string `json:"privacy_comment,omitempty"`
	PrivacyView    *[]string `json:"privacy_view,omitempty"`
	//  Minimum: 0
	ReadComments *int `json:"read_comments,omitempty"`
	// Note text
	Text *string `json:"text,omitempty"`
	// Note text in wiki format
	TextWiki *string `json:"text_wiki,omitempty"`
	// Note title
	Title string `json:"title"`
	// URL of the page with note preview
	//  Format: uri
	ViewUrl string `json:"view_url"`
}

type Notes_NoteComment struct {
	// Date when the comment has beed added in Unixtime
	Date int `json:"date"`
	// Comment ID
	Id int `json:"id"`
	// Comment text
	Message string `json:"message"`
	// Note ID
	Nid int `json:"nid"`
	// Note ID
	Oid int `json:"oid"`
	// ID of replied comment
	ReplyTo *int `json:"reply_to,omitempty"`
	// Comment author's ID
	Uid int `json:"uid"`
}

type Notifications_Feedback struct {
	Attachments *[]Wall_WallpostAttachment `json:"attachments,omitempty"`
	// Reply author's ID
	FromId *int      `json:"from_id,omitempty"`
	Geo    *Base_Geo `json:"geo,omitempty"`
	// Item ID
	Id    *int            `json:"id,omitempty"`
	Likes *Base_LikesInfo `json:"likes,omitempty"`
	// Reply text
	Text *string `json:"text,omitempty"`
	// Wall owner's ID
	ToId *int `json:"to_id,omitempty"`
}

type Notifications_Notification struct {
	// Date when the event has been occurred
	Date     *int                        `json:"date,omitempty"`
	Feedback *Notifications_Feedback     `json:"feedback,omitempty"`
	Parent   *Notifications_Notification `json:"parent,omitempty"`
	Reply    *Notifications_Reply        `json:"reply,omitempty"`
	// Notification type
	Type *string `json:"type,omitempty"`
}

type Notifications_NotificationItem Notifications_Notification

//easyjson:skip
type Notifications_NotificationParent struct {
	Wall_WallpostToId
	Photos_Photo
	Board_Topic
	Video_Video
	Notifications_NotificationsComment
}

type Notifications_NotificationsComment struct {
	// Date when the comment has been added in Unixtime
	//  Minimum: 0
	Date *int `json:"date,omitempty"`
	// Comment ID
	//  Minimum: 1
	Id *int `json:"id,omitempty"`
	// Author ID
	//  Format: int64
	OwnerId *int           `json:"owner_id,omitempty"`
	Photo   *Photos_Photo  `json:"photo,omitempty"`
	Post    *Wall_Wallpost `json:"post,omitempty"`
	// Comment text
	Text  *string      `json:"text,omitempty"`
	Topic *Board_Topic `json:"topic,omitempty"`
	Video *Video_Video `json:"video,omitempty"`
}

type Notifications_Reply struct {
	// Date when the reply has been created in Unixtime
	Date *int `json:"date,omitempty"`
	// Reply ID
	Id *int `json:"id,omitempty"`
	// Reply text
	Text *int `json:"text,omitempty"`
}

type Notifications_SendMessageError_Code int

const (
	Notifications_SendMessageError_Code_NotificationsDisabled Notifications_SendMessageError_Code = 1
	Notifications_SendMessageError_Code_FloodControlPerHour   Notifications_SendMessageError_Code = 2
	Notifications_SendMessageError_Code_FloodControlPerDay    Notifications_SendMessageError_Code = 3
	Notifications_SendMessageError_Code_AppIsNotInstalled     Notifications_SendMessageError_Code = 4
)

type Notifications_SendMessageError struct {
	// Error code
	Code *Notifications_SendMessageError_Code `json:"code,omitempty"`
	// Error description
	Description *string `json:"description,omitempty"`
}

type Notifications_SendMessageItem struct {
	Error *Notifications_SendMessageError `json:"error,omitempty"`
	// Notification status
	Status *bool `json:"status,omitempty"`
	// User ID
	//  Format: int64
	UserId *int `json:"user_id,omitempty"`
}

type Oauth_Error struct {
	// Error type
	Error string `json:"error"`
	// Error description
	ErrorDescription string `json:"error_description"`
	// URI for validation
	RedirectUri *string `json:"redirect_uri,omitempty"`
}

type Orders_Amount struct {
	Amounts *[]Orders_AmountItem `json:"amounts,omitempty"`
	// Currency name
	Currency *string `json:"currency,omitempty"`
}

type Orders_AmountItem struct {
	// Votes amount in user's currency
	Amount *float64 `json:"amount,omitempty"`
	// Amount description
	Description *string `json:"description,omitempty"`
	// Votes number
	Votes *string `json:"votes,omitempty"`
}

type Orders_Order_Status string

const (
	Orders_Order_Status_Created    Orders_Order_Status = "created"
	Orders_Order_Status_Charged    Orders_Order_Status = "charged"
	Orders_Order_Status_Refunded   Orders_Order_Status = "refunded"
	Orders_Order_Status_Chargeable Orders_Order_Status = "chargeable"
	Orders_Order_Status_Cancelled  Orders_Order_Status = "cancelled"
	Orders_Order_Status_Declined   Orders_Order_Status = "declined"
)

type Orders_Order struct {
	// Amount
	Amount string `json:"amount"`
	// App order ID
	AppOrderId string `json:"app_order_id"`
	// Cancel transaction ID
	CancelTransactionId *string `json:"cancel_transaction_id,omitempty"`
	// Date of creation in Unixtime
	Date string `json:"date"`
	// Order ID
	Id string `json:"id"`
	// Order item
	Item string `json:"item"`
	// Receiver ID
	ReceiverId string `json:"receiver_id"`
	// Order status
	Status Orders_Order_Status `json:"status"`
	// Transaction ID
	TransactionId *string `json:"transaction_id,omitempty"`
	// User ID
	UserId string `json:"user_id"`
}

type Orders_Subscription struct {
	// Subscription's application id
	AppId *int `json:"app_id,omitempty"`
	// Subscription's application name
	ApplicationName *string `json:"application_name,omitempty"`
	// Cancel reason
	CancelReason *string `json:"cancel_reason,omitempty"`
	// Date of creation in Unixtime
	CreateTime int `json:"create_time"`
	// Subscription expiration time in Unixtime
	ExpireTime *int `json:"expire_time,omitempty"`
	// Subscription ID
	Id int `json:"id"`
	// Subscription order item
	ItemId string `json:"item_id"`
	// Date of next bill in Unixtime
	NextBillTime *int `json:"next_bill_time,omitempty"`
	// Pending cancel state
	PendingCancel *bool `json:"pending_cancel,omitempty"`
	// Subscription period
	Period int `json:"period"`
	// Date of last period start in Unixtime
	PeriodStartTime int `json:"period_start_time"`
	// Item photo image url
	PhotoUrl *string `json:"photo_url,omitempty"`
	// Subscription price
	Price int `json:"price"`
	// Subscription status
	Status string `json:"status"`
	// Is test subscription
	TestMode *bool `json:"test_mode,omitempty"`
	// Subscription name
	Title *string `json:"title,omitempty"`
	// Date of trial expire in Unixtime
	TrialExpireTime *int `json:"trial_expire_time,omitempty"`
	// Date of last change in Unixtime
	UpdateTime int `json:"update_time"`
}

type Owner_State_State int

const (
	Owner_State_State_Banned      Owner_State_State = 1
	Owner_State_State_Adult       Owner_State_State = 2
	Owner_State_State_Hidden      Owner_State_State = 3
	Owner_State_State_Deleted     Owner_State_State = 4
	Owner_State_State_Blacklisted Owner_State_State = 5
)

type Owner_State struct {
	// wiki text to describe user state
	Description *string            `json:"description,omitempty"`
	State       *Owner_State_State `json:"state,omitempty"`
}

type Pages_PrivacySettings int

const (
	Pages_PrivacySettings_CommunityManagersOnly Pages_PrivacySettings = 0
	Pages_PrivacySettings_CommunityMembersOnly  Pages_PrivacySettings = 1
	Pages_PrivacySettings_Everyone              Pages_PrivacySettings = 2
)

type Pages_Wikipage struct {
	// Page creator ID
	CreatorId *int `json:"creator_id,omitempty"`
	// Page creator name
	CreatorName *string `json:"creator_name,omitempty"`
	// Last editor ID
	EditorId *int `json:"editor_id,omitempty"`
	// Last editor name
	EditorName *string `json:"editor_name,omitempty"`
	// Community ID
	//  Format: int64
	//  Minimum: 1
	GroupId int `json:"group_id"`
	// Page ID
	//  Minimum: 1
	Id int `json:"id"`
	// Page title
	Title string `json:"title"`
	// Views number
	Views int `json:"views"`
	// Edit settings of the page
	WhoCanEdit Pages_PrivacySettings `json:"who_can_edit"`
	// View settings of the page
	WhoCanView Pages_PrivacySettings `json:"who_can_view"`
}

type Pages_WikipageFull struct {
	// Date when the page has been created in Unixtime
	Created int `json:"created"`
	// Page creator ID
	CreatorId *int `json:"creator_id,omitempty"`
	// Information whether current user can edit the page
	CurrentUserCanEdit *Base_BoolInt `json:"current_user_can_edit,omitempty"`
	// Information whether current user can edit the page access settings
	CurrentUserCanEditAccess *Base_BoolInt `json:"current_user_can_edit_access,omitempty"`
	// Date when the page has been edited in Unixtime
	Edited int `json:"edited"`
	// Last editor ID
	EditorId *int `json:"editor_id,omitempty"`
	// Community ID
	//  Format: int64
	//  Minimum: 1
	GroupId int `json:"group_id"`
	// Page content, HTML
	Html *string `json:"html,omitempty"`
	// Page ID
	//  Minimum: 1
	Id int `json:"id"`
	// Owner ID
	//  Format: int64
	OwnerId *int `json:"owner_id,omitempty"`
	// Parent
	Parent *string `json:"parent,omitempty"`
	// Parent2
	Parent2 *string `json:"parent2,omitempty"`
	// Page content, wiki
	Source *string `json:"source,omitempty"`
	// Page title
	Title string `json:"title"`
	// URL
	//  Format: uri
	Url *string `json:"url,omitempty"`
	// URL of the page preview
	//  Format: uri
	ViewUrl string `json:"view_url"`
	// Views number
	Views int `json:"views"`
	// Edit settings of the page
	WhoCanEdit Pages_PrivacySettings `json:"who_can_edit"`
	// View settings of the page
	WhoCanView Pages_PrivacySettings `json:"who_can_view"`
}

type Pages_WikipageHistory struct {
	// Date when the page has been edited in Unixtime
	//  Minimum: 0
	Date int `json:"date"`
	// Last editor ID
	EditorId int `json:"editor_id"`
	// Last editor name
	EditorName string `json:"editor_name"`
	// Version ID
	//  Minimum: 0
	Id int `json:"id"`
	// Page size in bytes
	//  Minimum: 0
	Length int `json:"length"`
}

type Photos_Image struct {
	// Height of the photo in px.
	Height *int              `json:"height,omitempty"`
	Type   *Photos_ImageType `json:"type,omitempty"`
	// Photo URL.
	//  Format: uri
	Url *string `json:"url,omitempty"`
	// Width of the photo in px.
	Width *int `json:"width,omitempty"`
}

// Photos_ImageType Photo's type.
type Photos_ImageType string

const (
	Photos_ImageType_S Photos_ImageType = "s"
	Photos_ImageType_M Photos_ImageType = "m"
	Photos_ImageType_X Photos_ImageType = "x"
	Photos_ImageType_L Photos_ImageType = "l"
	Photos_ImageType_O Photos_ImageType = "o"
	Photos_ImageType_P Photos_ImageType = "p"
	Photos_ImageType_Q Photos_ImageType = "q"
	Photos_ImageType_R Photos_ImageType = "r"
	Photos_ImageType_Y Photos_ImageType = "y"
	Photos_ImageType_Z Photos_ImageType = "z"
	Photos_ImageType_W Photos_ImageType = "w"
)

type Photos_Photo struct {
	// Access key for the photo
	AccessKey *string `json:"access_key,omitempty"`
	// Album ID
	AlbumId int `json:"album_id"`
	// Information whether current user can comment the photo
	CanComment *Base_BoolInt     `json:"can_comment,omitempty"`
	Comments   *Base_ObjectCount `json:"comments,omitempty"`
	// Date when uploaded
	//  Minimum: 0
	Date int `json:"date"`
	// Whether photo has attached tag links
	HasTags bool `json:"has_tags"`
	// Original photo height
	//  Minimum: 0
	Height *int `json:"height,omitempty"`
	// Photo ID
	//  Minimum: 0
	Id     int             `json:"id"`
	Images *[]Photos_Image `json:"images,omitempty"`
	// Latitude
	Lat   *float64    `json:"lat,omitempty"`
	Likes *Base_Likes `json:"likes,omitempty"`
	// Longitude
	Long *float64 `json:"long,omitempty"`
	// Photo owner's ID
	//  Format: int64
	OwnerId int `json:"owner_id"`
	// URL of image with 2560 px width
	//  Format: uri
	Photo256 *string `json:"photo_256,omitempty"`
	Place    *string `json:"place,omitempty"`
	// Post ID
	//  Minimum: 1
	PostId  *int                 `json:"post_id,omitempty"`
	Reposts *Base_RepostsInfo    `json:"reposts,omitempty"`
	Sizes   *[]Photos_PhotoSizes `json:"sizes,omitempty"`
	Tags    *Base_ObjectCount    `json:"tags,omitempty"`
	// Photo caption
	Text *string `json:"text,omitempty"`
	// ID of the user who have uploaded the photo
	//  Format: int64
	//  Minimum: 1
	UserId *int `json:"user_id,omitempty"`
	// Original photo width
	//  Minimum: 0
	Width *int `json:"width,omitempty"`
}

type Photos_PhotoAlbum struct {
	// Date when the album has been created in Unixtime
	//  Minimum: 0
	Created int `json:"created"`
	// Photo album description
	Description *string `json:"description,omitempty"`
	// Photo album ID
	Id int `json:"id"`
	// Album owner's ID
	//  Format: int64
	OwnerId int `json:"owner_id"`
	// Photos number
	//  Minimum: 0
	Size  int           `json:"size"`
	Thumb *Photos_Photo `json:"thumb,omitempty"`
	// Photo album title
	Title string `json:"title"`
	// Date when the album has been updated last time in Unixtime
	//  Minimum: 0
	Updated int `json:"updated"`
}

type Photos_PhotoAlbumFull struct {
	// album can delete
	CanDelete *bool `json:"can_delete,omitempty"`
	// Information whether current user can upload photo to the album
	CanUpload *Base_BoolInt `json:"can_upload,omitempty"`
	// Information whether album comments are disabled
	CommentsDisabled *Base_BoolInt `json:"comments_disabled,omitempty"`
	// Date when the album has been created in Unixtime
	//  Minimum: 0
	Created int `json:"created"`
	// Photo album description
	Description *string `json:"description,omitempty"`
	// Photo album ID
	Id int `json:"id"`
	// Album owner's ID
	//  Format: int64
	OwnerId int `json:"owner_id"`
	// Photos number
	//  Minimum: 0
	Size  int                  `json:"size"`
	Sizes *[]Photos_PhotoSizes `json:"sizes,omitempty"`
	// Thumb photo ID
	//  Minimum: 0
	ThumbId *int `json:"thumb_id,omitempty"`
	// Information whether the album thumb is last photo
	ThumbIsLast *Base_BoolInt `json:"thumb_is_last,omitempty"`
	// URL of the thumb image
	//  Format: uri
	ThumbSrc *string `json:"thumb_src,omitempty"`
	// Photo album title
	Title string `json:"title"`
	// Date when the album has been updated last time in Unixtime
	//  Minimum: 0
	Updated int `json:"updated"`
	// Information whether only community administrators can upload photos
	UploadByAdminsOnly *Base_BoolInt `json:"upload_by_admins_only,omitempty"`
}

//easyjson:skip
type Photos_PhotoFalseable struct {
	raw []byte
}

func (o *Photos_PhotoFalseable) MarshalJSON() ([]byte, error) {
	return o.raw, nil
}

func (o *Photos_PhotoFalseable) UnmarshalJSON(body []byte) (err error) {
	o.raw = body
	return nil
}

func (o Photos_PhotoFalseable) Raw() []byte {
	return o.raw
}

type Photos_PhotoFullXtrRealOffset struct {
	// Access key for the photo
	AccessKey *string `json:"access_key,omitempty"`
	// Album ID
	AlbumId    int               `json:"album_id"`
	CanComment *Base_BoolInt     `json:"can_comment,omitempty"`
	Comments   *Base_ObjectCount `json:"comments,omitempty"`
	// Date when uploaded
	//  Minimum: 0
	Date int `json:"date"`
	// Original photo height
	//  Minimum: 0
	Height *int `json:"height,omitempty"`
	// Returns if the photo is hidden above the wall
	Hidden *Base_PropertyExists `json:"hidden,omitempty"`
	// Photo ID
	//  Minimum: 0
	Id int `json:"id"`
	// Latitude
	Lat   *float64    `json:"lat,omitempty"`
	Likes *Base_Likes `json:"likes,omitempty"`
	// Longitude
	Long *float64 `json:"long,omitempty"`
	// Photo owner's ID
	//  Format: int64
	OwnerId int `json:"owner_id"`
	// URL of image with 1280 px width
	//  Format: uri
	Photo1280 *string `json:"photo_1280,omitempty"`
	// URL of image with 130 px width
	//  Format: uri
	Photo130 *string `json:"photo_130,omitempty"`
	// URL of image with 2560 px width
	//  Format: uri
	Photo2560 *string `json:"photo_2560,omitempty"`
	// URL of image with 604 px width
	//  Format: uri
	Photo604 *string `json:"photo_604,omitempty"`
	// URL of image with 75 px width
	//  Format: uri
	Photo75 *string `json:"photo_75,omitempty"`
	// URL of image with 807 px width
	//  Format: uri
	Photo807 *string `json:"photo_807,omitempty"`
	// Post ID
	//  Minimum: 1
	PostId *int `json:"post_id,omitempty"`
	// Real position of the photo
	RealOffset *int                 `json:"real_offset,omitempty"`
	Reposts    *Base_ObjectCount    `json:"reposts,omitempty"`
	Sizes      *[]Photos_PhotoSizes `json:"sizes,omitempty"`
	Tags       *Base_ObjectCount    `json:"tags,omitempty"`
	// Photo caption
	Text *string `json:"text,omitempty"`
	// ID of the user who have uploaded the photo
	//  Format: int64
	//  Minimum: 1
	UserId *int `json:"user_id,omitempty"`
	// Original photo width
	//  Minimum: 0
	Width *int `json:"width,omitempty"`
}

type Photos_PhotoSizes struct {
	// Height in px
	//  Minimum: 0
	Height int `json:"height"`
	// URL of the image
	//  Format: uri
	Src  *string               `json:"src,omitempty"`
	Type Photos_PhotoSizesType `json:"type"`
	// URL of the image
	//  Format: uri
	Url string `json:"url"`
	// Width in px
	//  Minimum: 0
	Width int `json:"width"`
}

// Photos_PhotoSizesType Size type
type Photos_PhotoSizesType string

const (
	Photos_PhotoSizesType_S    Photos_PhotoSizesType = "s"
	Photos_PhotoSizesType_M    Photos_PhotoSizesType = "m"
	Photos_PhotoSizesType_X    Photos_PhotoSizesType = "x"
	Photos_PhotoSizesType_O    Photos_PhotoSizesType = "o"
	Photos_PhotoSizesType_P    Photos_PhotoSizesType = "p"
	Photos_PhotoSizesType_Q    Photos_PhotoSizesType = "q"
	Photos_PhotoSizesType_R    Photos_PhotoSizesType = "r"
	Photos_PhotoSizesType_K    Photos_PhotoSizesType = "k"
	Photos_PhotoSizesType_L    Photos_PhotoSizesType = "l"
	Photos_PhotoSizesType_Y    Photos_PhotoSizesType = "y"
	Photos_PhotoSizesType_Z    Photos_PhotoSizesType = "z"
	Photos_PhotoSizesType_C    Photos_PhotoSizesType = "c"
	Photos_PhotoSizesType_W    Photos_PhotoSizesType = "w"
	Photos_PhotoSizesType_A    Photos_PhotoSizesType = "a"
	Photos_PhotoSizesType_B    Photos_PhotoSizesType = "b"
	Photos_PhotoSizesType_E    Photos_PhotoSizesType = "e"
	Photos_PhotoSizesType_I    Photos_PhotoSizesType = "i"
	Photos_PhotoSizesType_D    Photos_PhotoSizesType = "d"
	Photos_PhotoSizesType_J    Photos_PhotoSizesType = "j"
	Photos_PhotoSizesType_Temp Photos_PhotoSizesType = "temp"
	Photos_PhotoSizesType_H    Photos_PhotoSizesType = "h"
	Photos_PhotoSizesType_G    Photos_PhotoSizesType = "g"
	Photos_PhotoSizesType_N    Photos_PhotoSizesType = "n"
	Photos_PhotoSizesType_F    Photos_PhotoSizesType = "f"
	Photos_PhotoSizesType_Max  Photos_PhotoSizesType = "max"
)

type Photos_PhotoTag struct {
	// Date when tag has been added in Unixtime
	//  Minimum: 0
	Date int `json:"date"`
	// Tagged description.
	Description *string `json:"description,omitempty"`
	// Tag ID
	Id int `json:"id"`
	// ID of the tag creator
	PlacerId int `json:"placer_id"`
	// Tag description
	TaggedName string `json:"tagged_name"`
	// Tagged user ID
	//  Format: int64
	UserId int `json:"user_id"`
	// Information whether the tag is reviewed
	Viewed Base_BoolInt `json:"viewed"`
	// Coordinate X of the left upper corner
	X float64 `json:"x"`
	// Coordinate X of the right lower corner
	X2 float64 `json:"x2"`
	// Coordinate Y of the left upper corner
	Y float64 `json:"y"`
	// Coordinate Y of the right lower corner
	Y2 float64 `json:"y2"`
}

type Photos_PhotoUpload struct {
	// Album ID
	AlbumId int `json:"album_id"`
	// Fallback URL if upload_url returned error
	//  Format: uri
	FallbackUploadUrl *string `json:"fallback_upload_url,omitempty"`
	// Group ID
	//  Format: int64
	GroupId *int `json:"group_id,omitempty"`
	// URL to upload photo
	//  Format: uri
	UploadUrl string `json:"upload_url"`
	// User ID
	//  Format: int64
	UserId int `json:"user_id"`
}

type Photos_PhotoXtrRealOffset struct {
	// Access key for the photo
	AccessKey *string `json:"access_key,omitempty"`
	// Album ID
	AlbumId int `json:"album_id"`
	// Date when uploaded
	//  Minimum: 0
	Date int `json:"date"`
	// Original photo height
	//  Minimum: 0
	Height *int `json:"height,omitempty"`
	// Returns if the photo is hidden above the wall
	Hidden *Base_PropertyExists `json:"hidden,omitempty"`
	// Photo ID
	//  Minimum: 0
	Id int `json:"id"`
	// Latitude
	Lat *float64 `json:"lat,omitempty"`
	// Longitude
	Long *float64 `json:"long,omitempty"`
	// Photo owner's ID
	//  Format: int64
	OwnerId int `json:"owner_id"`
	// URL of image with 1280 px width
	//  Format: uri
	Photo1280 *string `json:"photo_1280,omitempty"`
	// URL of image with 130 px width
	//  Format: uri
	Photo130 *string `json:"photo_130,omitempty"`
	// URL of image with 2560 px width
	//  Format: uri
	Photo2560 *string `json:"photo_2560,omitempty"`
	// URL of image with 604 px width
	//  Format: uri
	Photo604 *string `json:"photo_604,omitempty"`
	// URL of image with 75 px width
	//  Format: uri
	Photo75 *string `json:"photo_75,omitempty"`
	// URL of image with 807 px width
	//  Format: uri
	Photo807 *string `json:"photo_807,omitempty"`
	// Post ID
	//  Minimum: 1
	PostId *int `json:"post_id,omitempty"`
	// Real position of the photo
	RealOffset *int                 `json:"real_offset,omitempty"`
	Sizes      *[]Photos_PhotoSizes `json:"sizes,omitempty"`
	// Photo caption
	Text *string `json:"text,omitempty"`
	// ID of the user who have uploaded the photo
	//  Format: int64
	//  Minimum: 1
	UserId *int `json:"user_id,omitempty"`
	// Original photo width
	//  Minimum: 0
	Width *int `json:"width,omitempty"`
}

type Photos_PhotoXtrTagInfo struct {
	// Access key for the photo
	AccessKey *string `json:"access_key,omitempty"`
	// Album ID
	AlbumId int `json:"album_id"`
	// Date when uploaded
	//  Minimum: 0
	Date int `json:"date"`
	// Original photo height
	//  Minimum: 0
	Height *int `json:"height,omitempty"`
	// Photo ID
	//  Minimum: 0
	Id int `json:"id"`
	// Latitude
	Lat *float64 `json:"lat,omitempty"`
	// Longitude
	Long *float64 `json:"long,omitempty"`
	// Photo owner's ID
	//  Format: int64
	OwnerId int `json:"owner_id"`
	// URL of image with 1280 px width
	//  Format: uri
	Photo1280 *string `json:"photo_1280,omitempty"`
	// URL of image with 130 px width
	//  Format: uri
	Photo130 *string `json:"photo_130,omitempty"`
	// URL of image with 2560 px width
	//  Format: uri
	Photo2560 *string `json:"photo_2560,omitempty"`
	// URL of image with 604 px width
	//  Format: uri
	Photo604 *string `json:"photo_604,omitempty"`
	// URL of image with 75 px width
	//  Format: uri
	Photo75 *string `json:"photo_75,omitempty"`
	// URL of image with 807 px width
	//  Format: uri
	Photo807 *string `json:"photo_807,omitempty"`
	// ID of the tag creator
	PlacerId *int `json:"placer_id,omitempty"`
	// Post ID
	//  Minimum: 1
	PostId *int                 `json:"post_id,omitempty"`
	Sizes  *[]Photos_PhotoSizes `json:"sizes,omitempty"`
	// Date when tag has been added in Unixtime
	//  Minimum: 0
	TagCreated *int `json:"tag_created,omitempty"`
	// Tag ID
	TagId *int `json:"tag_id,omitempty"`
	// Photo caption
	Text *string `json:"text,omitempty"`
	// ID of the user who have uploaded the photo
	//  Format: int64
	//  Minimum: 1
	UserId *int `json:"user_id,omitempty"`
	// Original photo width
	//  Minimum: 0
	Width *int `json:"width,omitempty"`
}

type Photos_TagsSuggestionItem struct {
	Buttons   *[]Photos_TagsSuggestionItemButton `json:"buttons,omitempty"`
	Caption   *string                            `json:"caption,omitempty"`
	Photo     *Photos_Photo                      `json:"photo,omitempty"`
	Tags      *[]Photos_PhotoTag                 `json:"tags,omitempty"`
	Title     *string                            `json:"title,omitempty"`
	TrackCode *string                            `json:"track_code,omitempty"`
	Type      *string                            `json:"type,omitempty"`
}

type Photos_TagsSuggestionItemButton_Action string

const (
	Photos_TagsSuggestionItemButton_Action_Confirm  Photos_TagsSuggestionItemButton_Action = "confirm"
	Photos_TagsSuggestionItemButton_Action_Decline  Photos_TagsSuggestionItemButton_Action = "decline"
	Photos_TagsSuggestionItemButton_Action_ShowTags Photos_TagsSuggestionItemButton_Action = "show_tags"
)

type Photos_TagsSuggestionItemButton_Style string

const (
	Photos_TagsSuggestionItemButton_Style_Primary   Photos_TagsSuggestionItemButton_Style = "primary"
	Photos_TagsSuggestionItemButton_Style_Secondary Photos_TagsSuggestionItemButton_Style = "secondary"
)

type Photos_TagsSuggestionItemButton struct {
	Action *Photos_TagsSuggestionItemButton_Action `json:"action,omitempty"`
	Style  *Photos_TagsSuggestionItemButton_Style  `json:"style,omitempty"`
	Title  *string                                 `json:"title,omitempty"`
}

type Podcast_Cover struct {
	Sizes *[]Photos_PhotoSizes `json:"sizes,omitempty"`
}

type Podcast_ExternalData struct {
	// Podcast cover
	Cover *Podcast_Cover `json:"cover,omitempty"`
	// Name of the podcasts owner community
	OwnerName *string `json:"owner_name,omitempty"`
	// Url of the podcasts owner community
	OwnerUrl *string `json:"owner_url,omitempty"`
	// Podcast title
	Title *string `json:"title,omitempty"`
	// Url of the podcast page
	Url *string `json:"url,omitempty"`
}

type Polls_Answer struct {
	// Answer ID
	//  Minimum: 0
	Id int `json:"id"`
	// Answer rate in percents
	//  Minimum: 0
	Rate float64 `json:"rate"`
	// Answer text
	Text string `json:"text"`
	// Votes number
	//  Minimum: 0
	Votes int `json:"votes"`
}

type Polls_Background_Type string

const (
	Polls_Background_Type_Gradient Polls_Background_Type = "gradient"
	Polls_Background_Type_Tile     Polls_Background_Type = "tile"
)

type Polls_Background struct {
	// Gradient angle with 0 on positive X axis
	Angle *int `json:"angle,omitempty"`
	// Hex color code without #
	Color *string `json:"color,omitempty"`
	// Original height of pattern tile
	//  Minimum: 0
	Height *int `json:"height,omitempty"`
	Id     *int `json:"id,omitempty"`
	// Pattern tiles
	Images *[]Base_Image `json:"images,omitempty"`
	Name   *string       `json:"name,omitempty"`
	// Gradient points
	Points *[]Base_GradientPoint  `json:"points,omitempty"`
	Type   *Polls_Background_Type `json:"type,omitempty"`
	// Original with of pattern tile
	//  Minimum: 0
	Width *int `json:"width,omitempty"`
}

type Polls_Friend struct {
	//  Format: int64
	//  Minimum: 0
	Id int `json:"id"`
}

type Polls_Poll struct {
	Anonymous *Polls_PollAnonymous `json:"anonymous,omitempty"`
	// Current user's answer ID
	//  Minimum: 0
	AnswerId *int `json:"answer_id,omitempty"`
	// Current user's answer IDs
	//  Minimum: 0
	AnswerIds *[]int         `json:"answer_ids,omitempty"`
	Answers   []Polls_Answer `json:"answers"`
	// Poll author's ID
	AuthorId   *int              `json:"author_id,omitempty"`
	Background *Polls_Background `json:"background,omitempty"`
	CanEdit    bool              `json:"can_edit"`
	CanReport  bool              `json:"can_report"`
	CanShare   bool              `json:"can_share"`
	CanVote    bool              `json:"can_vote"`
	Closed     bool              `json:"closed"`
	// Date when poll has been created in Unixtime
	//  Minimum: 0
	Created       int     `json:"created"`
	DisableUnvote bool    `json:"disable_unvote"`
	EmbedHash     *string `json:"embed_hash,omitempty"`
	//  Minimum: 0
	EndDate int             `json:"end_date"`
	Friends *[]Polls_Friend `json:"friends,omitempty"`
	// Poll ID
	//  Minimum: 1
	Id      int  `json:"id"`
	IsBoard bool `json:"is_board"`
	// Information whether the poll with multiple choices
	Multiple bool `json:"multiple"`
	// Poll owner's ID
	//  Format: int64
	OwnerId int               `json:"owner_id"`
	Photo   *Polls_Background `json:"photo,omitempty"`
	// Poll question
	Question string `json:"question"`
	// Votes number
	//  Minimum: 0
	Votes int `json:"votes"`
}

// Polls_PollAnonymous Information whether the field is anonymous
type Polls_PollAnonymous bool

type Polls_Voters struct {
	// Answer ID
	AnswerId *int               `json:"answer_id,omitempty"`
	Users    *Polls_VotersUsers `json:"users,omitempty"`
}

type Polls_VotersUsers struct {
	// Votes number
	//  Minimum: 0
	Count *int `json:"count,omitempty"`
	//  Format: int64
	Items *[]int `json:"items,omitempty"`
}

//easyjson:skip
type PrettyCards_PrettyCard_Button struct {
	raw []byte
}

func (o *PrettyCards_PrettyCard_Button) MarshalJSON() ([]byte, error) {
	return o.raw, nil
}

func (o *PrettyCards_PrettyCard_Button) UnmarshalJSON(body []byte) (err error) {
	o.raw = body
	return nil
}

func (o PrettyCards_PrettyCard_Button) Raw() []byte {
	return o.raw
}

type PrettyCards_PrettyCard struct {
	// Button key
	Button *PrettyCards_PrettyCard_Button `json:"button,omitempty"`
	// Button text in current language
	ButtonText *string `json:"button_text,omitempty"`
	// Card ID (long int returned as string)
	CardId string        `json:"card_id"`
	Images *[]Base_Image `json:"images,omitempty"`
	// Link URL
	LinkUrl string `json:"link_url"`
	// Photo ID (format "<owner_id>_<media_id>")
	Photo string `json:"photo"`
	// Price if set (decimal number returned as string)
	Price *string `json:"price,omitempty"`
	// Old price if set (decimal number returned as string)
	PriceOld *string `json:"price_old,omitempty"`
	// Title
	Title string `json:"title"`
}

//easyjson:skip
type PrettyCards_PrettyCardOrError struct {
	raw []byte
}

func (o *PrettyCards_PrettyCardOrError) MarshalJSON() ([]byte, error) {
	return o.raw, nil
}

func (o *PrettyCards_PrettyCardOrError) UnmarshalJSON(body []byte) (err error) {
	o.raw = body
	return nil
}

func (o PrettyCards_PrettyCardOrError) Raw() []byte {
	return o.raw
}

type Search_Hint struct {
	App *Apps_App `json:"app,omitempty"`
	// Object description
	Description string `json:"description"`
	// Information whether the object has been found globally
	Global  *Base_BoolInt       `json:"global,omitempty"`
	Group   *Groups_Group       `json:"group,omitempty"`
	Link    *Base_Link          `json:"link,omitempty"`
	Profile *Users_UserMin      `json:"profile,omitempty"`
	Section *Search_HintSection `json:"section,omitempty"`
	Type    Search_HintType     `json:"type"`
}

// Search_HintSection Section title
type Search_HintSection string

const (
	Search_HintSection_Groups         Search_HintSection = "groups"
	Search_HintSection_Events         Search_HintSection = "events"
	Search_HintSection_Publics        Search_HintSection = "publics"
	Search_HintSection_Correspondents Search_HintSection = "correspondents"
	Search_HintSection_People         Search_HintSection = "people"
	Search_HintSection_Friends        Search_HintSection = "friends"
	Search_HintSection_MutualFriends  Search_HintSection = "mutual_friends"
	Search_HintSection_Promo          Search_HintSection = "promo"
)

// Search_HintType Object type
type Search_HintType string

const (
	Search_HintType_Group     Search_HintType = "group"
	Search_HintType_Profile   Search_HintType = "profile"
	Search_HintType_VkApp     Search_HintType = "vk_app"
	Search_HintType_App       Search_HintType = "app"
	Search_HintType_Html5Game Search_HintType = "html5_game"
	Search_HintType_Link      Search_HintType = "link"
)

type Secure_GiveEventStickerItem struct {
	Status *string `json:"status,omitempty"`
	//  Format: int64
	UserId *int `json:"user_id,omitempty"`
}

type Secure_Level struct {
	// Level
	Level *int `json:"level,omitempty"`
	// User ID
	Uid *int `json:"uid,omitempty"`
}

type Secure_SetCounterItem struct {
	// User ID
	//  Format: int64
	Id     int          `json:"id"`
	Result Base_BoolInt `json:"result"`
}

type Secure_SmsNotification struct {
	// Application ID
	AppId *string `json:"app_id,omitempty"`
	// Date when message has been sent in Unixtime
	Date *string `json:"date,omitempty"`
	// Notification ID
	Id *string `json:"id,omitempty"`
	// Messsage text
	Message *string `json:"message,omitempty"`
	// User ID
	UserId *string `json:"user_id,omitempty"`
}

type Secure_TokenChecked struct {
	// Date when access_token has been generated in Unixtime
	Date *int `json:"date,omitempty"`
	// Date when access_token will expire in Unixtime
	Expire *int `json:"expire,omitempty"`
	// Returns if successfully processed
	//  Default: 1
	Success *int `json:"success,omitempty"`
	// User ID
	//  Format: int64
	UserId *int `json:"user_id,omitempty"`
}

type Secure_Transaction struct {
	// Transaction date in Unixtime
	Date *int `json:"date,omitempty"`
	// Transaction ID
	Id *int `json:"id,omitempty"`
	// From ID
	UidFrom *int `json:"uid_from,omitempty"`
	// To ID
	UidTo *int `json:"uid_to,omitempty"`
	// Votes number
	Votes *int `json:"votes,omitempty"`
}

// Stats_Activity Activity stats
type Stats_Activity struct {
	// Comments number
	//  Minimum: 0
	Comments *int `json:"comments,omitempty"`
	// Reposts number
	//  Minimum: 0
	Copies *int `json:"copies,omitempty"`
	// Hidden from news count
	//  Minimum: 0
	Hidden *int `json:"hidden,omitempty"`
	// Likes number
	//  Minimum: 0
	Likes *int `json:"likes,omitempty"`
	// New subscribers count
	//  Minimum: 0
	Subscribed *int `json:"subscribed,omitempty"`
	// Unsubscribed count
	//  Minimum: 0
	Unsubscribed *int `json:"unsubscribed,omitempty"`
}

type Stats_City struct {
	// Visitors number
	//  Minimum: 0
	Count *int `json:"count,omitempty"`
	// City name
	Name *string `json:"name,omitempty"`
	// City ID
	Value *int `json:"value,omitempty"`
}

type Stats_Country struct {
	// Country code
	Code *string `json:"code,omitempty"`
	// Visitors number
	//  Minimum: 0
	Count *int `json:"count,omitempty"`
	// Country name
	Name *string `json:"name,omitempty"`
	// Country ID
	Value *int `json:"value,omitempty"`
}

type Stats_Period struct {
	Activity *Stats_Activity `json:"activity,omitempty"`
	// Unix timestamp
	PeriodFrom *int `json:"period_from,omitempty"`
	// Unix timestamp
	PeriodTo *int         `json:"period_to,omitempty"`
	Reach    *Stats_Reach `json:"reach,omitempty"`
	Visitors *Stats_Views `json:"visitors,omitempty"`
}

// Stats_Reach Reach stats
type Stats_Reach struct {
	Age       *[]Stats_SexAge  `json:"age,omitempty"`
	Cities    *[]Stats_City    `json:"cities,omitempty"`
	Countries *[]Stats_Country `json:"countries,omitempty"`
	// Reach count from mobile devices
	//  Minimum: 0
	MobileReach *int `json:"mobile_reach,omitempty"`
	// Reach count
	//  Minimum: 0
	Reach *int `json:"reach,omitempty"`
	// Subscribers reach count
	//  Minimum: 0
	ReachSubscribers *int            `json:"reach_subscribers,omitempty"`
	Sex              *[]Stats_SexAge `json:"sex,omitempty"`
	SexAge           *[]Stats_SexAge `json:"sex_age,omitempty"`
}

type Stats_SexAge struct {
	// Visitors number
	//  Minimum: 0
	Count            *int `json:"count,omitempty"`
	CountSubscribers *int `json:"count_subscribers,omitempty"`
	Reach            *int `json:"reach,omitempty"`
	ReachSubscribers *int `json:"reach_subscribers,omitempty"`
	// Sex/age value
	Value string `json:"value"`
}

// Stats_Views Views stats
type Stats_Views struct {
	Age       *[]Stats_SexAge  `json:"age,omitempty"`
	Cities    *[]Stats_City    `json:"cities,omitempty"`
	Countries *[]Stats_Country `json:"countries,omitempty"`
	// Number of views from mobile devices
	//  Minimum: 0
	MobileViews *int            `json:"mobile_views,omitempty"`
	Sex         *[]Stats_SexAge `json:"sex,omitempty"`
	SexAge      *[]Stats_SexAge `json:"sex_age,omitempty"`
	// Views number
	//  Minimum: 0
	Views *int `json:"views,omitempty"`
	// Visitors number
	//  Minimum: 0
	Visitors *int `json:"visitors,omitempty"`
}

type Stats_WallpostStat struct {
	// Hidings number
	Hide *int `json:"hide,omitempty"`
	// People have joined the group
	JoinGroup *int `json:"join_group,omitempty"`
	// Link clickthrough
	Links    *int `json:"links,omitempty"`
	PostId   *int `json:"post_id,omitempty"`
	ReachAds *int `json:"reach_ads,omitempty"`
	// Subscribers reach
	ReachSubscribers      *int `json:"reach_subscribers,omitempty"`
	ReachSubscribersCount *int `json:"reach_subscribers_count,omitempty"`
	// Total reach
	ReachTotal      *int `json:"reach_total,omitempty"`
	ReachTotalCount *int `json:"reach_total_count,omitempty"`
	ReachViral      *int `json:"reach_viral,omitempty"`
	// Reports number
	Report *int            `json:"report,omitempty"`
	SexAge *[]Stats_SexAge `json:"sex_age,omitempty"`
	// Clickthrough to community
	ToGroup *int `json:"to_group,omitempty"`
	// Unsubscribed members
	Unsubscribe *int `json:"unsubscribe,omitempty"`
}

type Status_Status struct {
	Audio *Audio_Audio `json:"audio,omitempty"`
	// Status text
	Text string `json:"text"`
}

type Stickers_ImageSet struct {
	// Base URL for images in set
	//  Format: uri
	BaseUrl string `json:"base_url"`
	// Version number to be appended to the image URL
	Version *int `json:"version,omitempty"`
}

type Storage_Value struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

type Store_Product_Type string

const (
	Store_Product_Type_Stickers Store_Product_Type = "stickers"
)

type Store_Product struct {
	// Information whether the product is active (1 - yes, 0 - no)
	Active *Base_BoolInt `json:"active,omitempty"`
	// Information whether the product is an animated sticker pack (for stickers product type)
	HasAnimation *bool `json:"has_animation,omitempty"`
	// Array of icon images or icon set object of the product (for stickers product type)
	Icon *Store_ProductIcon `json:"icon,omitempty"`
	// Id of the product
	Id int `json:"id"`
	// Information whether sticker product wasn't used after being purchased
	IsNew         *bool   `json:"is_new,omitempty"`
	PaymentRegion *string `json:"payment_region,omitempty"`
	// Array of preview images of the product (for stickers product type)
	Previews *[]Base_Image `json:"previews,omitempty"`
	// Information whether the product is promoted (1 - yes, 0 - no)
	Promoted *Base_BoolInt `json:"promoted,omitempty"`
	// Date (Unix time) when the product was purchased
	//  Minimum: 0
	PurchaseDate *int `json:"purchase_date,omitempty"`
	// Information whether the product is purchased (1 - yes, 0 - no)
	Purchased *Base_BoolInt      `json:"purchased,omitempty"`
	Stickers  *Base_StickersList `json:"stickers,omitempty"`
	// Array of style sticker ids (for sticker pack styles)
	StyleStickerIds *[]int `json:"style_sticker_ids,omitempty"`
	// Subtitle of the product
	Subtitle *string `json:"subtitle,omitempty"`
	// Title of the product
	Title *string `json:"title,omitempty"`
	// Product type
	Type Store_Product_Type `json:"type"`
}

type Store_ProductIcon []Base_Image

type Store_StickersKeyword struct {
	PromotedStickers *Store_StickersKeywordStickers  `json:"promoted_stickers,omitempty"`
	Stickers         *[]Store_StickersKeywordSticker `json:"stickers,omitempty"`
	UserStickers     *Store_StickersKeywordStickers  `json:"user_stickers,omitempty"`
	Words            []string                        `json:"words"`
}

type Store_StickersKeywordSticker struct {
	// Pack id
	PackId int `json:"pack_id"`
	// Sticker id
	StickerId int `json:"sticker_id"`
}

type Store_StickersKeywordStickers Base_StickersList

type Stories_ClickableArea struct {
	X int `json:"x"`
	Y int `json:"y"`
}

type Stories_ClickableSticker_Style string

const (
	Stories_ClickableSticker_Style_Transparent   Stories_ClickableSticker_Style = "transparent"
	Stories_ClickableSticker_Style_BlueGradient  Stories_ClickableSticker_Style = "blue_gradient"
	Stories_ClickableSticker_Style_RedGradient   Stories_ClickableSticker_Style = "red_gradient"
	Stories_ClickableSticker_Style_Underline     Stories_ClickableSticker_Style = "underline"
	Stories_ClickableSticker_Style_Blue          Stories_ClickableSticker_Style = "blue"
	Stories_ClickableSticker_Style_Green         Stories_ClickableSticker_Style = "green"
	Stories_ClickableSticker_Style_White         Stories_ClickableSticker_Style = "white"
	Stories_ClickableSticker_Style_QuestionReply Stories_ClickableSticker_Style = "question_reply"
	Stories_ClickableSticker_Style_Light         Stories_ClickableSticker_Style = "light"
	Stories_ClickableSticker_Style_Impressive    Stories_ClickableSticker_Style = "impressive"
)

type Stories_ClickableSticker_Subtype string

const (
	Stories_ClickableSticker_Subtype_MarketItem        Stories_ClickableSticker_Subtype = "market_item"
	Stories_ClickableSticker_Subtype_AliexpressProduct Stories_ClickableSticker_Subtype = "aliexpress_product"
)

type Stories_ClickableSticker_Type string

const (
	Stories_ClickableSticker_Type_Hashtag          Stories_ClickableSticker_Type = "hashtag"
	Stories_ClickableSticker_Type_Mention          Stories_ClickableSticker_Type = "mention"
	Stories_ClickableSticker_Type_Link             Stories_ClickableSticker_Type = "link"
	Stories_ClickableSticker_Type_Question         Stories_ClickableSticker_Type = "question"
	Stories_ClickableSticker_Type_Place            Stories_ClickableSticker_Type = "place"
	Stories_ClickableSticker_Type_MarketItem       Stories_ClickableSticker_Type = "market_item"
	Stories_ClickableSticker_Type_Music            Stories_ClickableSticker_Type = "music"
	Stories_ClickableSticker_Type_StoryReply       Stories_ClickableSticker_Type = "story_reply"
	Stories_ClickableSticker_Type_Owner            Stories_ClickableSticker_Type = "owner"
	Stories_ClickableSticker_Type_Post             Stories_ClickableSticker_Type = "post"
	Stories_ClickableSticker_Type_Poll             Stories_ClickableSticker_Type = "poll"
	Stories_ClickableSticker_Type_Sticker          Stories_ClickableSticker_Type = "sticker"
	Stories_ClickableSticker_Type_App              Stories_ClickableSticker_Type = "app"
	Stories_ClickableSticker_Type_SituationalTheme Stories_ClickableSticker_Type = "situational_theme"
)

type Stories_ClickableSticker struct {
	App *Apps_AppMin `json:"app,omitempty"`
	// Additional context for app sticker
	AppContext     *string                 `json:"app_context,omitempty"`
	Audio          *Audio_Audio            `json:"audio,omitempty"`
	AudioStartTime *int                    `json:"audio_start_time,omitempty"`
	ClickableArea  []Stories_ClickableArea `json:"clickable_area"`
	// Color, hex format
	Color *string `json:"color,omitempty"`
	// Whether current user has unread interaction with this app
	HasNewInteractions *bool   `json:"has_new_interactions,omitempty"`
	Hashtag            *string `json:"hashtag,omitempty"`
	// Clickable sticker ID
	Id int `json:"id"`
	// Whether current user allowed broadcast notify from this app
	IsBroadcastNotifyAllowed *bool              `json:"is_broadcast_notify_allowed,omitempty"`
	LinkObject               *Base_Link         `json:"link_object,omitempty"`
	MarketItem               *Market_MarketItem `json:"market_item,omitempty"`
	Mention                  *string            `json:"mention,omitempty"`
	//  Format: int64
	OwnerId *int        `json:"owner_id,omitempty"`
	PlaceId *int        `json:"place_id,omitempty"`
	Poll    *Polls_Poll `json:"poll,omitempty"`
	PostId  *int        `json:"post_id,omitempty"`
	//  Format: int64
	PostOwnerId        *int    `json:"post_owner_id,omitempty"`
	Question           *string `json:"question,omitempty"`
	QuestionButton     *string `json:"question_button,omitempty"`
	SituationalAppUrl  *string `json:"situational_app_url,omitempty"`
	SituationalThemeId *int    `json:"situational_theme_id,omitempty"`
	// Sticker ID
	StickerId *int `json:"sticker_id,omitempty"`
	// Sticker pack ID
	StickerPackId *int                              `json:"sticker_pack_id,omitempty"`
	StoryId       *int                              `json:"story_id,omitempty"`
	Style         *Stories_ClickableSticker_Style   `json:"style,omitempty"`
	Subtype       *Stories_ClickableSticker_Subtype `json:"subtype,omitempty"`
	TooltipText   *string                           `json:"tooltip_text,omitempty"`
	Type          Stories_ClickableSticker_Type     `json:"type"`
}

type Stories_ClickableStickers struct {
	ClickableStickers []Stories_ClickableSticker `json:"clickable_stickers"`
	//  Minimum: 0
	OriginalHeight int `json:"original_height"`
	//  Minimum: 0
	OriginalWidth int `json:"original_width"`
}

type Stories_FeedItem_Type string

const (
	Stories_FeedItem_Type_PromoStories            Stories_FeedItem_Type = "promo_stories"
	Stories_FeedItem_Type_Stories                 Stories_FeedItem_Type = "stories"
	Stories_FeedItem_Type_LiveActive              Stories_FeedItem_Type = "live_active"
	Stories_FeedItem_Type_LiveFinished            Stories_FeedItem_Type = "live_finished"
	Stories_FeedItem_Type_CommunityGroupedStories Stories_FeedItem_Type = "community_grouped_stories"
	Stories_FeedItem_Type_AppGroupedStories       Stories_FeedItem_Type = "app_grouped_stories"
	Stories_FeedItem_Type_Birthday                Stories_FeedItem_Type = "birthday"
	Stories_FeedItem_Type_Discover                Stories_FeedItem_Type = "discover"
	Stories_FeedItem_Type_Advices                 Stories_FeedItem_Type = "advices"
)

type Stories_FeedItem struct {
	// App, which stories has been grouped (for type app_grouped_stories)
	App            *Apps_AppMin `json:"app,omitempty"`
	BirthdayUserId *int         `json:"birthday_user_id,omitempty"`
	// Grouped stories of various authors (for types community_grouped_stories/app_grouped_stories type)
	Grouped   *[]Stories_FeedItem `json:"grouped,omitempty"`
	HasUnseen *bool               `json:"has_unseen,omitempty"`
	Id        *string             `json:"id,omitempty"`
	Name      *string             `json:"name,omitempty"`
	// Additional data for promo stories (for type promo_stories)
	PromoData *Stories_PromoBlock `json:"promo_data,omitempty"`
	// Author stories
	Stories   *[]Stories_Story `json:"stories,omitempty"`
	TrackCode *string          `json:"track_code,omitempty"`
	// Type of Feed Item
	Type Stories_FeedItem_Type `json:"type"`
}

// Stories_PromoBlock Additional data for promo stories
type Stories_PromoBlock struct {
	// Promo story title
	Name string `json:"name"`
	// Hide animation for promo story
	NotAnimated bool `json:"not_animated"`
	// RL of square photo of the story with 100 pixels in width
	Photo100 string `json:"photo_100"`
	// RL of square photo of the story with 50 pixels in width
	Photo50 string `json:"photo_50"`
}

type Stories_Replies struct {
	// Replies number.
	//  Minimum: 0
	Count int `json:"count"`
	// New replies number.
	New *int `json:"new,omitempty"`
}

type Stories_StatLine struct {
	//  Minimum: 0
	Counter       *int   `json:"counter,omitempty"`
	IsUnavailable *bool  `json:"is_unavailable,omitempty"`
	Name          string `json:"name"`
}

type Stories_Story struct {
	// Access key for private object.
	AccessKey          *string `json:"access_key,omitempty"`
	BirthdayWishUserId *int    `json:"birthday_wish_user_id,omitempty"`
	// Information whether story has question sticker and current user can send question to the author
	CanAsk *Base_BoolInt `json:"can_ask,omitempty"`
	// Information whether story has question sticker and current user can send anonymous question to the author
	CanAskAnonymous *Base_BoolInt `json:"can_ask_anonymous,omitempty"`
	// Information whether current user can comment the story (0 - no, 1 - yes).
	CanComment *Base_BoolInt `json:"can_comment,omitempty"`
	// Information whether current user can hide the story (0 - no, 1 - yes).
	CanHide *Base_BoolInt `json:"can_hide,omitempty"`
	// Information whether current user can like the story.
	CanLike *bool `json:"can_like,omitempty"`
	// Information whether current user can reply to the story (0 - no, 1 - yes).
	CanReply *Base_BoolInt `json:"can_reply,omitempty"`
	// Information whether current user can see the story (0 - no, 1 - yes).
	CanSee *Base_BoolInt `json:"can_see,omitempty"`
	// Information whether current user can share the story (0 - no, 1 - yes).
	CanShare          *Base_BoolInt              `json:"can_share,omitempty"`
	CanUseInNarrative *bool                      `json:"can_use_in_narrative,omitempty"`
	ClickableStickers *Stories_ClickableStickers `json:"clickable_stickers,omitempty"`
	// Date when story has been added in Unixtime.
	//  Minimum: 0
	Date *int `json:"date,omitempty"`
	// Story expiration time. Unixtime.
	//  Minimum: 0
	ExpiresAt           *int    `json:"expires_at,omitempty"`
	FirstNarrativeTitle *string `json:"first_narrative_title,omitempty"`
	// Story ID.
	Id int `json:"id"`
	// Information whether the story is deleted (false - no, true - yes).
	IsDeleted *bool `json:"is_deleted,omitempty"`
	// Information whether the story is expired (false - no, true - yes).
	IsExpired       *bool              `json:"is_expired,omitempty"`
	Link            *Stories_StoryLink `json:"link,omitempty"`
	NarrativesCount *int               `json:"narratives_count,omitempty"`
	// Story owner's ID.
	//  Format: int64
	OwnerId     int            `json:"owner_id"`
	ParentStory *Stories_Story `json:"parent_story,omitempty"`
	// Access key for private object.
	ParentStoryAccessKey *string `json:"parent_story_access_key,omitempty"`
	// Parent story ID.
	ParentStoryId *int `json:"parent_story_id,omitempty"`
	// Parent story owner's ID.
	ParentStoryOwnerId *int          `json:"parent_story_owner_id,omitempty"`
	Photo              *Photos_Photo `json:"photo,omitempty"`
	// Replies counters to current story.
	Replies *Stories_Replies `json:"replies,omitempty"`
	// Information whether current user has seen the story or not (0 - no, 1 - yes).
	Seen  *Base_BoolInt      `json:"seen,omitempty"`
	Type  *Stories_StoryType `json:"type,omitempty"`
	Video *Video_VideoFull   `json:"video,omitempty"`
	// Views number.
	//  Minimum: 0
	Views *int `json:"views,omitempty"`
}

type Stories_StoryLink struct {
	// How to open url
	LinkUrlTarget *string `json:"link_url_target,omitempty"`
	// Link text
	Text string `json:"text"`
	// Link URL
	//  Format: uri
	Url string `json:"url"`
}

type Stories_StoryStats struct {
	Answer      Stories_StoryStatsStat `json:"answer"`
	Bans        Stories_StoryStatsStat `json:"bans"`
	Likes       Stories_StoryStatsStat `json:"likes"`
	OpenLink    Stories_StoryStatsStat `json:"open_link"`
	Replies     Stories_StoryStatsStat `json:"replies"`
	Shares      Stories_StoryStatsStat `json:"shares"`
	Subscribers Stories_StoryStatsStat `json:"subscribers"`
	Views       Stories_StoryStatsStat `json:"views"`
}

type Stories_StoryStatsStat struct {
	// Stat value
	//  Minimum: 0
	Count *int                    `json:"count,omitempty"`
	State Stories_StoryStatsState `json:"state"`
}

// Stories_StoryStatsState Statistic state
type Stories_StoryStatsState string

const (
	Stories_StoryStatsState_On     Stories_StoryStatsState = "on"
	Stories_StoryStatsState_Off    Stories_StoryStatsState = "off"
	Stories_StoryStatsState_Hidden Stories_StoryStatsState = "hidden"
)

// Stories_StoryType Story type.
type Stories_StoryType string

const (
	Stories_StoryType_Photo          Stories_StoryType = "photo"
	Stories_StoryType_Video          Stories_StoryType = "video"
	Stories_StoryType_LiveActive     Stories_StoryType = "live_active"
	Stories_StoryType_LiveFinished   Stories_StoryType = "live_finished"
	Stories_StoryType_BirthdayInvite Stories_StoryType = "birthday_invite"
)

type Stories_UploadLinkText string

const (
	Stories_UploadLinkText_ToStore   Stories_UploadLinkText = "to_store"
	Stories_UploadLinkText_Vote      Stories_UploadLinkText = "vote"
	Stories_UploadLinkText_More      Stories_UploadLinkText = "more"
	Stories_UploadLinkText_Book      Stories_UploadLinkText = "book"
	Stories_UploadLinkText_Order     Stories_UploadLinkText = "order"
	Stories_UploadLinkText_Enroll    Stories_UploadLinkText = "enroll"
	Stories_UploadLinkText_Fill      Stories_UploadLinkText = "fill"
	Stories_UploadLinkText_Signup    Stories_UploadLinkText = "signup"
	Stories_UploadLinkText_Buy       Stories_UploadLinkText = "buy"
	Stories_UploadLinkText_Ticket    Stories_UploadLinkText = "ticket"
	Stories_UploadLinkText_Write     Stories_UploadLinkText = "write"
	Stories_UploadLinkText_Open      Stories_UploadLinkText = "open"
	Stories_UploadLinkText_LearnMore Stories_UploadLinkText = "learn_more"
	Stories_UploadLinkText_View      Stories_UploadLinkText = "view"
	Stories_UploadLinkText_GoTo      Stories_UploadLinkText = "go_to"
	Stories_UploadLinkText_Contact   Stories_UploadLinkText = "contact"
	Stories_UploadLinkText_Watch     Stories_UploadLinkText = "watch"
	Stories_UploadLinkText_Play      Stories_UploadLinkText = "play"
	Stories_UploadLinkText_Install   Stories_UploadLinkText = "install"
	Stories_UploadLinkText_Read      Stories_UploadLinkText = "read"
	Stories_UploadLinkText_Calendar  Stories_UploadLinkText = "calendar"
)

type Stories_ViewersItem struct {
	// user has like for this object
	IsLiked bool            `json:"is_liked"`
	User    *Users_UserFull `json:"user,omitempty"`
	// user id
	//  Format: int64
	UserId int `json:"user_id"`
}

type Users_Career struct {
	// City ID
	CityId *int `json:"city_id,omitempty"`
	// City name
	CityName *string `json:"city_name,omitempty"`
	// Company name
	Company *string `json:"company,omitempty"`
	// Country ID
	CountryId *int `json:"country_id,omitempty"`
	// From year
	From *int `json:"from,omitempty"`
	// Community ID
	//  Format: int64
	GroupId *int `json:"group_id,omitempty"`
	// Career ID
	Id *int `json:"id,omitempty"`
	// Position
	Position *string `json:"position,omitempty"`
	// Till year
	Until *int `json:"until,omitempty"`
}

type Users_Exports struct {
	Facebook    *int `json:"facebook,omitempty"`
	Livejournal *int `json:"livejournal,omitempty"`
	Twitter     *int `json:"twitter,omitempty"`
}

type Users_Fields string

const (
	Users_Fields_FirstNameNom           Users_Fields = "first_name_nom"
	Users_Fields_FirstNameGen           Users_Fields = "first_name_gen"
	Users_Fields_FirstNameDat           Users_Fields = "first_name_dat"
	Users_Fields_FirstNameAcc           Users_Fields = "first_name_acc"
	Users_Fields_FirstNameIns           Users_Fields = "first_name_ins"
	Users_Fields_FirstNameAbl           Users_Fields = "first_name_abl"
	Users_Fields_LastNameNom            Users_Fields = "last_name_nom"
	Users_Fields_LastNameGen            Users_Fields = "last_name_gen"
	Users_Fields_LastNameDat            Users_Fields = "last_name_dat"
	Users_Fields_LastNameAcc            Users_Fields = "last_name_acc"
	Users_Fields_LastNameIns            Users_Fields = "last_name_ins"
	Users_Fields_LastNameAbl            Users_Fields = "last_name_abl"
	Users_Fields_PhotoId                Users_Fields = "photo_id"
	Users_Fields_Verified               Users_Fields = "verified"
	Users_Fields_Sex                    Users_Fields = "sex"
	Users_Fields_Bdate                  Users_Fields = "bdate"
	Users_Fields_BdateVisibility        Users_Fields = "bdate_visibility"
	Users_Fields_City                   Users_Fields = "city"
	Users_Fields_Country                Users_Fields = "country"
	Users_Fields_HomeTown               Users_Fields = "home_town"
	Users_Fields_HasPhoto               Users_Fields = "has_photo"
	Users_Fields_Photo                  Users_Fields = "photo"
	Users_Fields_PhotoRec               Users_Fields = "photo_rec"
	Users_Fields_Photo50                Users_Fields = "photo_50"
	Users_Fields_Photo100               Users_Fields = "photo_100"
	Users_Fields_Photo200Orig           Users_Fields = "photo_200_orig"
	Users_Fields_Photo200               Users_Fields = "photo_200"
	Users_Fields_Photo400               Users_Fields = "photo_400"
	Users_Fields_Photo400Orig           Users_Fields = "photo_400_orig"
	Users_Fields_PhotoBig               Users_Fields = "photo_big"
	Users_Fields_PhotoMedium            Users_Fields = "photo_medium"
	Users_Fields_PhotoMediumRec         Users_Fields = "photo_medium_rec"
	Users_Fields_PhotoMax               Users_Fields = "photo_max"
	Users_Fields_PhotoMaxOrig           Users_Fields = "photo_max_orig"
	Users_Fields_PhotoMaxSize           Users_Fields = "photo_max_size"
	Users_Fields_ThirdPartyButtons      Users_Fields = "third_party_buttons"
	Users_Fields_Online                 Users_Fields = "online"
	Users_Fields_Lists                  Users_Fields = "lists"
	Users_Fields_Domain                 Users_Fields = "domain"
	Users_Fields_HasMobile              Users_Fields = "has_mobile"
	Users_Fields_Contacts               Users_Fields = "contacts"
	Users_Fields_Language               Users_Fields = "language"
	Users_Fields_Site                   Users_Fields = "site"
	Users_Fields_Education              Users_Fields = "education"
	Users_Fields_Universities           Users_Fields = "universities"
	Users_Fields_Schools                Users_Fields = "schools"
	Users_Fields_Status                 Users_Fields = "status"
	Users_Fields_LastSeen               Users_Fields = "last_seen"
	Users_Fields_FollowersCount         Users_Fields = "followers_count"
	Users_Fields_Counters               Users_Fields = "counters"
	Users_Fields_CommonCount            Users_Fields = "common_count"
	Users_Fields_OnlineInfo             Users_Fields = "online_info"
	Users_Fields_Occupation             Users_Fields = "occupation"
	Users_Fields_Nickname               Users_Fields = "nickname"
	Users_Fields_Relatives              Users_Fields = "relatives"
	Users_Fields_Relation               Users_Fields = "relation"
	Users_Fields_Personal               Users_Fields = "personal"
	Users_Fields_Connections            Users_Fields = "connections"
	Users_Fields_Exports                Users_Fields = "exports"
	Users_Fields_WallComments           Users_Fields = "wall_comments"
	Users_Fields_WallDefault            Users_Fields = "wall_default"
	Users_Fields_Activities             Users_Fields = "activities"
	Users_Fields_Activity               Users_Fields = "activity"
	Users_Fields_Interests              Users_Fields = "interests"
	Users_Fields_Music                  Users_Fields = "music"
	Users_Fields_Movies                 Users_Fields = "movies"
	Users_Fields_Tv                     Users_Fields = "tv"
	Users_Fields_Books                  Users_Fields = "books"
	Users_Fields_IsNoIndex              Users_Fields = "is_no_index"
	Users_Fields_Games                  Users_Fields = "games"
	Users_Fields_About                  Users_Fields = "about"
	Users_Fields_Quotes                 Users_Fields = "quotes"
	Users_Fields_CanPost                Users_Fields = "can_post"
	Users_Fields_CanSeeAllPosts         Users_Fields = "can_see_all_posts"
	Users_Fields_CanSeeAudio            Users_Fields = "can_see_audio"
	Users_Fields_CanSeeGifts            Users_Fields = "can_see_gifts"
	Users_Fields_Work                   Users_Fields = "work"
	Users_Fields_Places                 Users_Fields = "places"
	Users_Fields_CanWritePrivateMessage Users_Fields = "can_write_private_message"
	Users_Fields_CanSendFriendRequest   Users_Fields = "can_send_friend_request"
	Users_Fields_CanUploadDoc           Users_Fields = "can_upload_doc"
	Users_Fields_IsFavorite             Users_Fields = "is_favorite"
	Users_Fields_IsHiddenFromFeed       Users_Fields = "is_hidden_from_feed"
	Users_Fields_Timezone               Users_Fields = "timezone"
	Users_Fields_ScreenName             Users_Fields = "screen_name"
	Users_Fields_MaidenName             Users_Fields = "maiden_name"
	Users_Fields_CropPhoto              Users_Fields = "crop_photo"
	Users_Fields_IsFriend               Users_Fields = "is_friend"
	Users_Fields_FriendStatus           Users_Fields = "friend_status"
	Users_Fields_Career                 Users_Fields = "career"
	Users_Fields_Military               Users_Fields = "military"
	Users_Fields_Blacklisted            Users_Fields = "blacklisted"
	Users_Fields_BlacklistedByMe        Users_Fields = "blacklisted_by_me"
	Users_Fields_CanSubscribePosts      Users_Fields = "can_subscribe_posts"
	Users_Fields_Descriptions           Users_Fields = "descriptions"
	Users_Fields_Trending               Users_Fields = "trending"
	Users_Fields_Mutual                 Users_Fields = "mutual"
	Users_Fields_FriendshipWeeks        Users_Fields = "friendship_weeks"
	Users_Fields_CanInviteToChats       Users_Fields = "can_invite_to_chats"
	Users_Fields_StoriesArchiveCount    Users_Fields = "stories_archive_count"
	Users_Fields_HasUnseenStories       Users_Fields = "has_unseen_stories"
	Users_Fields_VideoLive              Users_Fields = "video_live"
	Users_Fields_VideoLiveLevel         Users_Fields = "video_live_level"
	Users_Fields_VideoLiveCount         Users_Fields = "video_live_count"
	Users_Fields_ClipsCount             Users_Fields = "clips_count"
	Users_Fields_ServiceDescription     Users_Fields = "service_description"
	Users_Fields_CanSeeWishes           Users_Fields = "can_see_wishes"
	Users_Fields_IsSubscribedPodcasts   Users_Fields = "is_subscribed_podcasts"
	Users_Fields_CanSubscribePodcasts   Users_Fields = "can_subscribe_podcasts"
)

type Users_LastSeen struct {
	// Type of the platform that used for the last authorization
	Platform *int `json:"platform,omitempty"`
	// Last visit date (in Unix time)
	Time *int `json:"time,omitempty"`
}

type Users_Military struct {
	// Country ID
	CountryId int `json:"country_id"`
	// From year
	From *int `json:"from,omitempty"`
	// Military ID
	Id *int `json:"id,omitempty"`
	// Unit name
	Unit string `json:"unit"`
	// Unit ID
	UnitId int `json:"unit_id"`
	// Till year
	Until *int `json:"until,omitempty"`
}

type Users_Occupation struct {
	// ID of school, university, company group
	//  Minimum: 0
	Id *int `json:"id,omitempty"`
	// Name of occupation
	Name *string `json:"name,omitempty"`
	// Type of occupation
	Type *string `json:"type,omitempty"`
}

type Users_OnlineInfo_Status string

const (
	Users_OnlineInfo_Status_Recently  Users_OnlineInfo_Status = "recently"
	Users_OnlineInfo_Status_LastWeek  Users_OnlineInfo_Status = "last_week"
	Users_OnlineInfo_Status_LastMonth Users_OnlineInfo_Status = "last_month"
	Users_OnlineInfo_Status_LongAgo   Users_OnlineInfo_Status = "long_ago"
	Users_OnlineInfo_Status_NotShow   Users_OnlineInfo_Status = "not_show"
)

type Users_OnlineInfo struct {
	// Application id from which user is currently online or was last seen online
	//  Minimum: 0
	AppId *int `json:"app_id,omitempty"`
	// Is user online from desktop app or mobile app
	IsMobile *bool `json:"is_mobile,omitempty"`
	// Whether user is currently online or not
	IsOnline *bool `json:"is_online,omitempty"`
	// Last time we saw user being active
	//  Minimum: 0
	LastSeen *int `json:"last_seen,omitempty"`
	// In case user online is not visible, it indicates approximate timeframe of user online
	Status *Users_OnlineInfo_Status `json:"status,omitempty"`
	// Whether you can see real online status of user or not
	Visible bool `json:"visible"`
}

type Users_Personal struct {
	// User's views on alcohol
	Alcohol *int `json:"alcohol,omitempty"`
	// User's inspired by
	InspiredBy *string   `json:"inspired_by,omitempty"`
	Langs      *[]string `json:"langs,omitempty"`
	// User's personal priority in life
	LifeMain *int `json:"life_main,omitempty"`
	// User's personal priority in people
	PeopleMain *int `json:"people_main,omitempty"`
	// User's political views
	Political *int `json:"political,omitempty"`
	// User's religion
	Religion *string `json:"religion,omitempty"`
	// User's religion id
	ReligionId *int `json:"religion_id,omitempty"`
	// User's views on smoking
	Smoking *int `json:"smoking,omitempty"`
}

type Users_Relative_Type string

const (
	Users_Relative_Type_Parent      Users_Relative_Type = "parent"
	Users_Relative_Type_Child       Users_Relative_Type = "child"
	Users_Relative_Type_Grandparent Users_Relative_Type = "grandparent"
	Users_Relative_Type_Grandchild  Users_Relative_Type = "grandchild"
	Users_Relative_Type_Sibling     Users_Relative_Type = "sibling"
)

type Users_Relative struct {
	// Date of child birthday (format dd.mm.yyyy)
	BirthDate *string `json:"birth_date,omitempty"`
	// Relative ID
	//  Format: int64
	Id *int `json:"id,omitempty"`
	// Name of relative
	Name *string `json:"name,omitempty"`
	// Relative type
	Type Users_Relative_Type `json:"type"`
}

type Users_School struct {
	// City ID
	City *int `json:"city,omitempty"`
	// School class letter
	Class *string `json:"class,omitempty"`
	// Country ID
	Country *int `json:"country,omitempty"`
	// School ID
	Id *string `json:"id,omitempty"`
	// School name
	Name       *string `json:"name,omitempty"`
	Speciality *string `json:"speciality,omitempty"`
	// School type ID
	Type *int `json:"type,omitempty"`
	// School type name
	TypeStr *string `json:"type_str,omitempty"`
	// Year the user started to study
	YearFrom *int `json:"year_from,omitempty"`
	// Graduation year
	YearGraduated *int `json:"year_graduated,omitempty"`
	// Year the user finished to study
	YearTo *int `json:"year_to,omitempty"`
}

//easyjson:skip
type Users_SubscriptionsItem struct {
	raw []byte
}

func (o *Users_SubscriptionsItem) MarshalJSON() ([]byte, error) {
	return o.raw, nil
}

func (o *Users_SubscriptionsItem) UnmarshalJSON(body []byte) (err error) {
	o.raw = body
	return nil
}

func (o Users_SubscriptionsItem) Raw() []byte {
	return o.raw
}

type Users_University struct {
	// Chair ID
	Chair *int `json:"chair,omitempty"`
	// Chair name
	ChairName *string `json:"chair_name,omitempty"`
	// City ID
	City *int `json:"city,omitempty"`
	// Country ID
	Country *int `json:"country,omitempty"`
	// Education form
	EducationForm *string `json:"education_form,omitempty"`
	// Education status
	EducationStatus *string `json:"education_status,omitempty"`
	// Faculty ID
	Faculty *int `json:"faculty,omitempty"`
	// Faculty name
	FacultyName *string `json:"faculty_name,omitempty"`
	// Graduation year
	Graduation *int `json:"graduation,omitempty"`
	// University ID
	Id *int `json:"id,omitempty"`
	// University name
	Name              *string `json:"name,omitempty"`
	UniversityGroupId *int    `json:"university_group_id,omitempty"`
}

type Users_User struct {
	Users_UserMin
	FriendStatus *Friends_FriendStatusStatus `json:"friend_status,omitempty"`
	Mutual       *Friends_RequestsMutual     `json:"mutual,omitempty"`
	// Information whether the user is online
	Online *Base_BoolInt `json:"online,omitempty"`
	// Application ID
	OnlineApp  *int              `json:"online_app,omitempty"`
	OnlineInfo *Users_OnlineInfo `json:"online_info,omitempty"`
	// Information whether the user is online in mobile site or application
	OnlineMobile *Base_BoolInt `json:"online_mobile,omitempty"`
	// URL of square photo of the user with 100 pixels in width
	//  Format: uri
	Photo100 *string `json:"photo_100,omitempty"`
	// URL of square photo of the user with 50 pixels in width
	//  Format: uri
	Photo50 *string `json:"photo_50,omitempty"`
	// Domain name of the user's page
	ScreenName *string `json:"screen_name,omitempty"`
	// User sex
	Sex *Base_Sex `json:"sex,omitempty"`
	// Information whether the user has a "fire" pictogram.
	Trending *Base_BoolInt `json:"trending,omitempty"`
	// Information whether the user is verified
	Verified *Base_BoolInt `json:"verified,omitempty"`
}

type Users_UserConnections struct {
	// User's Facebook account
	Facebook string `json:"facebook"`
	// User's Facebook name
	FacebookName *string `json:"facebook_name,omitempty"`
	// User's Instagram account
	Instagram string `json:"instagram"`
	// User's Livejournal account
	Livejournal *string `json:"livejournal,omitempty"`
	// User's Skype nickname
	Skype string `json:"skype"`
	// User's Twitter account
	Twitter string `json:"twitter"`
}

type Users_UserCounters struct {
	// Albums number
	Albums   *int `json:"albums,omitempty"`
	Articles *int `json:"articles,omitempty"`
	// Audios number
	Audios *int `json:"audios,omitempty"`
	// Badges number
	Badges         *int `json:"badges,omitempty"`
	Clips          *int `json:"clips,omitempty"`
	ClipsFollowers *int `json:"clips_followers,omitempty"`
	// Followers number
	Followers *int `json:"followers,omitempty"`
	// Friends number
	Friends *int `json:"friends,omitempty"`
	// Gifts number
	Gifts *int `json:"gifts,omitempty"`
	// Communities number
	Groups             *int `json:"groups,omitempty"`
	MutualFriends      *int `json:"mutual_friends,omitempty"`
	NewPhotoTags       *int `json:"new_photo_tags,omitempty"`
	NewRecognitionTags *int `json:"new_recognition_tags,omitempty"`
	// Notes number
	Notes *int `json:"notes,omitempty"`
	// Online friends number
	OnlineFriends *int `json:"online_friends,omitempty"`
	// Public pages number
	Pages *int `json:"pages,omitempty"`
	// Photos number
	Photos   *int `json:"photos,omitempty"`
	Podcasts *int `json:"podcasts,omitempty"`
	Posts    *int `json:"posts,omitempty"`
	// Subscriptions number
	Subscriptions *int `json:"subscriptions,omitempty"`
	// Number of photos with user
	UserPhotos *int `json:"user_photos,omitempty"`
	// Number of videos with user
	UserVideos *int `json:"user_videos,omitempty"`
	// Videos number
	Videos *int `json:"videos,omitempty"`
	Wishes *int `json:"wishes,omitempty"`
}

type Users_UserFull_WallDefault string

const (
	Users_UserFull_WallDefault_Owner Users_UserFull_WallDefault = "owner"
	Users_UserFull_WallDefault_All   Users_UserFull_WallDefault = "all"
)

type Users_UserFull struct {
	Users_User
	About      *string `json:"about,omitempty"`
	AccessKey  *string `json:"access_key,omitempty"`
	Activities *string `json:"activities,omitempty"`
	// User's status
	Activity *string `json:"activity,omitempty"`
	// User's date of birth
	Bdate *string `json:"bdate,omitempty"`
	// Information whether current user is in the requested user's blacklist.
	Blacklisted *Base_BoolInt `json:"blacklisted,omitempty"`
	// Information whether the requested user is in current user's blacklist
	BlacklistedByMe *Base_BoolInt `json:"blacklisted_by_me,omitempty"`
	Books           *string       `json:"books,omitempty"`
	// Information whether current user can be invited to the community
	CanBeInvitedGroup *bool `json:"can_be_invited_group,omitempty"`
	// Information whether current user can call
	CanCall *bool `json:"can_call,omitempty"`
	// Information whether group can call user
	CanCallFromGroup *bool `json:"can_call_from_group,omitempty"`
	// Information whether current user can post on the user's wall
	CanPost *Base_BoolInt `json:"can_post,omitempty"`
	// Information whether current user can see other users' audio on the wall
	CanSeeAllPosts *Base_BoolInt `json:"can_see_all_posts,omitempty"`
	// Information whether current user can see the user's audio
	CanSeeAudio *Base_BoolInt `json:"can_see_audio,omitempty"`
	// Information whether current user can see the user's gifts
	CanSeeGifts *Base_BoolInt `json:"can_see_gifts,omitempty"`
	// Information whether current user can see the user's wishes
	CanSeeWishes *bool `json:"can_see_wishes,omitempty"`
	// Information whether current user can send a friend request
	CanSendFriendRequest *Base_BoolInt `json:"can_send_friend_request,omitempty"`
	// Owner in whitelist or not
	CanSubscribePodcasts *bool `json:"can_subscribe_podcasts,omitempty"`
	// Can subscribe to wall
	CanSubscribePosts *bool         `json:"can_subscribe_posts,omitempty"`
	CanUploadDoc      *Base_BoolInt `json:"can_upload_doc,omitempty"`
	// Information whether current user can write private message
	CanWritePrivateMessage *Base_BoolInt   `json:"can_write_private_message,omitempty"`
	Career                 *[]Users_Career `json:"career,omitempty"`
	City                   *Base_City      `json:"city,omitempty"`
	// Number of user's clips
	//  Minimum: 0
	ClipsCount *int `json:"clips_count,omitempty"`
	// Number of common friends with current user
	//  Minimum: 0
	CommonCount *int `json:"common_count,omitempty"`
	// Contact person ID
	ContactId *int `json:"contact_id,omitempty"`
	// User contact name
	ContactName  *string             `json:"contact_name,omitempty"`
	Counters     *Users_UserCounters `json:"counters,omitempty"`
	Country      *Base_Country       `json:"country,omitempty"`
	CropPhoto    *Base_CropPhoto     `json:"crop_photo,omitempty"`
	Descriptions *[]string           `json:"descriptions,omitempty"`
	// Domain name of the user's page
	Domain *string `json:"domain,omitempty"`
	// Education form
	EducationForm *string `json:"education_form,omitempty"`
	// User's education status
	EducationStatus *string        `json:"education_status,omitempty"`
	Email           *string        `json:"email,omitempty"`
	Exports         *Users_Exports `json:"exports,omitempty"`
	Facebook        *string        `json:"facebook,omitempty"`
	FacebookName    *string        `json:"facebook_name,omitempty"`
	// Faculty ID
	Faculty *int `json:"faculty,omitempty"`
	// Faculty name
	FacultyName *string `json:"faculty_name,omitempty"`
	// User's first name in prepositional case
	FirstNameAbl *string `json:"first_name_abl,omitempty"`
	// User's first name in accusative case
	FirstNameAcc *string `json:"first_name_acc,omitempty"`
	// User's first name in dative case
	FirstNameDat *string `json:"first_name_dat,omitempty"`
	// User's first name in genitive case
	FirstNameGen *string `json:"first_name_gen,omitempty"`
	// User's first name in instrumental case
	FirstNameIns *string `json:"first_name_ins,omitempty"`
	// User's first name in nominative case
	FirstNameNom *string `json:"first_name_nom,omitempty"`
	// Number of user's followers
	//  Minimum: 0
	FollowersCount *int    `json:"followers_count,omitempty"`
	Games          *string `json:"games,omitempty"`
	// Graduation year
	Graduation *int `json:"graduation,omitempty"`
	// Information whether the user specified his phone number
	HasMobile *Base_BoolInt `json:"has_mobile,omitempty"`
	// Information whether the user has main photo
	HasPhoto         *Base_BoolInt `json:"has_photo,omitempty"`
	HasUnseenStories *bool         `json:"has_unseen_stories,omitempty"`
	Hash             *string       `json:"hash,omitempty"`
	// User's additional phone number
	HomePhone *string `json:"home_phone,omitempty"`
	// User hometown
	HomeTown  *string `json:"home_town,omitempty"`
	Instagram *string `json:"instagram,omitempty"`
	Interests *string `json:"interests,omitempty"`
	// Information whether the requested user is in faves of current user
	IsFavorite *Base_BoolInt `json:"is_favorite,omitempty"`
	// Information whether the user is a friend of current user
	IsFriend *Base_BoolInt `json:"is_friend,omitempty"`
	// Information whether the requested user is hidden from current user's newsfeed
	IsHiddenFromFeed *Base_BoolInt `json:"is_hidden_from_feed,omitempty"`
	IsMessageRequest *bool         `json:"is_message_request,omitempty"`
	// Access to user profile is restricted for search engines
	IsNoIndex *bool `json:"is_no_index,omitempty"`
	IsService *bool `json:"is_service,omitempty"`
	// Information whether current user is subscribed to podcasts
	IsSubscribedPodcasts            *bool         `json:"is_subscribed_podcasts,omitempty"`
	IsVideoLiveNotificationsBlocked *Base_BoolInt `json:"is_video_live_notifications_blocked,omitempty"`
	Language                        *string       `json:"language,omitempty"`
	// User's last name in prepositional case
	LastNameAbl *string `json:"last_name_abl,omitempty"`
	// User's last name in accusative case
	LastNameAcc *string `json:"last_name_acc,omitempty"`
	// User's last name in dative case
	LastNameDat *string `json:"last_name_dat,omitempty"`
	// User's last name in genitive case
	LastNameGen *string `json:"last_name_gen,omitempty"`
	// User's last name in instrumental case
	LastNameIns *string `json:"last_name_ins,omitempty"`
	// User's last name in nominative case
	LastNameNom *string         `json:"last_name_nom,omitempty"`
	LastSeen    *Users_LastSeen `json:"last_seen,omitempty"`
	Lists       *[]int          `json:"lists,omitempty"`
	Livejournal *string         `json:"livejournal,omitempty"`
	// User maiden name
	MaidenName *string           `json:"maiden_name,omitempty"`
	Military   *[]Users_Military `json:"military,omitempty"`
	// User's mobile phone number
	MobilePhone *string `json:"mobile_phone,omitempty"`
	Movies      *string `json:"movies,omitempty"`
	Music       *string `json:"music,omitempty"`
	// User nickname
	Nickname   *string           `json:"nickname,omitempty"`
	Occupation *Users_Occupation `json:"occupation,omitempty"`
	OwnerState *Owner_State      `json:"owner_state,omitempty"`
	Personal   *Users_Personal   `json:"personal,omitempty"`
	Photo      *string           `json:"photo,omitempty"`
	// URL of square photo of the user with 200 pixels in width
	//  Format: uri
	Photo200 *string `json:"photo_200,omitempty"`
	// URL of user's photo with 200 pixels in width
	//  Format: uri
	Photo200Orig *string `json:"photo_200_orig,omitempty"`
	Photo400     *string `json:"photo_400,omitempty"`
	// URL of user's photo with 400 pixels in width
	//  Format: uri
	Photo400Orig *string `json:"photo_400_orig,omitempty"`
	PhotoBig     *string `json:"photo_big,omitempty"`
	// ID of the user's main photo
	PhotoId *string `json:"photo_id,omitempty"`
	// URL of square photo of the user with maximum width
	//  Format: uri
	PhotoMax *string `json:"photo_max,omitempty"`
	// URL of user's photo of maximum size
	//  Format: uri
	PhotoMaxOrig   *string                `json:"photo_max_orig,omitempty"`
	PhotoMaxSize   *Photos_Photo          `json:"photo_max_size,omitempty"`
	PhotoMedium    *Photos_PhotoFalseable `json:"photo_medium,omitempty"`
	PhotoMediumRec *Photos_PhotoFalseable `json:"photo_medium_rec,omitempty"`
	PhotoRec       *Photos_PhotoFalseable `json:"photo_rec,omitempty"`
	Quotes         *string                `json:"quotes,omitempty"`
	// User relationship status
	Relation           *Users_UserRelation `json:"relation,omitempty"`
	RelationPartner    *Users_UserMin      `json:"relation_partner,omitempty"`
	Relatives          *[]Users_Relative   `json:"relatives,omitempty"`
	Schools            *[]Users_School     `json:"schools,omitempty"`
	ServiceDescription *string             `json:"service_description,omitempty"`
	// User's website
	Site  *string `json:"site,omitempty"`
	Skype *string `json:"skype,omitempty"`
	// User's status
	Status              *string       `json:"status,omitempty"`
	StatusAudio         *Audio_Audio  `json:"status_audio,omitempty"`
	StoriesArchiveCount *int          `json:"stories_archive_count,omitempty"`
	Test                *Base_BoolInt `json:"test,omitempty"`
	// User's timezone
	Timezone     *float64            `json:"timezone,omitempty"`
	Tv           *string             `json:"tv,omitempty"`
	Twitter      *string             `json:"twitter,omitempty"`
	Type         *Users_UserType     `json:"type,omitempty"`
	Universities *[]Users_University `json:"universities,omitempty"`
	// University ID
	University        *int `json:"university,omitempty"`
	UniversityGroupId *int `json:"university_group_id,omitempty"`
	// University name
	UniversityName *string         `json:"university_name,omitempty"`
	VideoLive      *Video_LiveInfo `json:"video_live,omitempty"`
	// Number of user's live streams
	//  Minimum: 0
	VideoLiveCount *int `json:"video_live_count,omitempty"`
	// User level in live streams achievements
	//  Minimum: 0
	VideoLiveLevel *int `json:"video_live_level,omitempty"`
	// Information whether current user can comment wall posts
	WallComments *Base_BoolInt               `json:"wall_comments,omitempty"`
	WallDefault  *Users_UserFull_WallDefault `json:"wall_default,omitempty"`
}

type Users_UserMin struct {
	CanAccessClosed *bool `json:"can_access_closed,omitempty"`
	// Returns if a profile is deleted or blocked
	Deactivated *string `json:"deactivated,omitempty"`
	// User first name
	FirstName *string `json:"first_name,omitempty"`
	// Returns if a profile is hidden.
	Hidden *int `json:"hidden,omitempty"`
	// User ID
	//  Format: int64
	Id       int   `json:"id"`
	IsClosed *bool `json:"is_closed,omitempty"`
	// User last name
	LastName *string `json:"last_name,omitempty"`
}

type Users_UserRelation int

const (
	Users_UserRelation_NotSpecified      Users_UserRelation = 0
	Users_UserRelation_Single            Users_UserRelation = 1
	Users_UserRelation_InARelationship   Users_UserRelation = 2
	Users_UserRelation_Engaged           Users_UserRelation = 3
	Users_UserRelation_Married           Users_UserRelation = 4
	Users_UserRelation_Complicated       Users_UserRelation = 5
	Users_UserRelation_ActivelySearching Users_UserRelation = 6
	Users_UserRelation_InLove            Users_UserRelation = 7
	Users_UserRelation_InACivilUnion     Users_UserRelation = 8
)

type Users_UserSettingsXtr struct {
	// User's date of birth
	Bdate *string `json:"bdate,omitempty"`
	// Information whether user's birthdate are hidden
	//  Minimum: 0
	BdateVisibility *int                   `json:"bdate_visibility,omitempty"`
	City            *Base_City             `json:"city,omitempty"`
	Connections     *Users_UserConnections `json:"connections,omitempty"`
	Country         *Base_Country          `json:"country,omitempty"`
	// User first name
	FirstName *string `json:"first_name,omitempty"`
	// User's hometown
	HomeTown  string                         `json:"home_town"`
	Interests *Account_UserSettingsInterests `json:"interests,omitempty"`
	Languages *[]string                      `json:"languages,omitempty"`
	// User last name
	LastName *string `json:"last_name,omitempty"`
	// User maiden name
	MaidenName  *string              `json:"maiden_name,omitempty"`
	NameRequest *Account_NameRequest `json:"name_request,omitempty"`
	Personal    *Users_Personal      `json:"personal,omitempty"`
	// User phone number with some hidden digits
	Phone *string `json:"phone,omitempty"`
	// User relationship status
	Relation        *Users_UserRelation `json:"relation,omitempty"`
	RelationPartner *Users_UserMin      `json:"relation_partner,omitempty"`
	// Information whether relation status is pending
	RelationPending  *Base_BoolInt    `json:"relation_pending,omitempty"`
	RelationRequests *[]Users_UserMin `json:"relation_requests,omitempty"`
	// Domain name of the user's page
	ScreenName *string `json:"screen_name,omitempty"`
	// User sex
	Sex *Base_Sex `json:"sex,omitempty"`
	// User status
	Status      string       `json:"status"`
	StatusAudio *Audio_Audio `json:"status_audio,omitempty"`
}

// Users_UserType Object type
type Users_UserType string

const (
	Users_UserType_Profile Users_UserType = "profile"
)

type Users_UserXtrType struct {
	Users_User
	Type *Users_UserType `json:"type,omitempty"`
}

type Users_UsersArray struct {
	// Users number
	//  Minimum: 0
	Count int `json:"count"`
	//  Format: int64
	Items []int `json:"items"`
}

type Utils_DomainResolved struct {
	// Group ID
	//  Format: int64
	GroupId *int `json:"group_id,omitempty"`
	// Object ID
	ObjectId *int                      `json:"object_id,omitempty"`
	Type     *Utils_DomainResolvedType `json:"type,omitempty"`
}

// Utils_DomainResolvedType Object type
type Utils_DomainResolvedType string

const (
	Utils_DomainResolvedType_User                 Utils_DomainResolvedType = "user"
	Utils_DomainResolvedType_Group                Utils_DomainResolvedType = "group"
	Utils_DomainResolvedType_Application          Utils_DomainResolvedType = "application"
	Utils_DomainResolvedType_Page                 Utils_DomainResolvedType = "page"
	Utils_DomainResolvedType_VkApp                Utils_DomainResolvedType = "vk_app"
	Utils_DomainResolvedType_CommunityApplication Utils_DomainResolvedType = "community_application"
)

type Utils_LastShortenedLink struct {
	// Access key for private stats
	AccessKey *string `json:"access_key,omitempty"`
	// Link key (characters after vk.cc/)
	Key *string `json:"key,omitempty"`
	// Short link URL
	//  Format: uri
	ShortUrl *string `json:"short_url,omitempty"`
	// Creation time in Unixtime
	Timestamp *int `json:"timestamp,omitempty"`
	// Full URL
	//  Format: uri
	Url *string `json:"url,omitempty"`
	// Total views number
	Views *int `json:"views,omitempty"`
}

type Utils_LinkChecked struct {
	// Link URL
	//  Format: uri
	Link   *string                  `json:"link,omitempty"`
	Status *Utils_LinkCheckedStatus `json:"status,omitempty"`
}

// Utils_LinkCheckedStatus Link status
type Utils_LinkCheckedStatus string

const (
	Utils_LinkCheckedStatus_NotBanned  Utils_LinkCheckedStatus = "not_banned"
	Utils_LinkCheckedStatus_Banned     Utils_LinkCheckedStatus = "banned"
	Utils_LinkCheckedStatus_Processing Utils_LinkCheckedStatus = "processing"
)

type Utils_LinkStats struct {
	// Link key (characters after vk.cc/)
	Key   *string        `json:"key,omitempty"`
	Stats *[]Utils_Stats `json:"stats,omitempty"`
}

type Utils_LinkStatsExtended struct {
	// Link key (characters after vk.cc/)
	Key   *string                `json:"key,omitempty"`
	Stats *[]Utils_StatsExtended `json:"stats,omitempty"`
}

type Utils_ShortLink struct {
	// Access key for private stats
	AccessKey *string `json:"access_key,omitempty"`
	// Link key (characters after vk.cc/)
	Key *string `json:"key,omitempty"`
	// Short link URL
	//  Format: uri
	ShortUrl *string `json:"short_url,omitempty"`
	// Full URL
	//  Format: uri
	Url *string `json:"url,omitempty"`
}

type Utils_Stats struct {
	// Start time
	Timestamp *int `json:"timestamp,omitempty"`
	// Total views number
	Views *int `json:"views,omitempty"`
}

type Utils_StatsCity struct {
	// City ID
	CityId *int `json:"city_id,omitempty"`
	// Views number
	Views *int `json:"views,omitempty"`
}

type Utils_StatsCountry struct {
	// Country ID
	CountryId *int `json:"country_id,omitempty"`
	// Views number
	Views *int `json:"views,omitempty"`
}

type Utils_StatsExtended struct {
	Cities    *[]Utils_StatsCity    `json:"cities,omitempty"`
	Countries *[]Utils_StatsCountry `json:"countries,omitempty"`
	SexAge    *[]Utils_StatsSexAge  `json:"sex_age,omitempty"`
	// Start time
	Timestamp *int `json:"timestamp,omitempty"`
	// Total views number
	Views *int `json:"views,omitempty"`
}

type Utils_StatsSexAge struct {
	// Age denotation
	AgeRange *string `json:"age_range,omitempty"`
	//  Views by female users
	Female *int `json:"female,omitempty"`
	//  Views by male users
	Male *int `json:"male,omitempty"`
}

type Video_LiveInfo struct {
	Enabled                Base_BoolInt  `json:"enabled"`
	IsNotificationsBlocked *Base_BoolInt `json:"is_notifications_blocked,omitempty"`
}

// Video_LiveSettings Video live settings
type Video_LiveSettings struct {
	// If user car rewind live or not
	CanRewind *Base_BoolInt `json:"can_rewind,omitempty"`
	// If live is endless or not
	IsEndless *Base_BoolInt `json:"is_endless,omitempty"`
	// Max possible time for rewind
	MaxDuration *int `json:"max_duration,omitempty"`
}

type Video_SaveResult struct {
	// Video access key
	AccessKey *string `json:"access_key,omitempty"`
	// Video description
	Description *string `json:"description,omitempty"`
	// Video owner ID
	//  Format: int64
	OwnerId *int `json:"owner_id,omitempty"`
	// Video title
	Title *string `json:"title,omitempty"`
	// URL for the video uploading
	//  Format: uri
	UploadUrl *string `json:"upload_url,omitempty"`
	// Video ID
	VideoId *int `json:"video_id,omitempty"`
}

type Video_Video_LiveStatus string

const (
	Video_Video_LiveStatus_Waiting  Video_Video_LiveStatus = "waiting"
	Video_Video_LiveStatus_Started  Video_Video_LiveStatus = "started"
	Video_Video_LiveStatus_Finished Video_Video_LiveStatus = "finished"
	Video_Video_LiveStatus_Failed   Video_Video_LiveStatus = "failed"
	Video_Video_LiveStatus_Upcoming Video_Video_LiveStatus = "upcoming"
)

type Video_Video_Type string

const (
	Video_Video_Type_Video      Video_Video_Type = "video"
	Video_Video_Type_MusicVideo Video_Video_Type = "music_video"
	Video_Video_Type_Movie      Video_Video_Type = "movie"
)

type Video_Video struct {
	// Video access key
	AccessKey *string `json:"access_key,omitempty"`
	// 1 if video is added to user's albums
	Added *Base_BoolInt `json:"added,omitempty"`
	// Date when the video has been added in Unixtime
	//  Minimum: 0
	AddingDate *int `json:"adding_date,omitempty"`
	// Live donations balance
	//  Minimum: 0
	Balance *int `json:"balance,omitempty"`
	// Information whether current user can add the video
	CanAdd *Base_BoolInt `json:"can_add,omitempty"`
	// Information whether current user can add the video to favourites
	CanAddToFaves *Base_BoolInt `json:"can_add_to_faves,omitempty"`
	// Information whether current user can attach action button to the video
	CanAttachLink *Base_BoolInt `json:"can_attach_link,omitempty"`
	// Information whether current user can comment the video
	CanComment *Base_BoolInt `json:"can_comment,omitempty"`
	// Information whether current user can edit the video
	CanEdit *Base_BoolInt `json:"can_edit,omitempty"`
	// Information whether current user can like the video
	CanLike *Base_BoolInt `json:"can_like,omitempty"`
	// Information whether current user can repost the video
	CanRepost *Base_BoolInt `json:"can_repost,omitempty"`
	// Information whether current user can subscribe to author of the video
	CanSubscribe *Base_BoolInt `json:"can_subscribe,omitempty"`
	// Number of comments
	//  Minimum: 0
	Comments *int `json:"comments,omitempty"`
	// Restriction code
	//  Minimum: 0
	ContentRestricted *int `json:"content_restricted,omitempty"`
	// Restriction text
	ContentRestrictedMessage *string `json:"content_restricted_message,omitempty"`
	// 1 if  video is being converted
	Converting *Base_BoolInt `json:"converting,omitempty"`
	// Date when video has been uploaded in Unixtime
	//  Minimum: 0
	Date *int `json:"date,omitempty"`
	// Video description
	Description *string `json:"description,omitempty"`
	// Video duration in seconds
	//  Minimum: 0
	Duration   *int                `json:"duration,omitempty"`
	FirstFrame *[]Video_VideoImage `json:"first_frame,omitempty"`
	// Video height
	//  Minimum: 0
	Height *int `json:"height,omitempty"`
	// Video ID
	//  Minimum: 0
	Id    *int                `json:"id,omitempty"`
	Image *[]Video_VideoImage `json:"image,omitempty"`
	// Whether video is added to bookmarks
	IsFavorite *bool `json:"is_favorite,omitempty"`
	// 1 if video is private
	IsPrivate *Base_BoolInt `json:"is_private,omitempty"`
	// 1 if user is subscribed to author of the video
	IsSubscribed *Base_BoolInt `json:"is_subscribed,omitempty"`
	Likes        *Base_Likes   `json:"likes,omitempty"`
	// 1 if the video is a live stream
	Live *Base_PropertyExists `json:"live,omitempty"`
	// Whether current user is subscribed to the upcoming live stream notification (if not subscribed to the author)
	LiveNotify *Base_BoolInt `json:"live_notify,omitempty"`
	// Date in Unixtime when the live stream is scheduled to start by the author
	//  Minimum: 0
	LiveStartTime *int `json:"live_start_time,omitempty"`
	// Live stream status
	LiveStatus *Video_Video_LiveStatus `json:"live_status,omitempty"`
	// If video is external, number of views on vk
	//  Minimum: 0
	LocalViews *int `json:"local_views,omitempty"`
	// Video owner ID
	//  Format: int64
	OwnerId *int `json:"owner_id,omitempty"`
	// External platform
	Platform *string `json:"platform,omitempty"`
	// Video embed URL
	//  Format: uri
	Player *string `json:"player,omitempty"`
	// Returns if the video is processing
	Processing *Base_PropertyExists `json:"processing,omitempty"`
	// Information whether the video is repeated
	Repeat  *Base_PropertyExists `json:"repeat,omitempty"`
	Reposts *Base_RepostsInfo    `json:"reposts,omitempty"`
	// Number of spectators of the stream
	//  Minimum: 0
	Spectators *int `json:"spectators,omitempty"`
	// Video title
	Title     *string           `json:"title,omitempty"`
	TrackCode *string           `json:"track_code,omitempty"`
	Type      *Video_Video_Type `json:"type,omitempty"`
	// 1 if the video is an upcoming stream
	Upcoming *Base_PropertyExists `json:"upcoming,omitempty"`
	// Id of the user who uploaded the video if it was uploaded to a group by member
	//  Format: int64
	//  Minimum: 0
	UserId *int `json:"user_id,omitempty"`
	// Number of views
	//  Minimum: 0
	Views *int `json:"views,omitempty"`
	// Video width
	//  Minimum: 0
	Width *int `json:"width,omitempty"`
}

type Video_VideoAlbum struct {
	// Album ID
	Id int `json:"id"`
	// Album owner's ID
	//  Format: int64
	OwnerId int `json:"owner_id"`
	// Album title
	Title string `json:"title"`
}

type Video_VideoAlbumFull struct {
	Video_VideoAlbum
	// Total number of videos in album
	//  Minimum: 0
	Count int `json:"count"`
	// Album cover image in different sizes
	Image *[]Video_VideoImage `json:"image,omitempty"`
	// Need blur album thumb or not
	ImageBlur *Base_PropertyExists `json:"image_blur,omitempty"`
	// Information whether album is system
	IsSystem *Base_PropertyExists `json:"is_system,omitempty"`
	// Date when the album has been updated last time in Unixtime
	//  Minimum: 0
	UpdatedTime int `json:"updated_time"`
}

type Video_VideoFiles struct {
	// URL of the external player
	//  Format: uri
	External *string `json:"external,omitempty"`
	// URL of the flv file with 320p quality
	//  Format: uri
	Flv320 *string `json:"flv_320,omitempty"`
	// URL of the mpeg4 file with 1080p quality
	//  Format: uri
	Mp41080 *string `json:"mp4_1080,omitempty"`
	// URL of the mpeg4 file with 144p quality
	//  Format: uri
	Mp4144 *string `json:"mp4_144,omitempty"`
	// URL of the mpeg4 file with 2K quality
	//  Format: uri
	Mp41440 *string `json:"mp4_1440,omitempty"`
	// URL of the mpeg4 file with 4K quality
	//  Format: uri
	Mp42160 *string `json:"mp4_2160,omitempty"`
	// URL of the mpeg4 file with 240p quality
	//  Format: uri
	Mp4240 *string `json:"mp4_240,omitempty"`
	// URL of the mpeg4 file with 360p quality
	//  Format: uri
	Mp4360 *string `json:"mp4_360,omitempty"`
	// URL of the mpeg4 file with 480p quality
	//  Format: uri
	Mp4480 *string `json:"mp4_480,omitempty"`
	// URL of the mpeg4 file with 720p quality
	//  Format: uri
	Mp4720 *string `json:"mp4_720,omitempty"`
}

type Video_VideoFull struct {
	Video_Video
	Files *Video_VideoFiles `json:"files,omitempty"`
	// Settings for live stream
	LiveSettings *Video_LiveSettings `json:"live_settings,omitempty"`
	Trailer      *Video_VideoFiles   `json:"trailer,omitempty"`
}

type Video_VideoImage struct {
	Base_Image
	WithPadding *Base_PropertyExists `json:"with_padding,omitempty"`
}

type Wall_AppPost struct {
	// Application ID
	Id *int `json:"id,omitempty"`
	// Application name
	Name *string `json:"name,omitempty"`
	// URL of the preview image with 130 px in width
	//  Format: uri
	Photo130 *string `json:"photo_130,omitempty"`
	// URL of the preview image with 604 px in width
	//  Format: uri
	Photo604 *string `json:"photo_604,omitempty"`
}

type Wall_AttachedNote struct {
	CanComment *int `json:"can_comment,omitempty"`
	// Comments number
	//  Minimum: 0
	Comments int `json:"comments"`
	// Date when the note has been created in Unixtime
	//  Minimum: 0
	Date int `json:"date"`
	// Note ID
	//  Minimum: 1
	Id int `json:"id"`
	// Note owner's ID
	//  Format: int64
	//  Minimum: 1
	OwnerId        int       `json:"owner_id"`
	PrivacyComment *[]string `json:"privacy_comment,omitempty"`
	PrivacyView    *[]string `json:"privacy_view,omitempty"`
	// Read comments number
	//  Minimum: 0
	ReadComments int `json:"read_comments"`
	// Note text
	Text *string `json:"text,omitempty"`
	// Note wiki text
	TextWiki *string `json:"text_wiki,omitempty"`
	// Note title
	Title string `json:"title"`
	// URL of the page with note preview
	//  Format: uri
	ViewUrl string `json:"view_url"`
}

type Wall_CarouselBase struct {
	// Index of current carousel element
	//  Minimum: 0
	CarouselOffset *int `json:"carousel_offset,omitempty"`
}

type Wall_CommentAttachment struct {
	Audio             *Audio_Audio               `json:"audio,omitempty"`
	Doc               *Docs_Doc                  `json:"doc,omitempty"`
	Link              *Base_Link                 `json:"link,omitempty"`
	Market            *Market_MarketItem         `json:"market,omitempty"`
	MarketMarketAlbum *Market_MarketAlbum        `json:"market_market_album,omitempty"`
	Note              *Wall_AttachedNote         `json:"note,omitempty"`
	Page              *Pages_WikipageFull        `json:"page,omitempty"`
	Photo             *Photos_Photo              `json:"photo,omitempty"`
	Sticker           *Base_Sticker              `json:"sticker,omitempty"`
	Type              Wall_CommentAttachmentType `json:"type"`
	Video             *Video_Video               `json:"video,omitempty"`
}

// Wall_CommentAttachmentType Attachment type
type Wall_CommentAttachmentType string

const (
	Wall_CommentAttachmentType_Photo             Wall_CommentAttachmentType = "photo"
	Wall_CommentAttachmentType_Audio             Wall_CommentAttachmentType = "audio"
	Wall_CommentAttachmentType_Video             Wall_CommentAttachmentType = "video"
	Wall_CommentAttachmentType_Doc               Wall_CommentAttachmentType = "doc"
	Wall_CommentAttachmentType_Link              Wall_CommentAttachmentType = "link"
	Wall_CommentAttachmentType_Note              Wall_CommentAttachmentType = "note"
	Wall_CommentAttachmentType_Page              Wall_CommentAttachmentType = "page"
	Wall_CommentAttachmentType_MarketMarketAlbum Wall_CommentAttachmentType = "market_market_album"
	Wall_CommentAttachmentType_Market            Wall_CommentAttachmentType = "market"
	Wall_CommentAttachmentType_Sticker           Wall_CommentAttachmentType = "sticker"
)

type Wall_Geo_Type string

const (
	Wall_Geo_Type_Place Wall_Geo_Type = "place"
	Wall_Geo_Type_Point Wall_Geo_Type = "point"
)

type Wall_Geo struct {
	// Coordinates as string. <latitude> <longtitude>
	Coordinates *string     `json:"coordinates,omitempty"`
	Place       *Base_Place `json:"place,omitempty"`
	// Information whether a map is showed
	Showmap *int `json:"showmap,omitempty"`
	// Place type
	Type *Wall_Geo_Type `json:"type,omitempty"`
}

// Wall_GetFilter Filter to apply: 'owner' — posts by the wall owner, 'others' — posts by someone else, 'all' — posts by the wall owner and others (default), 'postponed' — timed posts (only available for calls with an 'access_token'), 'suggests' — suggested posts on a community wall
type Wall_GetFilter string

const (
	Wall_GetFilter_Owner     Wall_GetFilter = "owner"
	Wall_GetFilter_Others    Wall_GetFilter = "others"
	Wall_GetFilter_All       Wall_GetFilter = "all"
	Wall_GetFilter_Postponed Wall_GetFilter = "postponed"
	Wall_GetFilter_Suggests  Wall_GetFilter = "suggests"
	Wall_GetFilter_Archived  Wall_GetFilter = "archived"
	Wall_GetFilter_Donut     Wall_GetFilter = "donut"
)

type Wall_Graffiti struct {
	// Access key for graffiti
	AccessKey *string `json:"access_key,omitempty"`
	// Graffiti height
	//  Minimum: 0
	Height *int `json:"height,omitempty"`
	// Graffiti ID
	Id *int `json:"id,omitempty"`
	// Graffiti owner's ID
	//  Format: int64
	OwnerId *int `json:"owner_id,omitempty"`
	// URL of the preview image with 200 px in width
	//  Format: uri
	Photo200 *string `json:"photo_200,omitempty"`
	// URL of the preview image with 586 px in width
	//  Format: uri
	Photo586 *string `json:"photo_586,omitempty"`
	// Graffiti URL
	//  Format: uri
	Url *string `json:"url,omitempty"`
	// Graffiti width
	//  Minimum: 0
	Width *int `json:"width,omitempty"`
}

type Wall_PostCopyright struct {
	//  Format: int64
	Id   *int   `json:"id,omitempty"`
	Link string `json:"link"`
	Name string `json:"name"`
	Type string `json:"type"`
}

type Wall_PostSource struct {
	// Additional data
	Data *string    `json:"data,omitempty"`
	Link *Base_Link `json:"link,omitempty"`
	// Platform name
	Platform *string              `json:"platform,omitempty"`
	Type     *Wall_PostSourceType `json:"type,omitempty"`
	// URL to an external site used to publish the post
	//  Format: uri
	Url *string `json:"url,omitempty"`
}

// Wall_PostSourceType Type of post source
type Wall_PostSourceType string

const (
	Wall_PostSourceType_Vk     Wall_PostSourceType = "vk"
	Wall_PostSourceType_Widget Wall_PostSourceType = "widget"
	Wall_PostSourceType_Api    Wall_PostSourceType = "api"
	Wall_PostSourceType_Rss    Wall_PostSourceType = "rss"
	Wall_PostSourceType_Sms    Wall_PostSourceType = "sms"
	Wall_PostSourceType_Mvk    Wall_PostSourceType = "mvk"
)

// Wall_PostType Post type
type Wall_PostType string

const (
	Wall_PostType_Post     Wall_PostType = "post"
	Wall_PostType_Copy     Wall_PostType = "copy"
	Wall_PostType_Reply    Wall_PostType = "reply"
	Wall_PostType_Postpone Wall_PostType = "postpone"
	Wall_PostType_Suggest  Wall_PostType = "suggest"
	Wall_PostType_PostAds  Wall_PostType = "post_ads"
	Wall_PostType_Photo    Wall_PostType = "photo"
	Wall_PostType_Video    Wall_PostType = "video"
)

type Wall_PostedPhoto struct {
	// Photo ID
	Id *int `json:"id,omitempty"`
	// Photo owner's ID
	//  Format: int64
	OwnerId *int `json:"owner_id,omitempty"`
	// URL of the preview image with 130 px in width
	//  Format: uri
	Photo130 *string `json:"photo_130,omitempty"`
	// URL of the preview image with 604 px in width
	//  Format: uri
	Photo604 *string `json:"photo_604,omitempty"`
}

type Wall_Views struct {
	// Count
	//  Minimum: 0
	Count *int `json:"count,omitempty"`
}

type Wall_WallComment struct {
	Attachments *[]Wall_CommentAttachment `json:"attachments,omitempty"`
	CanEdit     *Base_BoolInt             `json:"can_edit,omitempty"`
	// Date when the comment has been added in Unixtime
	//  Minimum: 0
	Date    int                    `json:"date"`
	Deleted *bool                  `json:"deleted,omitempty"`
	Donut   *Wall_WallCommentDonut `json:"donut,omitempty"`
	// Author ID
	//  Format: int64
	FromId int `json:"from_id"`
	// Comment ID
	//  Minimum: 1
	Id    int             `json:"id"`
	Likes *Base_LikesInfo `json:"likes,omitempty"`
	//  Format: int64
	OwnerId      *int   `json:"owner_id,omitempty"`
	ParentsStack *[]int `json:"parents_stack,omitempty"`
	PhotoId      *int   `json:"photo_id,omitempty"`
	// Photo ID
	//  Minimum: 0
	Pid    *int `json:"pid,omitempty"`
	PostId *int `json:"post_id,omitempty"`
	// Real position of the comment
	RealOffset *int `json:"real_offset,omitempty"`
	// Replied comment ID
	ReplyToComment *int `json:"reply_to_comment,omitempty"`
	// Replied user ID
	//  Format: int64
	ReplyToUser *int `json:"reply_to_user,omitempty"`
	// Comment text
	Text    string          `json:"text"`
	Thread  *Comment_Thread `json:"thread,omitempty"`
	VideoId *int            `json:"video_id,omitempty"`
}

type Wall_WallCommentDonut struct {
	// Means commentator is donator
	IsDon       *bool                             `json:"is_don,omitempty"`
	Placeholder *Wall_WallCommentDonutPlaceholder `json:"placeholder,omitempty"`
}

type Wall_WallCommentDonutPlaceholder struct {
	Text string `json:"text"`
}

type Wall_Wallpost struct {
	// Access key to private object
	AccessKey   *string                    `json:"access_key,omitempty"`
	Attachments *[]Wall_WallpostAttachment `json:"attachments,omitempty"`
	// Information about the source of the post
	Copyright *Wall_PostCopyright `json:"copyright,omitempty"`
	// Date of publishing in Unixtime
	Date *int `json:"date,omitempty"`
	// Date of editing in Unixtime
	//  Minimum: 0
	Edited *int `json:"edited,omitempty"`
	// Post author ID
	//  Format: int64
	FromId *int      `json:"from_id,omitempty"`
	Geo    *Wall_Geo `json:"geo,omitempty"`
	// Post ID
	Id *int `json:"id,omitempty"`
	// Is post archived, only for post owners
	IsArchived *bool `json:"is_archived,omitempty"`
	IsDeleted  *bool `json:"is_deleted,omitempty"`
	// Information whether the post in favorites list
	IsFavorite *bool `json:"is_favorite,omitempty"`
	// Count of likes
	Likes *Base_LikesInfo `json:"likes,omitempty"`
	// Wall owner's ID
	//  Format: int64
	OwnerId *int `json:"owner_id,omitempty"`
	// If post type 'reply', contains original parent IDs stack
	ParentsStack *[]int `json:"parents_stack,omitempty"`
	// If post type 'reply', contains original post ID
	PostId     *int              `json:"post_id,omitempty"`
	PostSource *Wall_PostSource  `json:"post_source,omitempty"`
	PostType   *Wall_PostType    `json:"post_type,omitempty"`
	Reposts    *Base_RepostsInfo `json:"reposts,omitempty"`
	// Post signer ID
	//  Format: int64
	SignerId *int `json:"signer_id,omitempty"`
	// Post text
	Text *string `json:"text,omitempty"`
	// Count of views
	Views *Wall_Views `json:"views,omitempty"`
}

type Wall_WallpostAttachment struct {
	// Access key for the audio
	AccessKey   *string                     `json:"access_key,omitempty"`
	Album       *Photos_PhotoAlbum          `json:"album,omitempty"`
	App         *Wall_AppPost               `json:"app,omitempty"`
	Audio       *Audio_Audio                `json:"audio,omitempty"`
	Doc         *Docs_Doc                   `json:"doc,omitempty"`
	Event       *Events_EventAttach         `json:"event,omitempty"`
	Graffiti    *Wall_Graffiti              `json:"graffiti,omitempty"`
	Group       *Groups_GroupAttach         `json:"group,omitempty"`
	Link        *Base_Link                  `json:"link,omitempty"`
	Market      *Market_MarketItem          `json:"market,omitempty"`
	MarketAlbum *Market_MarketAlbum         `json:"market_album,omitempty"`
	Note        *Notes_Note                 `json:"note,omitempty"`
	Page        *Pages_WikipageFull         `json:"page,omitempty"`
	Photo       *Photos_Photo               `json:"photo,omitempty"`
	Poll        *Polls_Poll                 `json:"poll,omitempty"`
	PostedPhoto *Wall_PostedPhoto           `json:"posted_photo,omitempty"`
	Type        Wall_WallpostAttachmentType `json:"type"`
	Video       *Video_VideoFull            `json:"video,omitempty"`
}

// Wall_WallpostAttachmentType Attachment type
type Wall_WallpostAttachmentType string

const (
	Wall_WallpostAttachmentType_Photo            Wall_WallpostAttachmentType = "photo"
	Wall_WallpostAttachmentType_PhotosList       Wall_WallpostAttachmentType = "photos_list"
	Wall_WallpostAttachmentType_PostedPhoto      Wall_WallpostAttachmentType = "posted_photo"
	Wall_WallpostAttachmentType_Audio            Wall_WallpostAttachmentType = "audio"
	Wall_WallpostAttachmentType_AudioPlaylist    Wall_WallpostAttachmentType = "audio_playlist"
	Wall_WallpostAttachmentType_Video            Wall_WallpostAttachmentType = "video"
	Wall_WallpostAttachmentType_Doc              Wall_WallpostAttachmentType = "doc"
	Wall_WallpostAttachmentType_Link             Wall_WallpostAttachmentType = "link"
	Wall_WallpostAttachmentType_Graffiti         Wall_WallpostAttachmentType = "graffiti"
	Wall_WallpostAttachmentType_Note             Wall_WallpostAttachmentType = "note"
	Wall_WallpostAttachmentType_App              Wall_WallpostAttachmentType = "app"
	Wall_WallpostAttachmentType_Poll             Wall_WallpostAttachmentType = "poll"
	Wall_WallpostAttachmentType_Page             Wall_WallpostAttachmentType = "page"
	Wall_WallpostAttachmentType_Album            Wall_WallpostAttachmentType = "album"
	Wall_WallpostAttachmentType_MarketAlbum      Wall_WallpostAttachmentType = "market_album"
	Wall_WallpostAttachmentType_Market           Wall_WallpostAttachmentType = "market"
	Wall_WallpostAttachmentType_Event            Wall_WallpostAttachmentType = "event"
	Wall_WallpostAttachmentType_DonutLink        Wall_WallpostAttachmentType = "donut_link"
	Wall_WallpostAttachmentType_Article          Wall_WallpostAttachmentType = "article"
	Wall_WallpostAttachmentType_Textlive         Wall_WallpostAttachmentType = "textlive"
	Wall_WallpostAttachmentType_Textpost         Wall_WallpostAttachmentType = "textpost"
	Wall_WallpostAttachmentType_TextpostPublish  Wall_WallpostAttachmentType = "textpost_publish"
	Wall_WallpostAttachmentType_SituationalTheme Wall_WallpostAttachmentType = "situational_theme"
	Wall_WallpostAttachmentType_Group            Wall_WallpostAttachmentType = "group"
	Wall_WallpostAttachmentType_Sticker          Wall_WallpostAttachmentType = "sticker"
	Wall_WallpostAttachmentType_Podcast          Wall_WallpostAttachmentType = "podcast"
)

type Wall_WallpostCommentsDonut struct {
	Placeholder *Wall_WallpostCommentsDonutPlaceholder `json:"placeholder,omitempty"`
}

// Wall_WallpostCommentsDonutPlaceholder Info about paid comments feature
type Wall_WallpostCommentsDonutPlaceholder struct {
	Text string `json:"text"`
}

type Wall_WallpostDonut_EditMode string

const (
	Wall_WallpostDonut_EditMode_All      Wall_WallpostDonut_EditMode = "all"
	Wall_WallpostDonut_EditMode_Duration Wall_WallpostDonut_EditMode = "duration"
)

// Wall_WallpostDonut Info about paid wall post
type Wall_WallpostDonut struct {
	// Says whether group admin can post free copy of this donut post
	CanPublishFreeCopy *bool `json:"can_publish_free_copy,omitempty"`
	// Says what user can edit in post about donut properties
	EditMode *Wall_WallpostDonut_EditMode `json:"edit_mode,omitempty"`
	// Post only for dons
	IsDonut bool `json:"is_donut"`
	// Value of this field need to pass in wall.post/edit in donut_paid_duration
	PaidDuration *int `json:"paid_duration,omitempty"`
	// If placeholder was respond, text and all attachments will be hidden
	Placeholder *Wall_WallpostDonutPlaceholder `json:"placeholder,omitempty"`
}

type Wall_WallpostDonutPlaceholder struct {
	Text string `json:"text"`
}

type Wall_WallpostFull_TopicId int

const (
	Wall_WallpostFull_TopicId_EmptyTopic     Wall_WallpostFull_TopicId = 0
	Wall_WallpostFull_TopicId_Art            Wall_WallpostFull_TopicId = 1
	Wall_WallpostFull_TopicId_It             Wall_WallpostFull_TopicId = 7
	Wall_WallpostFull_TopicId_Games          Wall_WallpostFull_TopicId = 12
	Wall_WallpostFull_TopicId_Music          Wall_WallpostFull_TopicId = 16
	Wall_WallpostFull_TopicId_Photo          Wall_WallpostFull_TopicId = 19
	Wall_WallpostFull_TopicId_ScienceAndTech Wall_WallpostFull_TopicId = 21
	Wall_WallpostFull_TopicId_Sport          Wall_WallpostFull_TopicId = 23
	Wall_WallpostFull_TopicId_Travel         Wall_WallpostFull_TopicId = 25
	Wall_WallpostFull_TopicId_TvAndCinema    Wall_WallpostFull_TopicId = 26
	Wall_WallpostFull_TopicId_Humor          Wall_WallpostFull_TopicId = 32
	Wall_WallpostFull_TopicId_Fashion        Wall_WallpostFull_TopicId = 43
)

type Wall_WallpostFull struct {
	Wall_CarouselBase
	Wall_Wallpost
	// Information whether current user can delete the post
	CanDelete *Base_BoolInt `json:"can_delete,omitempty"`
	// Information whether current user can edit the post
	CanEdit *Base_BoolInt `json:"can_edit,omitempty"`
	// Information whether current user can pin the post
	CanPin      *Base_BoolInt        `json:"can_pin,omitempty"`
	Comments    *Base_CommentsInfo   `json:"comments,omitempty"`
	CopyHistory *[]Wall_WallpostFull `json:"copy_history,omitempty"`
	// Post creator ID (if post still can be edited)
	//  Format: int64
	CreatedBy *int                `json:"created_by,omitempty"`
	Donut     *Wall_WallpostDonut `json:"donut,omitempty"`
	// Hash for sharing
	Hash *string `json:"hash,omitempty"`
	// Information whether the post is pinned
	IsPinned *int `json:"is_pinned,omitempty"`
	// Information whether the post is marked as ads
	MarkedAsAds *Base_BoolInt `json:"marked_as_ads,omitempty"`
	// Preview length control parameter
	//  Minimum: 0
	//  Maximum: 1
	ShortTextRate *float64 `json:"short_text_rate,omitempty"`
	// Topic ID. Allowed values can be obtained from newsfeed.getPostTopics method
	//  Minimum: 0
	TopicId *Wall_WallpostFull_TopicId `json:"topic_id,omitempty"`
}

type Wall_WallpostToId struct {
	Attachments *[]Wall_WallpostAttachment `json:"attachments,omitempty"`
	Comments    *Base_CommentsInfo         `json:"comments,omitempty"`
	// ID of the source post owner
	//  Format: int64
	CopyOwnerId *int `json:"copy_owner_id,omitempty"`
	// ID of the source post
	CopyPostId *int `json:"copy_post_id,omitempty"`
	// Date of publishing in Unixtime
	Date *int `json:"date,omitempty"`
	// Post author ID
	//  Format: int64
	FromId *int      `json:"from_id,omitempty"`
	Geo    *Wall_Geo `json:"geo,omitempty"`
	// Post ID
	Id *int `json:"id,omitempty"`
	// Information whether the post in favorites list
	IsFavorite *bool           `json:"is_favorite,omitempty"`
	Likes      *Base_LikesInfo `json:"likes,omitempty"`
	// wall post ID (if comment)
	PostId     *int              `json:"post_id,omitempty"`
	PostSource *Wall_PostSource  `json:"post_source,omitempty"`
	PostType   *Wall_PostType    `json:"post_type,omitempty"`
	Reposts    *Base_RepostsInfo `json:"reposts,omitempty"`
	// Post signer ID
	//  Format: int64
	SignerId *int `json:"signer_id,omitempty"`
	// Post text
	Text *string `json:"text,omitempty"`
	// Wall owner's ID
	//  Format: int64
	ToId *int `json:"to_id,omitempty"`
}

type Widgets_CommentMedia struct {
	// Media item ID
	ItemId *int `json:"item_id,omitempty"`
	// Media owner's ID
	//  Format: int64
	OwnerId *int `json:"owner_id,omitempty"`
	// URL of the preview image (type=photo only)
	//  Format: uri
	ThumbSrc *string                   `json:"thumb_src,omitempty"`
	Type     *Widgets_CommentMediaType `json:"type,omitempty"`
}

// Widgets_CommentMediaType Media type
type Widgets_CommentMediaType string

const (
	Widgets_CommentMediaType_Audio Widgets_CommentMediaType = "audio"
	Widgets_CommentMediaType_Photo Widgets_CommentMediaType = "photo"
	Widgets_CommentMediaType_Video Widgets_CommentMediaType = "video"
)

type Widgets_CommentReplies struct {
	// Information whether current user can comment the post
	CanPost *Base_BoolInt `json:"can_post,omitempty"`
	// Comments number
	//  Minimum: 0
	Count   *int                          `json:"count,omitempty"`
	Replies *[]Widgets_CommentRepliesItem `json:"replies,omitempty"`
}

type Widgets_CommentRepliesItem struct {
	// Comment ID
	Cid *int `json:"cid,omitempty"`
	// Date when the comment has been added in Unixtime
	Date  *int                 `json:"date,omitempty"`
	Likes *Widgets_WidgetLikes `json:"likes,omitempty"`
	// Comment text
	Text *string `json:"text,omitempty"`
	// User ID
	Uid  *int            `json:"uid,omitempty"`
	User *Users_UserFull `json:"user,omitempty"`
}

type Widgets_WidgetComment struct {
	Attachments *[]Wall_CommentAttachment `json:"attachments,omitempty"`
	// Information whether current user can delete the comment
	CanDelete *Base_BoolInt           `json:"can_delete,omitempty"`
	Comments  *Widgets_CommentReplies `json:"comments,omitempty"`
	// Date when the comment has been added in Unixtime
	Date int `json:"date"`
	// Comment author ID
	FromId int `json:"from_id"`
	// Comment ID
	Id         int                   `json:"id"`
	Likes      *Base_LikesInfo       `json:"likes,omitempty"`
	Media      *Widgets_CommentMedia `json:"media,omitempty"`
	PostSource *Wall_PostSource      `json:"post_source,omitempty"`
	// Post type
	PostType int               `json:"post_type"`
	Reposts  *Base_RepostsInfo `json:"reposts,omitempty"`
	// Comment text
	Text string `json:"text"`
	// Wall owner
	ToId int             `json:"to_id"`
	User *Users_UserFull `json:"user,omitempty"`
}

type Widgets_WidgetLikes struct {
	// Likes number
	//  Minimum: 0
	Count *int `json:"count,omitempty"`
}

type Widgets_WidgetPage struct {
	Comments *Base_ObjectCount `json:"comments,omitempty"`
	// Date when widgets on the page has been initialized firstly in Unixtime
	Date *int `json:"date,omitempty"`
	// Page description
	Description *string `json:"description,omitempty"`
	// Page ID
	Id    *int              `json:"id,omitempty"`
	Likes *Base_ObjectCount `json:"likes,omitempty"`
	// page_id parameter value
	PageId *string `json:"page_id,omitempty"`
	// URL of the preview image
	//  Format: uri
	Photo *string `json:"photo,omitempty"`
	// Page title
	Title *string `json:"title,omitempty"`
	// Page absolute URL
	//  Format: uri
	Url *string `json:"url,omitempty"`
}
